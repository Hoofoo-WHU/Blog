<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Hoofoo&#39;s Blog</title>
  
  <subtitle>華方，兆火鳥也。</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://hoofoo-whu.github.io/"/>
  <updated>2020-11-29T10:16:15.238Z</updated>
  <id>http://hoofoo-whu.github.io/</id>
  
  <author>
    <name>華方</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>CSS像素级还原设计中的33.3%</title>
    <link href="http://hoofoo-whu.github.io/article/2019-01-15/CSS%E5%83%8F%E7%B4%A0%E7%BA%A7%E8%BF%98%E5%8E%9F%E8%AE%BE%E8%AE%A1%E4%B8%AD%E7%9A%8433-3.html"/>
    <id>http://hoofoo-whu.github.io/article/2019-01-15/CSS像素级还原设计中的33-3.html</id>
    <published>2019-01-15T13:32:38.000Z</published>
    <updated>2020-11-29T10:16:15.238Z</updated>
    
    <content type="html"><![CDATA[<p>最近我也做了个网易云移动端，我打算用像素级还原的方式练练手，前面的布局一路顺风顺水，但是当到了footer就是和原网页差了一像素，我在footer中怎么找也找不出任何问题，最终发现是上面图片的锅，这篇博客就来记录一下遇到这个问题。<br><a id="more"></a></p><h1 id="等宽布局"><a href="#等宽布局" class="headerlink" title="等宽布局"></a>等宽布局</h1><p>CSS中没有分数的设定，导致我们在需要<code>1/3</code>的时候只能使用<code>33.3%</code>来表示，这在等宽布局的时候就会出现问题，由于剩余了<code>0.1%</code>的宽度，这在<code>1000px</code>宽度以内的网页没有任何影响，因为不足<code>1px</code>显示器会忽略掉这多余的<code>0.1%</code>，当高于<code>1000px</code>就会出现缝隙，当然我们可以<code>33.33%</code>毕竟8K屏的宽度也只有<code>7680px</code>宽，因为<strong>移动端</strong>的宽度低，通常<code>33.3%</code>就基本观察不到了区别了</p><h1 id="等比例块"><a href="#等比例块" class="headerlink" title="等比例块"></a>等比例块</h1><p>CSS中最常用且兼容性最好的等比例方式是使用百分比<code>padding</code>，因为<code>padding</code>的百分比是根据宽度来计算的，这样当宽度改变时，高度就会等比例的改变，这中方式在<strong>移动端</strong>非常常见。<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 自适应方块 */</span></span><br><span class="line"><span class="selector-tag">div</span>&#123;</span><br><span class="line"><span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line"><span class="attribute">padding-bottom</span>: <span class="number">100%</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h1 id="等宽布局遇上等比例块"><a href="#等宽布局遇上等比例块" class="headerlink" title="等宽布局遇上等比例块"></a>等宽布局遇上等比例块</h1><p>等宽布局与等比例块在单独使用的时候都没有什么问题，也可以做到设计稿的像素级还原，但两者相遇就会出现莫名其妙的偏移，如果只是靠像素级的调整来解决偏移问题，那么在不同分辨率下的显示就会出现像素级的偏差。<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.parent</span>&#123;</span><br><span class="line"><span class="attribute">width</span>: <span class="number">33.3%</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.child</span>&#123;</span><br><span class="line"><span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line"><span class="attribute">padding-bottom</span>: <span class="number">100%</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>上面的代码的父元素，占屏宽的<code>33.3%</code>他在我的手机上就是占<code>1/3</code>一点缝隙都没有，子元素也是一个方方正正的方形，网易云音乐移动页面的推荐歌单模块也是如此实现的<br><img src="https://image-1256107964.cos.ap-beijing.myqcloud.com/blog/2019-01-15-061031.png" alt="网易云音乐"></p><p>一切都看起来如此的美好，但当真是如此吗？</p><p>原网页的图片大小：<br><img src="https://image-1256107964.cos.ap-beijing.myqcloud.com/blog/2019-01-15-1547535326665.jpg" alt="网易的网页"><br>我的网页的图片大小：<br><img src="https://image-1256107964.cos.ap-beijing.myqcloud.com/blog/2019-01-15-145823.png" alt="我的网页"></p><p>我使用的<code>grid-template-columns: 1fr 1fr 1fr;</code>进行的均分，而原网页使用的<code>width: 33.3%</code>，这导致了我两者图片的细微的高度差异，而且当前模块还肉眼不可见。回到最开始我提到还原稿差得那一像素，当等宽布局时屏幕宽度就那么宽，但是当等宽遇到了等高，高度的积累就不止一个屏幕的宽度了，就是积累的多个<code>0.11px</code>像素爆发了小宇宙变成了<code>1px</code>让眼睛可以观察到，导致了我<code>footer</code>中的内容被挤压而在<code>footer</code>中找不到任何原因</p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>尽量不要使用<code>width: 33.3%</code>、<code>width:33.3vw</code>这种写法，使用的时候最好多加几个3，误差会小一点，如果是现代浏览器，能用<code>flex</code>和<code>grid</code>就尽量不要用百分比<code>width</code></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;最近我也做了个网易云移动端，我打算用像素级还原的方式练练手，前面的布局一路顺风顺水，但是当到了footer就是和原网页差了一像素，我在footer中怎么找也找不出任何问题，最终发现是上面图片的锅，这篇博客就来记录一下遇到这个问题。&lt;br&gt;
    
    </summary>
    
      <category term="CSS" scheme="http://hoofoo-whu.github.io/categories/CSS/"/>
    
    
      <category term="前端" scheme="http://hoofoo-whu.github.io/tags/%E5%89%8D%E7%AB%AF/"/>
    
      <category term="CSS" scheme="http://hoofoo-whu.github.io/tags/CSS/"/>
    
  </entry>
  
  <entry>
    <title>解决overflow在flex和grid布局中失效</title>
    <link href="http://hoofoo-whu.github.io/article/2019-01-15/%E8%A7%A3%E5%86%B3overflow%E5%9C%A8flex%E5%92%8Cgrid%E5%B8%83%E5%B1%80%E4%B8%AD%E5%A4%B1%E6%95%88.html"/>
    <id>http://hoofoo-whu.github.io/article/2019-01-15/解决overflow在flex和grid布局中失效.html</id>
    <published>2019-01-15T10:16:16.000Z</published>
    <updated>2020-11-29T10:16:15.242Z</updated>
    
    <content type="html"><![CDATA[<p>我们日常处理单行文字溢出的时候一般使用如下的代码：<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.line-clamp-1-ellipsis</span> &#123;</span><br><span class="line">    <span class="attribute">white-space</span>: nowrap;</span><br><span class="line">    <span class="attribute">text-overflow</span>: ellipsis;</span><br><span class="line">    <span class="attribute">overflow</span>: hidden;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>但是当父元素为grid或者flex的子元素的时候，这种方法就会失效<br><a id="more"></a></p><iframe width="100%" height="300" src="//jsfiddle.net/Hoofoo/24mgfzpk/21/embedded/result,html,css/" allowfullscreen="allowfullscreen" allowpaymentrequest frameborder="0"></iframe><p>由于overflow渲染时是根据元素的宽度判断边界的，而flex和grid布局时没有明确的宽度属性，所以overflow属性就会失效，解决的办法也很简单，给他一个min-width，既不影响布局，又有了宽度</p><iframe width="100%" height="300" src="//jsfiddle.net/Hoofoo/24mgfzpk/24/embedded/result,html,css/" allowfullscreen="allowfullscreen" allowpaymentrequest frameborder="0"></iframe>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;我们日常处理单行文字溢出的时候一般使用如下的代码：&lt;br&gt;&lt;figure class=&quot;highlight css&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;selector-class&quot;&gt;.line-clamp-1-ellipsis&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;attribute&quot;&gt;white-space&lt;/span&gt;: nowrap;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;attribute&quot;&gt;text-overflow&lt;/span&gt;: ellipsis;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;attribute&quot;&gt;overflow&lt;/span&gt;: hidden;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;但是当父元素为grid或者flex的子元素的时候，这种方法就会失效&lt;br&gt;
    
    </summary>
    
      <category term="CSS" scheme="http://hoofoo-whu.github.io/categories/CSS/"/>
    
    
      <category term="CSS" scheme="http://hoofoo-whu.github.io/tags/CSS/"/>
    
      <category term="text-overflow" scheme="http://hoofoo-whu.github.io/tags/text-overflow/"/>
    
      <category term="grid" scheme="http://hoofoo-whu.github.io/tags/grid/"/>
    
      <category term="flex" scheme="http://hoofoo-whu.github.io/tags/flex/"/>
    
  </entry>
  
  <entry>
    <title>将图片从七牛云迁移到腾讯云</title>
    <link href="http://hoofoo-whu.github.io/article/2019-01-10/qiniu-to-tencentcloud.html"/>
    <id>http://hoofoo-whu.github.io/article/2019-01-10/qiniu-to-tencentcloud.html</id>
    <published>2019-01-10T12:45:30.000Z</published>
    <updated>2020-11-29T10:16:15.242Z</updated>
    
    <content type="html"><![CDATA[<p>在我的博客没更新的这一年里，我曾经吹爆的七牛云将测试域名期限修改成了一个月，这导致我的博客里的图片全部挂掉了，这个事情搁置了很久没去解决，趁着心气还在就动手把图片从七牛云迁移到了腾讯云，顺便把写在其他地方的几篇博客加进来，在此记录一下迁移的过程。<br><a id="more"></a></p><h1 id="七牛云的处理"><a href="#七牛云的处理" class="headerlink" title="七牛云的处理"></a>七牛云的处理</h1><p>七牛云在测试域名过期之后，因为没有了链接，存储的图片都无法预览也无法下载下来，最好的解决方法就是要绑定一个备案的域名，可惜的是我的域名已经过期了，再说备案也是个麻烦事，不过还好还有其他的解决办法。</p><h2 id="利用跨区域同步管理迁移到新存储空间"><a href="#利用跨区域同步管理迁移到新存储空间" class="headerlink" title="利用跨区域同步管理迁移到新存储空间"></a>利用跨区域同步管理迁移到新存储空间</h2><p>七牛云的测试域名过期时间是每个存储空间单独计算的，所以当新建一个存储空间的时候，新分配的域名还是可以下载存储的内容的，七牛提供了跨区同步管理的服务，我们新建一个其他区的存储空间<strong>image2</strong>，然后设置跨区域同步稍等片刻即可将以前存储的图片导入到新的存储空间，详细请看<a href="https://developer.qiniu.com/kodo/manual/1700/cross-regional-synchronization" rel="external nofollow noopener noreferrer" target="_blank">设置跨区域同步</a>，如果这种方法转移的比较慢也可以参考<a href="https://developer.qiniu.com/kodo/kb/1685/using-qshell-synchronize-directories" rel="external nofollow noopener noreferrer" target="_blank">使用 qshell 同步目录</a>。</p><h2 id="使用Qshell批量下载图片"><a href="#使用Qshell批量下载图片" class="headerlink" title="使用Qshell批量下载图片"></a>使用Qshell批量下载图片</h2><p>虽然图片转移到了新仓库可以下载了，但是只能一张张的下，如果图片比较多的话就很恼火，<a href="https://developer.qiniu.com/kodo/tools/1302/qshell" rel="external nofollow noopener noreferrer" target="_blank">Qshell</a>是七牛提供的命令行工具，提供了批量下载的功能。</p><p>首先按照文档给的<a href="http://devtools.qiniu.com/qshell-v2.3.5.zip" rel="external nofollow noopener noreferrer" target="_blank">下载地址</a>下载Qshell，我是Mac就使用其中的<code>qshell_darwin_x64</code>，因为是临时使用就不配置环境变量了，直接在当前目录运行，如果失败的话给其添加运行权限即可</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chmod +x qshell_darwin_x64</span><br></pre></td></tr></table></figure><p>然后设置账户<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./qshell_darwin_x64 account &lt;AccessKey&gt; &lt;SecretKey&gt; &lt;Name&gt;</span><br></pre></td></tr></table></figure></p><p>秘钥在<code>个人中心&gt;秘钥管理</code>中查看，Name随便写一个就可以，只是本地为了方便切换账户用的</p><p>编写下载配置文件<code>download.json</code>，根据自己的情况自行修改<br><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">"dest_dir"</span>: <span class="string">"&lt;下载到的文件夹绝对路径&gt;"</span>,</span><br><span class="line">    <span class="attr">"bucket"</span>: <span class="string">"&lt;存储空间名&gt;"</span>,</span><br><span class="line">    <span class="attr">"cdn_domain"</span>: <span class="string">"&lt;图床的地址&gt;"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>运行下载命令即可看到图片批量下载完毕<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./qshell_darwin_x64 qdownload download.json</span><br></pre></td></tr></table></figure></p><p>其余情况查看<a href="https://github.com/qiniu/qshell/blob/master/docs/qdownload.md" rel="external nofollow noopener noreferrer" target="_blank">qdownload官方文档</a></p><h1 id="腾讯云的处理"><a href="#腾讯云的处理" class="headerlink" title="腾讯云的处理"></a>腾讯云的处理</h1><p>腾讯云这边的操作比较简单，只需要新建对象存储服务，上传图片申请秘钥即可</p><h2 id="创建存储桶"><a href="#创建存储桶" class="headerlink" title="创建存储桶"></a>创建存储桶</h2><p>这一步选择公有读私有写，比较符合博客的需求<br><img src="https://image-1256107964.cos.ap-beijing.myqcloud.com/blog/2019-01-10-1547101135325.jpg" alt="创建存储桶"><br>存储桶创建完成直接把刚下载好的图片上传上去就可以使用了，因为图片的名字都没有改，所以直接把博文的链接修改成腾讯云的前缀就可以了，我的博文并不是很多，所以直接手动用编辑器替换了，如果比较多可以考虑写一个脚本批量替换</p><h2 id="设置防盗链"><a href="#设置防盗链" class="headerlink" title="设置防盗链"></a>设置防盗链</h2><p>腾讯云提供了防盗链的功能，将博客域名加入白名单即可，不过我不推荐这么做，因为在写博客的时候图片就无法预览了，很不方便<br><img src="https://image-1256107964.cos.ap-beijing.myqcloud.com/blog/2019-01-10-063008.png" alt="设置防盗链"></p><h1 id="iPic上传图片"><a href="#iPic上传图片" class="headerlink" title="iPic上传图片"></a>iPic上传图片</h1><p><a href="https://toolinbox.net/iPic/" rel="external nofollow noopener noreferrer" target="_blank">iPic</a>是一个快捷上传图片到图床的软件，还可以直接复制为markdown链接，在Mac版<a href="https://typora.io" rel="external nofollow noopener noreferrer" target="_blank">Typora</a>中还可以设置自动使用iPic上传，写起博客来非常方便。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在我的博客没更新的这一年里，我曾经吹爆的七牛云将测试域名期限修改成了一个月，这导致我的博客里的图片全部挂掉了，这个事情搁置了很久没去解决，趁着心气还在就动手把图片从七牛云迁移到了腾讯云，顺便把写在其他地方的几篇博客加进来，在此记录一下迁移的过程。&lt;br&gt;
    
    </summary>
    
      <category term="Blog" scheme="http://hoofoo-whu.github.io/categories/Blog/"/>
    
    
      <category term="七牛云" scheme="http://hoofoo-whu.github.io/tags/%E4%B8%83%E7%89%9B%E4%BA%91/"/>
    
      <category term="腾讯云" scheme="http://hoofoo-whu.github.io/tags/%E8%85%BE%E8%AE%AF%E4%BA%91/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript中的原型与原型链</title>
    <link href="http://hoofoo-whu.github.io/article/2018-12-30/javascript-prototype-chain.html"/>
    <id>http://hoofoo-whu.github.io/article/2018-12-30/javascript-prototype-chain.html</id>
    <published>2018-12-30T00:13:50.000Z</published>
    <updated>2020-11-29T10:16:15.242Z</updated>
    
    <content type="html"><![CDATA[<p>JavaScript在某种程度上算是一门简单的语言，因为不包含复杂的继承机制，那么JavaScript是怎么实现共用属性的呢？答案就是原型链。<br><a id="more"></a></p><h1 id="堆中的对象与垃圾回收"><a href="#堆中的对象与垃圾回收" class="headerlink" title="堆中的对象与垃圾回收"></a>堆中的对象与垃圾回收</h1><h2 id="堆中的对象"><a href="#堆中的对象" class="headerlink" title="堆中的对象"></a>堆中的对象</h2><p>众所周知，对象是存在堆中的，JavaScript中除基本类型以外都是对象，其中也包含了数组与函数，所以构造函数也是作为一个函数对象存储在堆中的，而构造函数的变量只是一个引用被存放在window或者global变量对象中，所以我们可以直接使用Object、Boolean、String等构造函数。我们自己new的对象也是存在于堆中的。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> a = &#123;<span class="attr">name</span>: <span class="string">'a'</span>&#125;</span><br><span class="line"><span class="keyword">let</span> b = a</span><br><span class="line">b.name = <span class="string">'b'</span></span><br><span class="line">a.name <span class="comment">// 'a'</span></span><br></pre></td></tr></table></figure></p><p>修改b的name时a的name也会被修改，这个例子也可以充分的说明，当我们在操作对象时只是在操作一个对象的引用，如果想要复制一个变量就需要涉及到<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/assign" rel="external nofollow noopener noreferrer" target="_blank">深拷贝</a>了。</p><h2 id="垃圾回收"><a href="#垃圾回收" class="headerlink" title="垃圾回收"></a>垃圾回收</h2><p>垃圾回收（Garbage Collection），简称GC，直译为垃圾收集，很容易将其理解为将用不到的内存收集起来，而实际是相反的，他是将有用的内存做标记，因为当出现循环引用时会引用计数不会将其判断为垃圾，这将会导致内存泄漏，Python中就是使用的这种GC机制，需要弱引用的机制来解决此问题，而JavaScript类似Java中的GC机制，不存在此问题，我们只需要知道当一个堆内对象失去引用的时候，GC引擎就会在适当的时候清除掉。</p><h1 id="原型（Prototype）"><a href="#原型（Prototype）" class="headerlink" title="原型（Prototype）"></a>原型（Prototype）</h1><p>JavaScript中没有复杂的继承机制，然而当我们新建一个空对象时他是怎么存在对象自带的函数的呢？我们只需要在控制台中打印出来就看到了。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> a = &#123;&#125;</span><br><span class="line">a</span><br><span class="line"><span class="comment">// &#123;&#125;</span></span><br><span class="line"><span class="comment">//   __proto__:</span></span><br><span class="line"><span class="comment">//   constructor: ƒ Object()</span></span><br><span class="line"><span class="comment">//   hasOwnProperty: ƒ hasOwnProperty()</span></span><br><span class="line"><span class="comment">//   isPrototypeOf: ƒ isPrototypeOf()</span></span><br><span class="line"><span class="comment">//   propertyIsEnumerable: ƒ propertyIsEnumerable()</span></span><br><span class="line"><span class="comment">//   toLocaleString: ƒ toLocaleString()</span></span><br><span class="line"><span class="comment">//   toString: ƒ toString()</span></span><br><span class="line"><span class="comment">//   valueOf: ƒ valueOf()</span></span><br><span class="line"><span class="comment">//   __defineGetter__: ƒ __defineGetter__()</span></span><br><span class="line"><span class="comment">//   __defineSetter__: ƒ __defineSetter__()</span></span><br><span class="line"><span class="comment">//   __lookupGetter__: ƒ __lookupGetter__()</span></span><br><span class="line"><span class="comment">//   __lookupSetter__: ƒ __lookupSetter__()</span></span><br><span class="line"><span class="comment">//   get __proto__: ƒ __proto__()</span></span><br><span class="line"><span class="comment">//   set __proto__: ƒ __proto__()</span></span><br></pre></td></tr></table></figure></p><p>我们可以看到所有的函数都被存在了一个名为<strong>proto</strong>的引用中，这就是JavaScript中提取共用属性的方法，我们将他称为原型（Prototype），既然对象的原型是一个对象他就必然要存在堆内存中，如果没有对象引用就必然会被GC回收，为了防止被GC回收，对象的原型在引擎进行初始化时默认被添加在了构造函数的prototype属性上。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(&#123;&#125;).__proto__ === <span class="built_in">Object</span>.prototype <span class="comment">// true</span></span><br></pre></td></tr></table></figure></p><p>构造函数作为一个函数对象，它的<strong>proto</strong>指向Function.prototype<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Obejct.__proto__ === <span class="built_in">Function</span>.prototype <span class="comment">// true</span></span><br><span class="line"><span class="built_in">Function</span>.__proto__ === <span class="built_in">Function</span>.prototype <span class="comment">// true</span></span><br></pre></td></tr></table></figure></p><p>Object作为根节点比较特殊，它的prototype.<strong>proto</strong>为空<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Object</span>.prototype.__proto__ === <span class="literal">null</span> <span class="comment">// true</span></span><br></pre></td></tr></table></figure></p><h1 id="原型链（Prototype-Chain）"><a href="#原型链（Prototype-Chain）" class="headerlink" title="原型链（Prototype Chain）"></a>原型链（Prototype Chain）</h1><p>原型解决了属性共用的问题，我们在每个对象中都可以使用Object的属性，如果我们需要对共用属性进行扩展但又不想影响Object的原型怎么办呢？当我们打印出一个Boolean对象时就一切真相大白了。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> <span class="built_in">Boolean</span></span><br><span class="line"><span class="comment">// Boolean &#123;false&#125;</span></span><br><span class="line"><span class="comment">//   __proto__: Boolean</span></span><br><span class="line"><span class="comment">//   constructor: ƒ Boolean()</span></span><br><span class="line"><span class="comment">//   toString: ƒ toString()</span></span><br><span class="line"><span class="comment">//   valueOf: ƒ valueOf()</span></span><br><span class="line"><span class="comment">//   __proto__: Object</span></span><br><span class="line"><span class="comment">//   [[PrimitiveValue]]: false</span></span><br><span class="line"><span class="comment">// [[PrimitiveValue]]: false</span></span><br></pre></td></tr></table></figure></p><p>可见一个Boolean对象的<strong>proto</strong>是Boolean原型，而Boolean原型的<strong>proto</strong>为Object原型，这就构成了一个链式结构，我们将其称为原型链。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="literal">false</span>.__proto__ === <span class="built_in">Boolean</span>.prototype</span><br><span class="line"><span class="literal">false</span>.__proto__.__proto__ === <span class="built_in">Object</span>.prototype</span><br></pre></td></tr></table></figure></p><p>::: tip 提示<br>上例中我们直接调用了基本类型的属性，基本类型在JavaScript中虽然不是对象，但是当进行对象操作时，会在堆中申请一个临时对象，此时就可以使用对应的属性了，但此临时对象在调用完后就会被清除，所以我们对其进行赋值操作是不生效的。<br>:::<br>当我们调用对象的一个属性或方法时，如果该对象没有就会像上查找其原型，如果直到Object原型都没有就会返回undefined。</p><h1 id="new操作发生了什么"><a href="#new操作发生了什么" class="headerlink" title="new操作发生了什么"></a>new操作发生了什么</h1><p>当我们进行new一个对象的时候，发生了以下事情：</p><ol><li>申请一个新的空对象</li><li>将新对象的<strong>proto</strong>指向构造函数的prototype</li><li>对新对象执行构造函数</li><li>return 新对象</li></ol><p>我们可以用一个函数来模拟这个过程，此方法可以构造对象，但是基础数据类型的实例使用此方法构造会出现数据类型不符的问题。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">_new</span> (<span class="params">constructor,...arg</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> res = &#123;&#125;</span><br><span class="line">  res.__proto__ = <span class="keyword">constructor</span>.prototype</span><br><span class="line">  <span class="keyword">constructor</span>.apply(res, arg)</span><br><span class="line">  return  res</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;JavaScript在某种程度上算是一门简单的语言，因为不包含复杂的继承机制，那么JavaScript是怎么实现共用属性的呢？答案就是原型链。&lt;br&gt;
    
    </summary>
    
      <category term="JavaScript" scheme="http://hoofoo-whu.github.io/categories/JavaScript/"/>
    
    
      <category term="前端" scheme="http://hoofoo-whu.github.io/tags/%E5%89%8D%E7%AB%AF/"/>
    
      <category term="JavaScript" scheme="http://hoofoo-whu.github.io/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>JavaScrit中的数据类型</title>
    <link href="http://hoofoo-whu.github.io/article/2018-12-29/javascript-datatypes.html"/>
    <id>http://hoofoo-whu.github.io/article/2018-12-29/javascript-datatypes.html</id>
    <published>2018-12-29T00:13:50.000Z</published>
    <updated>2020-11-29T10:16:15.242Z</updated>
    
    <content type="html"><![CDATA[<p>JavaScript中有七种数据类型，本文主要描述了我在阅读JavaScript教程时我不会的细节知识点。<br><a id="more"></a></p><h1 id="Number"><a href="#Number" class="headerlink" title="Number"></a>Number</h1><h2 id="存储方式"><a href="#存储方式" class="headerlink" title="存储方式"></a>存储方式</h2><p>所有的number都是以64位浮点数形式存储的，所以当计算的时候结果并不准确。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">0.1</span> + <span class="number">0.2</span> <span class="comment">// 0.30000000000000004</span></span><br><span class="line"><span class="number">0.3</span> / <span class="number">0.1</span> <span class="comment">// 2.9999999999999996</span></span><br></pre></td></tr></table></figure><p>当进行位运算时，会转换为32位的整型</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">~<span class="number">1.1</span> <span class="comment">// -2</span></span><br></pre></td></tr></table></figure><h2 id="精度"><a href="#精度" class="headerlink" title="精度"></a>精度</h2><p>根据国际标准 IEEE 754，JavaScript 浮点数的64个二进制位，从最左边开始，是这样组成的。</p><ul><li>第1位：符号位，<code>0</code>表示正数，<code>1</code>表示负数</li><li>第2位到第12位（共11位）：指数部分</li><li>第13位到第64位（共52位）：小数部分（即有效数字）</li></ul><p>计算公式：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(-1)^符号位 * 小数部分 * 2^指数部分</span><br></pre></td></tr></table></figure><p>其中小数部分表示1.xxxx…x，所以只需存储xxxx…x部分即可。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 当整数值大于2^53时计算会出现错误</span></span><br><span class="line"><span class="number">2</span> ** <span class="number">53</span> <span class="comment">// 9007199254740992</span></span><br><span class="line"><span class="number">2</span> ** <span class="number">53</span> + <span class="number">10</span> <span class="comment">//9007199254741002</span></span><br></pre></td></tr></table></figure><p>因为64位浮点数最多可以表示53个二进制位，所以在JavaScript中绝对值小于2^53^的<strong>整数</strong>（-9007199254740992~9007199254740992）可以被精确表示，也可以简记为15位的十进制<strong>整数</strong>可以精确表示。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 当浮点数大于可表示的最大值时，会上溢出，转换为Infinity</span></span><br><span class="line"><span class="number">2</span> ** <span class="number">1024</span> <span class="comment">// Infinity</span></span><br><span class="line"><span class="comment">// 当浮点数小于可表示的最小值时，会下溢出，转换为0</span></span><br><span class="line"><span class="number">2</span> ** <span class="number">-1024</span> <span class="comment">// 0</span></span><br></pre></td></tr></table></figure><p>因为指数部分的值为11位，可以表示的范围为<strong>[-1023, 1023]</strong>，所以JavaScript中浮点数可以表示的值范围为<strong>[2^-1023^, 2^1024^)</strong>。</p><p>JavaScript 提供<code>Number</code>对象的<code>MAX_VALUE</code>和<code>MIN_VALUE</code>属性，返回可以表示的具体的最大值和最小值。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Number</span>.MAX_VALUE <span class="comment">// 1.7976931348623157e+308</span></span><br><span class="line"><span class="built_in">Number</span>.MIN_VALUE <span class="comment">// 5e-324</span></span><br></pre></td></tr></table></figure><h2 id="数值表示方法"><a href="#数值表示方法" class="headerlink" title="数值表示方法"></a>数值表示方法</h2><p>科学计数法表示</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">123e3</span> <span class="comment">// =&gt; 123 * (10 ** 3) =&gt; 123000</span></span><br></pre></td></tr></table></figure><p>当整数部分多余21位时，会使用科学计数法表示</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1234567890123456789012</span> <span class="comment">// 1.2345678901234568e+21</span></span><br></pre></td></tr></table></figure><p>小数点后的零多于5个，同样会使用科学计数法表示</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">0.0000003</span> <span class="comment">// =&gt; 3 * (10 ** -7) =&gt; 3e-7</span></span><br></pre></td></tr></table></figure><p>不同进制表示</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">0xff</span> <span class="comment">// 16进制 =&gt; 255</span></span><br><span class="line"><span class="number">0o377</span> <span class="comment">// 8进制 =&gt; 255</span></span><br><span class="line"><span class="number">0b11</span> <span class="comment">// 2进制 =&gt; 3</span></span><br><span class="line"><span class="comment">// 如果第二位没有字母标识且没有大7的数字则当做8进制解释</span></span><br><span class="line"><span class="number">011</span> <span class="comment">// 8进制 =&gt; 9</span></span><br><span class="line"><span class="comment">// 如果有8、9则按十进制解释</span></span><br><span class="line"><span class="number">088</span> <span class="comment">// =&gt; 88</span></span><br><span class="line"><span class="comment">// 其余不符合格式的情况会报错</span></span><br><span class="line"><span class="number">0</span>f <span class="comment">// SyntaxError: Invalid or unexpected token</span></span><br><span class="line"><span class="number">0</span>b2 <span class="comment">// SyntaxError: Invalid or unexpected token</span></span><br></pre></td></tr></table></figure><p>其余问题详见<a href="https://wangdoc.com/javascript/types/number.html" rel="external nofollow noopener noreferrer" target="_blank">阮一峰JavaScript教程</a></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="literal">NaN</span> === <span class="literal">NaN</span> <span class="comment">// false</span></span><br><span class="line"><span class="number">0</span> / <span class="number">0</span> <span class="comment">// NaN</span></span><br><span class="line"><span class="number">1</span> / <span class="number">0</span> <span class="comment">// Infinity</span></span><br><span class="line"><span class="number">1</span> / <span class="number">-0</span> <span class="comment">// -Infinity</span></span><br><span class="line"><span class="literal">Infinity</span> &gt; <span class="literal">NaN</span> <span class="comment">// false</span></span><br><span class="line">-<span class="literal">Infinity</span> &gt; <span class="literal">NaN</span> <span class="comment">// false</span></span><br><span class="line"><span class="literal">Infinity</span> &lt; <span class="literal">NaN</span> <span class="comment">// false</span></span><br><span class="line">-<span class="literal">Infinity</span> &lt; <span class="literal">NaN</span> <span class="comment">// false</span></span><br></pre></td></tr></table></figure><h1 id="String"><a href="#String" class="headerlink" title="String"></a>String</h1><p>JavaScript 对 UTF-16 的支持是不完整的，由于历史原因，只支持两字节的字符，不支持四字节的字符。这是因为 JavaScript 第一版发布的时候，Unicode 的码点只编到<code>U+FFFF</code>，因此两字节足够表示了。后来，Unicode 纳入的字符越来越多，出现了四字节的编码。但是，JavaScript 的标准此时已经定型了，统一将字符长度限制在两字节，导致无法识别四字节的字符。上一节的那个四字节字符<code>𝌆</code>，浏览器会正确识别这是一个字符，但是 JavaScript 无法识别，会认为这是两个字符。</p><p>JavaScript 原生提供两个 Base64 相关的方法。</p><ul><li><code>btoa()</code>：任意值转为 Base64 编码</li><li><code>atob()</code>：Base64 编码转为原来的值</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> string = <span class="string">'Hello World!'</span>;</span><br><span class="line">btoa(string) <span class="comment">// "SGVsbG8gV29ybGQh"</span></span><br><span class="line">atob(<span class="string">'SGVsbG8gV29ybGQh'</span>) <span class="comment">// "Hello World!"</span></span><br></pre></td></tr></table></figure><p>注意，这两个方法不适合非 ASCII 码的字符，会报错。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">btoa(<span class="string">'你好'</span>) <span class="comment">// 报错</span></span><br></pre></td></tr></table></figure><h1 id="Boolean"><a href="#Boolean" class="headerlink" title="Boolean"></a>Boolean</h1><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 只有这7种情况为false，其余情况全都为true</span></span><br><span class="line"><span class="built_in">Boolean</span>(<span class="literal">undefined</span>) <span class="comment">// false</span></span><br><span class="line"><span class="built_in">Boolean</span>(<span class="literal">null</span>) <span class="comment">// false</span></span><br><span class="line"><span class="built_in">Boolean</span>(<span class="literal">false</span>) <span class="comment">// false</span></span><br><span class="line"><span class="built_in">Boolean</span>(<span class="number">0</span>) <span class="comment">// false</span></span><br><span class="line"><span class="built_in">Boolean</span>(<span class="literal">NaN</span>) <span class="comment">// false</span></span><br><span class="line"><span class="built_in">Boolean</span>(<span class="string">""</span>) <span class="comment">// false</span></span><br><span class="line"><span class="built_in">Boolean</span>(<span class="string">''</span>) <span class="comment">// false</span></span><br></pre></td></tr></table></figure><h1 id="null"><a href="#null" class="headerlink" title="null"></a>null</h1><p>表示无</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 遵循c语言的传统，null转换为number为0</span></span><br><span class="line"><span class="built_in">Number</span>(<span class="literal">null</span>) <span class="comment">// 0</span></span><br><span class="line"><span class="comment">// 由于历史原因，最开始参考Java将null当做对象，因为需要兼容早期版本，所以null为特殊的object</span></span><br><span class="line"><span class="keyword">typeof</span> <span class="literal">null</span> <span class="comment">// 'object'</span></span><br></pre></td></tr></table></figure><h1 id="undefined"><a href="#undefined" class="headerlink" title="undefined"></a>undefined</h1><p>表示未定义</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// undefined转换为number为NaN</span></span><br><span class="line"><span class="built_in">Number</span>(<span class="literal">undefined</span>) <span class="comment">// NaN</span></span><br></pre></td></tr></table></figure><h1 id="Object"><a href="#Object" class="headerlink" title="Object"></a>Object</h1><p><code>for...in</code>循环有两个使用注意点。</p><ul><li>它遍历的是对象所有可遍历（enumerable）的属性，会跳过不可遍历的属性。</li><li>它不仅遍历对象自身的属性，还遍历继承的属性。</li></ul><h2 id="Function"><a href="#Function" class="headerlink" title="Function"></a>Function</h2><p>函数的<code>name</code>属性返回函数的名字。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">f1</span>(<span class="params"></span>) </span>&#123;&#125;</span><br><span class="line">f1.name <span class="comment">// "f1"</span></span><br></pre></td></tr></table></figure><p>如果是通过变量赋值定义的函数，那么<code>name</code>属性返回变量名。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> f2 = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;&#125;;</span><br><span class="line">f2.name <span class="comment">// "f2"</span></span><br></pre></td></tr></table></figure><p>但是，上面这种情况，只有在变量的值是一个匿名函数时才是如此。如果变量的值是一个具名函数，那么<code>name</code>属性返回<code>function</code>关键字之后的那个函数名。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> f3 = <span class="function"><span class="keyword">function</span> <span class="title">myName</span>(<span class="params"></span>) </span>&#123;&#125;;</span><br><span class="line">f3.name <span class="comment">// 'myName'</span></span><br></pre></td></tr></table></figure><p>上面代码中，<code>f3.name</code>返回函数表达式的名字。注意，真正的函数名还是<code>f3</code>，而<code>myName</code>这个名字只在函数体内部可用。</p><p><code>name</code>属性的一个用处，就是获取参数函数的名字。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> myFunc = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params">f</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(f.name);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">test(myFunc) <span class="comment">// myFunc</span></span><br></pre></td></tr></table></figure><p>上面代码中，函数<code>test</code>内部通过<code>name</code>属性，就可以知道传入的参数是什么函数</p><h2 id="array"><a href="#array" class="headerlink" title="array"></a>array</h2><p>JavaScript 使用一个32位整数，保存数组的元素个数。这意味着，数组成员最多只有 4294967295 个（232 - 1）个，也就是说<code>length</code>属性的最大值就是 4294967295。</p><p>如果数组的键名是添加超出范围的数值，该键名会自动转为字符串。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [];</span><br><span class="line">arr[<span class="number">-1</span>] = <span class="string">'a'</span>;</span><br><span class="line">arr[<span class="number">2</span> ** <span class="number">32</span>)] = <span class="string">'b'</span>;</span><br><span class="line"></span><br><span class="line">arr.length <span class="comment">// 0</span></span><br><span class="line">arr[<span class="number">-1</span>] <span class="comment">// "a"</span></span><br><span class="line">arr[<span class="number">4294967296</span>] <span class="comment">// "b"</span></span><br></pre></td></tr></table></figure><h1 id="Symbol（es6）"><a href="#Symbol（es6）" class="headerlink" title="Symbol（es6）"></a>Symbol（es6）</h1><p>symbol是es6的新数据类型，简而言之就是一个独一无二的可以作为key的类型。暂时不做过多的了解，详细的教程看<a href="http://es6.ruanyifeng.com/#docs/symbol" rel="external nofollow noopener noreferrer" target="_blank">ECMAScript入门</a>或者<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Symbol" rel="external nofollow noopener noreferrer" target="_blank">MDN</a></p><p>ES5 的对象属性名都是字符串，这容易造成属性名的冲突。比如，你使用了一个他人提供的对象，但又想为这个对象添加新的方法（mixin 模式），新方法的名字就有可能与现有方法产生冲突。如果有一种机制，保证每个属性的名字都是独一无二的就好了，这样就从根本上防止属性名的冲突。这就是 ES6 引入Symbol的原因。</p><p>ES6 引入了一种新的原始数据类型Symbol，表示独一无二的值。它是 JavaScript 语言的第七种数据类型，前六种是：undefined、null、布尔值（Boolean）、字符串（String）、数值（Number）、对象（Object）。</p><p>Symbol 值通过Symbol函数生成。这就是说，对象的属性名现在可以有两种类型，一种是原来就有的字符串，另一种就是新增的 Symbol 类型。凡是属性名属于 Symbol 类型，就都是独一无二的，可以保证不会与其他属性名产生冲突。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;JavaScript中有七种数据类型，本文主要描述了我在阅读JavaScript教程时我不会的细节知识点。&lt;br&gt;
    
    </summary>
    
      <category term="JavaScript" scheme="http://hoofoo-whu.github.io/categories/JavaScript/"/>
    
    
      <category term="前端" scheme="http://hoofoo-whu.github.io/tags/%E5%89%8D%E7%AB%AF/"/>
    
      <category term="JavaScript" scheme="http://hoofoo-whu.github.io/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript中的类型转换</title>
    <link href="http://hoofoo-whu.github.io/article/2018-12-29/javascript-trans-type.html"/>
    <id>http://hoofoo-whu.github.io/article/2018-12-29/javascript-trans-type.html</id>
    <published>2018-12-29T00:13:50.000Z</published>
    <updated>2020-11-29T10:16:15.242Z</updated>
    
    <content type="html"><![CDATA[<p>JavaScript中的JavaScript中的七种数据类型，而JavaScript是一种动态类型语言，在调用一个变量前我们无法固定变量的数据类型，在条件判断、数值计算的时候必然会出现变量的隐式转换的问题，这将使我们的代码出现各种隐藏的bug，理解清楚各个类型间的转换方式，会使我们写出来的代码更加健壮。<br><a id="more"></a></p><h1 id="Numer"><a href="#Numer" class="headerlink" title="Numer"></a>Numer</h1><h2 id="显式转换"><a href="#显式转换" class="headerlink" title="显式转换"></a>显式转换</h2><p>JavaScript提供了以下两种方式将其他类型转化为Number</p><ol><li>Number工厂<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Number</span>(<span class="string">'0b10'</span>) <span class="comment">// 2</span></span><br><span class="line"><span class="built_in">Number</span>(<span class="string">'0o91'</span>) <span class="comment">// NaN</span></span><br><span class="line"><span class="built_in">Number</span>(<span class="literal">true</span>) <span class="comment">// 1</span></span><br><span class="line"><span class="built_in">Number</span>(<span class="literal">null</span>) <span class="comment">// 0</span></span><br><span class="line"><span class="built_in">Number</span>(&#123;&#125;) <span class="comment">// NaN</span></span><br><span class="line"><span class="built_in">Number</span>([<span class="string">'0b10'</span>]) <span class="comment">// 2</span></span><br><span class="line"><span class="built_in">Number</span>(<span class="built_in">Symbol</span>()) <span class="comment">// TypeError: Cannot convert a Symbol value to a number</span></span><br></pre></td></tr></table></figure></li></ol><p>Number工厂可以将除Symbol外的其他数据类型显式的转换为Number</p><ul><li>合法的字符串会转换为字面值、否则会转换为NaN</li><li><code>true=&gt;1</code> <code>false=&gt;0</code></li><li><code>undefined=&gt;0</code> <code>null=&gt;0</code></li><li>普通对象或函数转换为NaN</li><li>多元素数组转换为NaN，单元素数组则等同于将元素转换为Number</li></ul><ol start="2"><li>转换函数<br>JavaScript提供parseInt与parseFloat函数可以将字符串有效位之前的数字转换为数字，如果没有有效位或者不是字符串将返回NaN</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">parseInt</span>(<span class="string">"1234blue"</span>) <span class="comment">// 1234</span></span><br><span class="line"><span class="built_in">parseInt</span>(<span class="string">"0xA"</span>) <span class="comment">// 10</span></span><br><span class="line"><span class="built_in">parseInt</span>(<span class="string">"22.5"</span>) <span class="comment">// 22</span></span><br><span class="line"><span class="built_in">parseInt</span>(<span class="string">"blue123"</span>) <span class="comment">// NaN</span></span><br><span class="line"><span class="built_in">parseFloat</span>(<span class="string">"22.34.5"</span>) <span class="comment">// 22.34</span></span><br><span class="line"><span class="built_in">parseFloat</span>(<span class="string">"0908"</span>) <span class="comment">// 908</span></span><br><span class="line"><span class="built_in">parseFloat</span>(<span class="string">"blue"</span>) <span class="comment">// NaN</span></span><br></pre></td></tr></table></figure><p>其中parseInt还支持指定进制<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">parseInt</span>(<span class="string">"AF"</span>, <span class="number">16</span>) <span class="comment">// 175</span></span><br><span class="line"><span class="built_in">parseInt</span>(<span class="string">"10"</span>, <span class="number">2</span>) <span class="comment">// 2</span></span><br><span class="line"><span class="built_in">parseInt</span>(<span class="string">"10"</span>, <span class="number">8</span>) <span class="comment">// 8</span></span><br><span class="line"><span class="built_in">parseInt</span>(<span class="string">"10"</span>, <span class="number">10</span>) <span class="comment">// 10</span></span><br></pre></td></tr></table></figure></p><h2 id="隐式转换"><a href="#隐式转换" class="headerlink" title="隐式转换"></a>隐式转换</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">~<span class="string">'10'</span> <span class="comment">// -11</span></span><br><span class="line">~<span class="string">'0b10'</span> <span class="comment">// -3</span></span><br><span class="line">~<span class="string">'0x10'</span> <span class="comment">// -17</span></span><br><span class="line">~<span class="string">'010'</span> <span class="comment">// -11</span></span><br><span class="line">~<span class="string">'0o10'</span> <span class="comment">// -9</span></span><br><span class="line"><span class="literal">false</span> | <span class="literal">true</span> <span class="comment">// 1</span></span><br><span class="line"><span class="literal">undefined</span> ^ <span class="literal">null</span> <span class="comment">// 0</span></span><br><span class="line">&#123;&#125; &amp; &#123;&#125; <span class="comment">// 0</span></span><br><span class="line">~<span class="built_in">Symbol</span>() <span class="comment">// TypeError: Cannot convert a Symbol value to a number</span></span><br></pre></td></tr></table></figure><p>在进行位运算时，除了Symbol以外所有的数据类型都会转换为整数类型</p><ul><li>布尔值<code>true =&gt; 1</code> <code>false =&gt; 0</code></li><li>字符串遵循数字表示法转换，当为浮点数时会转换为整数，当字符串不符合数字规范时则会转换为0</li><li>undefined和null会转换为0</li><li>对象比较特殊，普通对象和函数对象都会转换为0，数组对象当在只有一个元素时会转换这个元素，而有多个元素时也会转换为0</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">'10'</span> - <span class="number">0</span> <span class="comment">// 10</span></span><br><span class="line"><span class="string">'0b10'</span> - <span class="number">0</span> <span class="comment">// 2</span></span><br><span class="line">+<span class="string">'0x10'</span> <span class="comment">// 16</span></span><br><span class="line">+<span class="string">'010'</span> <span class="comment">// 10</span></span><br><span class="line"><span class="literal">false</span> - <span class="number">0</span> <span class="comment">// 0</span></span><br><span class="line"><span class="literal">undefined</span> - <span class="number">0</span> <span class="comment">// NaN</span></span><br><span class="line">(&#123;&#125;) - <span class="number">0</span> <span class="comment">// NaN</span></span><br><span class="line">+&#123;&#125; <span class="comment">// NaN</span></span><br><span class="line">+<span class="built_in">Symbol</span>() <span class="comment">// TypeError: Cannot convert a Symbol value to a number</span></span><br></pre></td></tr></table></figure><p>JavaScript中还存在着减0和取正转换为Number的奇技淫巧，不过结果可能和我们想的不太一样。</p><p>在以隐式转换的情况下，很容易出现意想不到的情况发生，这将会带来极大的隐患，如果没有十足的把握不建议大家使用这种方法做类型转换。</p><h1 id="Boolean"><a href="#Boolean" class="headerlink" title="Boolean"></a>Boolean</h1><h2 id="显式转换-1"><a href="#显式转换-1" class="headerlink" title="显式转换"></a>显式转换</h2><p>我们可以通过Boolean工厂将其他数据类型显式的转换为Boolean值<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 只有这7种情况为false，其余情况全都为true</span></span><br><span class="line"><span class="built_in">Boolean</span>(<span class="literal">undefined</span>) <span class="comment">// false</span></span><br><span class="line"><span class="built_in">Boolean</span>(<span class="literal">null</span>) <span class="comment">// false</span></span><br><span class="line"><span class="built_in">Boolean</span>(<span class="literal">false</span>) <span class="comment">// false</span></span><br><span class="line"><span class="built_in">Boolean</span>(<span class="number">0</span>) <span class="comment">// false</span></span><br><span class="line"><span class="built_in">Boolean</span>(<span class="literal">NaN</span>) <span class="comment">// false</span></span><br><span class="line"><span class="built_in">Boolean</span>(<span class="string">""</span>) <span class="comment">// false</span></span><br><span class="line"><span class="built_in">Boolean</span>(<span class="string">''</span>) <span class="comment">// false</span></span><br></pre></td></tr></table></figure></p><h2 id="隐式转换-1"><a href="#隐式转换-1" class="headerlink" title="隐式转换"></a>隐式转换</h2><p>Boolean隐式转换与显示转换的结果是相同的，当我们清晰的知道转换结果时，可以直接使用隐式转换。</p><ol><li><p>当在JavaScript需要一个布尔值时，就会将其他值隐式的转换为布尔值</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (<span class="number">1</span>) &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="number">1</span>) <span class="comment">// 1</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">while</span> (<span class="number">1</span>) &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="number">1</span>) <span class="comment">// 1 死循环</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>当进行取反运算时，会触发隐式转换</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">!<span class="number">0</span> <span class="comment">// true</span></span><br></pre></td></tr></table></figure></li></ol><p>我们可以通过使用两个取反符号来简洁的转换为布尔值<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">!!<span class="number">0</span> <span class="comment">// false</span></span><br></pre></td></tr></table></figure></p><h1 id="String"><a href="#String" class="headerlink" title="String"></a>String</h1><h2 id="String工厂"><a href="#String工厂" class="headerlink" title="String工厂"></a>String工厂</h2><p>我们可以使用String工厂将其他数据类型转换为字符串<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">String</span>(<span class="number">123</span>) <span class="comment">// '123'</span></span><br><span class="line"><span class="built_in">String</span>(&#123;&#125;) <span class="comment">// '[object Object]'</span></span><br><span class="line"><span class="built_in">String</span>([]) <span class="comment">// ''</span></span><br><span class="line"><span class="built_in">String</span>([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]) <span class="comment">// '1,2,3'</span></span><br><span class="line"><span class="built_in">String</span>(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;<span class="keyword">return</span>&#125;) <span class="comment">// 'function ()&#123;return&#125;'</span></span><br><span class="line"><span class="built_in">String</span>(<span class="literal">undefined</span>) <span class="comment">// 'undefined'</span></span><br><span class="line"><span class="built_in">String</span>(<span class="literal">null</span>) <span class="comment">// 'undefined'</span></span><br><span class="line"><span class="built_in">String</span>(<span class="built_in">Symbol</span>(<span class="number">1</span>)) <span class="comment">// 'Symbol(1)'</span></span><br></pre></td></tr></table></figure></p><p>除了对象以外都可以使用此方式转换为我们期待的形式，如果需要将对象转换为字符串的形式，我们可以使用JSON.stringify转换为一个Json字符串<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">JSON</span>.stringify(&#123;<span class="attr">a</span>:<span class="number">1</span>,<span class="attr">b</span>:<span class="number">2</span>&#125;) <span class="comment">// '&#123;"a":1,"b":2&#125;'</span></span><br></pre></td></tr></table></figure></p><h2 id="toString方法"><a href="#toString方法" class="headerlink" title="toString方法"></a>toString方法</h2><p>除null和undefined以外我们可以调用对象的toString方法来转换为字符串<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">(<span class="number">1</span>).toString() <span class="comment">// 1</span></span><br><span class="line">(&#123;&#125;).toString() <span class="comment">// '[object Object]'</span></span><br><span class="line"><span class="built_in">Symbol</span>().toString() <span class="comment">// 'Symbol()'</span></span><br><span class="line">(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;<span class="keyword">return</span>&#125;).toString() <span class="comment">// 'function ()&#123;return&#125;'</span></span><br></pre></td></tr></table></figure></p><h2 id="运算符"><a href="#运算符" class="headerlink" title="+运算符"></a>+运算符</h2><p>简单的使用+运算符可以使我们方便的转换为字符串<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span> + <span class="string">''</span> <span class="comment">// '1'</span></span><br><span class="line">(&#123;&#125;) + <span class="string">''</span> <span class="comment">// [object Object]'</span></span><br><span class="line"><span class="built_in">Symbol</span>() + <span class="string">''</span> <span class="comment">// 'Symbol()'</span></span><br></pre></td></tr></table></figure></p><h2 id="模板字符串"><a href="#模板字符串" class="headerlink" title="模板字符串"></a>模板字符串</h2><p>模板字符串中可以添加变量的特性，使我们也可以通过其转换字符串<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">`<span class="subst">$&#123;<span class="number">123</span>&#125;</span>`</span> <span class="comment">// 123</span></span><br></pre></td></tr></table></figure></p><h2 id="Object"><a href="#Object" class="headerlink" title="Object"></a>Object</h2><p>我们只有一种需求需要转换为Object，那就是将Json字符串转换为Object，只需要使用JSON.parse函数即可<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">JSON</span>.parse(<span class="string">'&#123;"a":1&#125;'</span>) <span class="comment">// &#123; a: 1 &#125;</span></span><br></pre></td></tr></table></figure></p><h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><p>我们并不会有其他类型转换为null、undefined、Symbol的需求，所以也没有相关的转换方法。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;JavaScript中的JavaScript中的七种数据类型，而JavaScript是一种动态类型语言，在调用一个变量前我们无法固定变量的数据类型，在条件判断、数值计算的时候必然会出现变量的隐式转换的问题，这将使我们的代码出现各种隐藏的bug，理解清楚各个类型间的转换方式，会使我们写出来的代码更加健壮。&lt;br&gt;
    
    </summary>
    
      <category term="JavaScript" scheme="http://hoofoo-whu.github.io/categories/JavaScript/"/>
    
    
      <category term="前端" scheme="http://hoofoo-whu.github.io/tags/%E5%89%8D%E7%AB%AF/"/>
    
      <category term="JavaScript" scheme="http://hoofoo-whu.github.io/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>CSS常用布局</title>
    <link href="http://hoofoo-whu.github.io/article/2018-12-25/css-common-layout.html"/>
    <id>http://hoofoo-whu.github.io/article/2018-12-25/css-common-layout.html</id>
    <published>2018-12-25T00:13:50.000Z</published>
    <updated>2020-11-29T10:16:15.238Z</updated>
    
    <content type="html"><![CDATA[<p>本文探讨常用的css布局各种实现方式，其中<code>float</code>、<code>position</code>的实现方式兼容性较好，<code>flex</code>、<code>grid</code>兼容性较差甚至各种浏览器有不同的语法，可以通过<a href="https://caniuse.com/" rel="external nofollow noopener noreferrer" target="_blank">caniuse</a>搜索查看。<br><a id="more"></a></p><h1 id="左右布局"><a href="#左右布局" class="headerlink" title="左右布局"></a>左右布局</h1><h2 id="按比例自适应布局"><a href="#按比例自适应布局" class="headerlink" title="按比例自适应布局"></a>按比例自适应布局</h2><p>按比例自适应布局很少用得到，下面给出的代码都是等比例分两列的，多列不同比例的布局也是使用同样的方法。</p><ol><li>使用float实现<blockquote><p>使用float配合百分比宽度</p></blockquote></li></ol><iframe height="265" scrolling="no" title="vvxvmR" src="//codepen.io/hoofoo-whu/embed/vvxvmR/?height=265&theme-id=dark&default-tab=css,result" frameborder="no" allowtransparency="true" allowfullscreen="true" style="width: 100%;">See the Pen <a href="https://codepen.io/hoofoo-whu/pen/vvxvmR/" rel="external nofollow noopener noreferrer" target="_blank">vvxvmR</a> by Hoofoo (<a href="https://codepen.io/hoofoo-whu" rel="external nofollow noopener noreferrer" target="_blank">@hoofoo-whu</a>) on <a href="https://codepen.io" rel="external nofollow noopener noreferrer" target="_blank">CodePen</a>.<br></iframe><ol start="2"><li>使用绝对定位实现<blockquote><p>使用绝对定位<code>left</code>、<code>bottom</code>、<code>top</code>、<code>right</code>定位</p></blockquote></li></ol><iframe height="265" scrolling="no" title="左右按比例布局-绝对定位" src="//codepen.io/hoofoo-whu/embed/pqwRYO/?height=265&theme-id=dark&default-tab=css,result" frameborder="no" allowtransparency="true" allowfullscreen="true" style="width: 100%;">See the Pen <a href="https://codepen.io/hoofoo-whu/pen/pqwRYO/" rel="external nofollow noopener noreferrer" target="_blank">左右按比例布局-绝对定位</a> by Hoofoo (<a href="https://codepen.io/hoofoo-whu" rel="external nofollow noopener noreferrer" target="_blank">@hoofoo-whu</a>) on <a href="https://codepen.io" rel="external nofollow noopener noreferrer" target="_blank">CodePen</a>.<br></iframe><ol start="3"><li>使用flex实现</li></ol><blockquote><p>flex项目设置<code>flex-grow</code>在flex容器中自适应宽度</p></blockquote><iframe height="265" scrolling="no" title="左右按比例布局-flex" src="//codepen.io/hoofoo-whu/embed/PXjpOe/?height=265&theme-id=dark&default-tab=css,result" frameborder="no" allowtransparency="true" allowfullscreen="true" style="width: 100%;">See the Pen <a href="https://codepen.io/hoofoo-whu/pen/PXjpOe/" rel="external nofollow noopener noreferrer" target="_blank">左右按比例布局-flex</a> by Hoofoo (<a href="https://codepen.io/hoofoo-whu" rel="external nofollow noopener noreferrer" target="_blank">@hoofoo-whu</a>) on <a href="https://codepen.io" rel="external nofollow noopener noreferrer" target="_blank">CodePen</a>.<br></iframe><ol start="4"><li>使用grid实现</li></ol><blockquote><p>定义grid为一行两列<code>1fr</code>即可</p></blockquote><iframe height="265" scrolling="no" title="左右按比例布局-grid" src="//codepen.io/hoofoo-whu/embed/PXjpRa/?height=265&theme-id=dark&default-tab=css,result" frameborder="no" allowtransparency="true" allowfullscreen="true" style="width: 100%;">See the Pen <a href="https://codepen.io/hoofoo-whu/pen/PXjpRa/" rel="external nofollow noopener noreferrer" target="_blank">左右按比例布局-grid</a> by Hoofoo (<a href="https://codepen.io/hoofoo-whu" rel="external nofollow noopener noreferrer" target="_blank">@hoofoo-whu</a>) on <a href="https://codepen.io" rel="external nofollow noopener noreferrer" target="_blank">CodePen</a>.<br></iframe><h2 id="左固定宽度右自适应布局"><a href="#左固定宽度右自适应布局" class="headerlink" title="左固定宽度右自适应布局"></a>左固定宽度右自适应布局</h2><p>左侧固定宽度是经常使用的布局方式，下面给出的代码都是左侧固定，右侧同理。</p><ol><li>使用float实现<blockquote><p>左侧浮动使用<code>width</code>设置固定宽度，右侧不设置浮动且不清除浮动便会与左侧同行，此时使用<code>margin-left</code>空开左侧的距离即可。</p></blockquote></li></ol><iframe height="265" scrolling="no" title="左固定宽度右自适应布局-float" src="//codepen.io/hoofoo-whu/embed/vvZmZQ/?height=265&theme-id=dark&default-tab=css,result" frameborder="no" allowtransparency="true" allowfullscreen="true" style="width: 100%;">See the Pen <a href="https://codepen.io/hoofoo-whu/pen/vvZmZQ/" rel="external nofollow noopener noreferrer" target="_blank">左固定宽度右自适应布局-float</a> by Hoofoo (<a href="https://codepen.io/hoofoo-whu" rel="external nofollow noopener noreferrer" target="_blank">@hoofoo-whu</a>) on <a href="https://codepen.io" rel="external nofollow noopener noreferrer" target="_blank">CodePen</a>.<br></iframe><ol start="2"><li>使用绝对定位实现<blockquote><p>使用绝对定位<code>left</code>、<code>bottom</code>、<code>top</code>、<code>right</code>定位，左侧不设置<code>right</code>使用<code>width</code>固定宽度</p></blockquote></li></ol><iframe height="265" scrolling="no" title="左固定宽度右自适应布局-绝对定位" src="//codepen.io/hoofoo-whu/embed/xmrddp/?height=265&theme-id=dark&default-tab=css,result" frameborder="no" allowtransparency="true" allowfullscreen="true" style="width: 100%;">See the Pen <a href="https://codepen.io/hoofoo-whu/pen/xmrddp/" rel="external nofollow noopener noreferrer" target="_blank">左固定宽度右自适应布局-绝对定位</a> by Hoofoo (<a href="https://codepen.io/hoofoo-whu" rel="external nofollow noopener noreferrer" target="_blank">@hoofoo-whu</a>) on <a href="https://codepen.io" rel="external nofollow noopener noreferrer" target="_blank">CodePen</a>.<br></iframe><ol start="3"><li>使用flex实现</li></ol><blockquote><p>flex项目设置<code>flex-grow</code>在flex容器中自适应宽度，如果设置宽度，则不设宽度的均分剩余宽度</p></blockquote><iframe height="265" scrolling="no" title="左固定宽度右自适应布局-flex" src="//codepen.io/hoofoo-whu/embed/EGXmWv/?height=265&theme-id=dark&default-tab=css,result" frameborder="no" allowtransparency="true" allowfullscreen="true" style="width: 100%;">See the Pen <a href="https://codepen.io/hoofoo-whu/pen/EGXmWv/" rel="external nofollow noopener noreferrer" target="_blank">左固定宽度右自适应布局-flex</a> by Hoofoo (<a href="https://codepen.io/hoofoo-whu" rel="external nofollow noopener noreferrer" target="_blank">@hoofoo-whu</a>) on <a href="https://codepen.io" rel="external nofollow noopener noreferrer" target="_blank">CodePen</a>.<br></iframe><ol start="4"><li>使用grid实现</li></ol><blockquote><p>定义grid为一行两列分别为<code>50px`</code>1fr`即可</p></blockquote><iframe height="265" scrolling="no" title="左固定宽度右自适应布局-grid" src="//codepen.io/hoofoo-whu/embed/vvZmKz/?height=265&theme-id=dark&default-tab=css,result" frameborder="no" allowtransparency="true" allowfullscreen="true" style="width: 100%;">See the Pen <a href="https://codepen.io/hoofoo-whu/pen/vvZmKz/" rel="external nofollow noopener noreferrer" target="_blank">左固定宽度右自适应布局-grid</a> by Hoofoo (<a href="https://codepen.io/hoofoo-whu" rel="external nofollow noopener noreferrer" target="_blank">@hoofoo-whu</a>) on <a href="https://codepen.io" rel="external nofollow noopener noreferrer" target="_blank">CodePen</a>.<br></iframe><h1 id="左中右布局"><a href="#左中右布局" class="headerlink" title="左中右布局"></a>左中右布局</h1><h2 id="按比例自适应布局-1"><a href="#按比例自适应布局-1" class="headerlink" title="按比例自适应布局"></a>按比例自适应布局</h2><p>左中右按比例自适应布局很少用得到，其原理与左右布局相同，就不给出代码演示了。</p><h2 id="左右固定中自适应布局"><a href="#左右固定中自适应布局" class="headerlink" title="左右固定中自适应布局"></a>左右固定中自适应布局</h2><p>左右固定经常使用，下面是代码实现方式。</p><ol><li>使用float实现<blockquote><p>左侧左浮动，右侧右浮动，中间不设置浮动且不清除浮动即可，然后设置左右<code>margin</code>避开左右侧内容。一定要注意在HTML中middle要在left和right的后面，否则将挤掉right的空间。</p></blockquote></li></ol><iframe height="265" scrolling="no" title="左右固定中自适应布局-float" src="//codepen.io/hoofoo-whu/embed/XogREe/?height=265&theme-id=dark&default-tab=css,result" frameborder="no" allowtransparency="true" allowfullscreen="true" style="width: 100%;">See the Pen <a href="https://codepen.io/hoofoo-whu/pen/XogREe/" rel="external nofollow noopener noreferrer" target="_blank">左右固定中自适应布局-float</a> by Hoofoo (<a href="https://codepen.io/hoofoo-whu" rel="external nofollow noopener noreferrer" target="_blank">@hoofoo-whu</a>) on <a href="https://codepen.io" rel="external nofollow noopener noreferrer" target="_blank">CodePen</a>.<br></iframe><ol start="2"><li>使用绝对定位实现<blockquote><p>使用绝对定位<code>left</code>、<code>bottom</code>、<code>top</code>、<code>right</code>定位，左右使用<code>width</code>设置宽度</p></blockquote></li></ol><iframe height="265" scrolling="no" title="左右固定中自适应布局-绝对定位" src="//codepen.io/hoofoo-whu/embed/dwRWgw/?height=265&theme-id=dark&default-tab=css,result" frameborder="no" allowtransparency="true" allowfullscreen="true" style="width: 100%;">See the Pen <a href="https://codepen.io/hoofoo-whu/pen/dwRWgw/" rel="external nofollow noopener noreferrer" target="_blank">左右固定中自适应布局-绝对定位</a> by Hoofoo (<a href="https://codepen.io/hoofoo-whu" rel="external nofollow noopener noreferrer" target="_blank">@hoofoo-whu</a>) on <a href="https://codepen.io" rel="external nofollow noopener noreferrer" target="_blank">CodePen</a>.<br></iframe><ol start="3"><li>使用flex实现</li></ol><blockquote><p>flex项目设置<code>flex-grow</code>在flex容器中自适应宽度，左右侧设置<code>width</code>中间设置<code>flex-grow</code>即可</p></blockquote><iframe height="265" scrolling="no" title="左右固定中自适应布局-flex" src="//codepen.io/hoofoo-whu/embed/GPEmPV/?height=265&theme-id=dark&default-tab=css,result" frameborder="no" allowtransparency="true" allowfullscreen="true" style="width: 100%;">See the Pen <a href="https://codepen.io/hoofoo-whu/pen/GPEmPV/" rel="external nofollow noopener noreferrer" target="_blank">左右固定中自适应布局-flex</a> by Hoofoo (<a href="https://codepen.io/hoofoo-whu" rel="external nofollow noopener noreferrer" target="_blank">@hoofoo-whu</a>) on <a href="https://codepen.io" rel="external nofollow noopener noreferrer" target="_blank">CodePen</a>.<br></iframe><ol start="4"><li>使用grid实现</li></ol><blockquote><p>定义grid为一行三列<code>50px 1fr 50px</code>即可，HTML中必须按顺序写，否则需要在css中设置占用的格子</p></blockquote><iframe height="265" scrolling="no" title="左右固定中自适应布局-grid" src="//codepen.io/hoofoo-whu/embed/xmrdBJ/?height=265&theme-id=dark&default-tab=css,result" frameborder="no" allowtransparency="true" allowfullscreen="true" style="width: 100%;">See the Pen <a href="https://codepen.io/hoofoo-whu/pen/xmrdBJ/" rel="external nofollow noopener noreferrer" target="_blank">左右固定中自适应布局-grid</a> by Hoofoo (<a href="https://codepen.io/hoofoo-whu" rel="external nofollow noopener noreferrer" target="_blank">@hoofoo-whu</a>) on <a href="https://codepen.io" rel="external nofollow noopener noreferrer" target="_blank">CodePen</a>.<br></iframe><h1 id="居中"><a href="#居中" class="headerlink" title="居中"></a>居中</h1><p>居中非常非常非常常用，也是面试中的必问题，一定要掌握好。</p><h2 id="水平居中"><a href="#水平居中" class="headerlink" title="水平居中"></a>水平居中</h2><ol><li>通过text-align实现</li></ol><blockquote><p>行内元素只需要设置text-algin即可，非行内元素可以通过display转换为行内元素，此方法可以多个元素居中</p></blockquote><iframe height="265" scrolling="no" title="行内元素居中" src="//codepen.io/hoofoo-whu/embed/REggNb/?height=265&theme-id=dark&default-tab=css,result" frameborder="no" allowtransparency="true" allowfullscreen="true" style="width: 100%;">See the Pen <a href="https://codepen.io/hoofoo-whu/pen/REggNb/" rel="external nofollow noopener noreferrer" target="_blank">行内元素居中</a> by Hoofoo (<a href="https://codepen.io/hoofoo-whu" rel="external nofollow noopener noreferrer" target="_blank">@hoofoo-whu</a>) on <a href="https://codepen.io" rel="external nofollow noopener noreferrer" target="_blank">CodePen</a>.<br></iframe><ol start="2"><li>通过margin实现</li></ol><blockquote><p>块级元素只需要设置<code>margin: 0 auto</code>， 此方法很常用但只可以居中一个元素</p></blockquote><iframe height="265" scrolling="no" title="块级元素居中" src="//codepen.io/hoofoo-whu/embed/MZoowr/?height=265&theme-id=dark&default-tab=css,result" frameborder="no" allowtransparency="true" allowfullscreen="true" style="width: 100%;">See the Pen <a href="https://codepen.io/hoofoo-whu/pen/MZoowr/" rel="external nofollow noopener noreferrer" target="_blank">块级元素居中</a> by Hoofoo (<a href="https://codepen.io/hoofoo-whu" rel="external nofollow noopener noreferrer" target="_blank">@hoofoo-whu</a>) on <a href="https://codepen.io" rel="external nofollow noopener noreferrer" target="_blank">CodePen</a>.<br></iframe><ol start="3"><li>通过绝对定位实现</li></ol><blockquote><p>任何种类的元素都可以，通过绝对定位与<code>left:50%</code>，如果是固定宽度的话使用margin负值，如果不固定宽度使用transform:translateX(-50%)即可</p></blockquote><iframe height="265" scrolling="no" title="水平居中-绝对定位" src="//codepen.io/hoofoo-whu/embed/QzggdM/?height=265&theme-id=dark&default-tab=css,result" frameborder="no" allowtransparency="true" allowfullscreen="true" style="width: 100%;">See the Pen <a href="https://codepen.io/hoofoo-whu/pen/QzggdM/" rel="external nofollow noopener noreferrer" target="_blank">水平居中-绝对定位</a> by Hoofoo (<a href="https://codepen.io/hoofoo-whu" rel="external nofollow noopener noreferrer" target="_blank">@hoofoo-whu</a>) on <a href="https://codepen.io" rel="external nofollow noopener noreferrer" target="_blank">CodePen</a>.<br></iframe><ol start="4"><li>通过flex实现</li></ol><blockquote><p>可以但没有必要，多个块级元素可以使用，不过一般都通过嵌套实现</p></blockquote><iframe height="265" scrolling="no" title="水平居中-flex" src="//codepen.io/hoofoo-whu/embed/oJwwwK/?height=265&theme-id=dark&default-tab=css,result" frameborder="no" allowtransparency="true" allowfullscreen="true" style="width: 100%;">See the Pen <a href="https://codepen.io/hoofoo-whu/pen/oJwwwK/" rel="external nofollow noopener noreferrer" target="_blank">水平居中-flex</a> by Hoofoo (<a href="https://codepen.io/hoofoo-whu" rel="external nofollow noopener noreferrer" target="_blank">@hoofoo-whu</a>) on <a href="https://codepen.io" rel="external nofollow noopener noreferrer" target="_blank">CodePen</a>.<br></iframe><ol start="5"><li>通过grid实现</li></ol><blockquote><p>同上，可以但没必要，而且只可以居中一个元素，多个还需要嵌套</p></blockquote><iframe height="265" scrolling="no" title="水平居中-grid" src="//codepen.io/hoofoo-whu/embed/aPwwLM/?height=265&theme-id=dark&default-tab=css,result" frameborder="no" allowtransparency="true" allowfullscreen="true" style="width: 100%;">See the Pen <a href="https://codepen.io/hoofoo-whu/pen/aPwwLM/" rel="external nofollow noopener noreferrer" target="_blank">水平居中-grid</a> by Hoofoo (<a href="https://codepen.io/hoofoo-whu" rel="external nofollow noopener noreferrer" target="_blank">@hoofoo-whu</a>) on <a href="https://codepen.io" rel="external nofollow noopener noreferrer" target="_blank">CodePen</a>.<br></iframe><h2 id="垂直居中"><a href="#垂直居中" class="headerlink" title="垂直居中"></a>垂直居中</h2><ol><li>通过line-height实现</li></ol><blockquote><p>行内元素只需要设置line-height即可，非行内元素可以通过display转换为行内元素，一定要将父元素的font-size设为0，否则因为不同字体baseline不同的原因可能会跑偏，可以居中多个元素</p></blockquote><iframe height="265" scrolling="no" title="行内元素垂直居中" src="//codepen.io/hoofoo-whu/embed/yGXXKE/?height=265&theme-id=dark&default-tab=css,result" frameborder="no" allowtransparency="true" allowfullscreen="true" style="width: 100%;">See the Pen <a href="https://codepen.io/hoofoo-whu/pen/yGXXKE/" rel="external nofollow noopener noreferrer" target="_blank">行内元素垂直居中</a> by Hoofoo (<a href="https://codepen.io/hoofoo-whu" rel="external nofollow noopener noreferrer" target="_blank">@hoofoo-whu</a>) on <a href="https://codepen.io" rel="external nofollow noopener noreferrer" target="_blank">CodePen</a>.<br></iframe><ol start="2"><li>通过绝对定位实现</li></ol><blockquote><p>任何种类的元素都可以，通过绝对定位与<code>top:50%</code>，如果是固定高度的话使用margin负值，如果不固定高度使用transform:translateY(-50%)即可，只可以居中一个元素</p></blockquote><iframe height="265" scrolling="no" title="垂直居中-绝对定位" src="//codepen.io/hoofoo-whu/embed/dwRRgo/?height=265&theme-id=dark&default-tab=css,result" frameborder="no" allowtransparency="true" allowfullscreen="true" style="width: 100%;">See the Pen <a href="https://codepen.io/hoofoo-whu/pen/dwRRgo/" rel="external nofollow noopener noreferrer" target="_blank">垂直居中-绝对定位</a> by Hoofoo (<a href="https://codepen.io/hoofoo-whu" rel="external nofollow noopener noreferrer" target="_blank">@hoofoo-whu</a>) on <a href="https://codepen.io" rel="external nofollow noopener noreferrer" target="_blank">CodePen</a>.<br></iframe><ol start="3"><li>通过table实现</li></ol><blockquote><p>table中的行内元素很容易设置居中，多行也可以，不过需要多嵌套一层table-cell</p></blockquote><iframe height="265" scrolling="no" title="垂直居中-table" src="//codepen.io/hoofoo-whu/embed/aPwydz/?height=265&theme-id=dark&default-tab=css,result" frameborder="no" allowtransparency="true" allowfullscreen="true" style="width: 100%;">See the Pen <a href="https://codepen.io/hoofoo-whu/pen/aPwydz/" rel="external nofollow noopener noreferrer" target="_blank">垂直居中-table</a> by Hoofoo (<a href="https://codepen.io/hoofoo-whu" rel="external nofollow noopener noreferrer" target="_blank">@hoofoo-whu</a>) on <a href="https://codepen.io" rel="external nofollow noopener noreferrer" target="_blank">CodePen</a>.<br></iframe><ol start="4"><li>通过flex实现</li></ol><blockquote><p>非常好用，只需要设置父元素<code>align-items: center</code>即可，如果多行还可以通过<code>aligin-content: center</code>居中</p></blockquote><iframe height="265" scrolling="no" title="垂直居中-flex" src="//codepen.io/hoofoo-whu/embed/YdQQBq/?height=265&theme-id=dark&default-tab=css,result" frameborder="no" allowtransparency="true" allowfullscreen="true" style="width: 100%;">See the Pen <a href="https://codepen.io/hoofoo-whu/pen/YdQQBq/" rel="external nofollow noopener noreferrer" target="_blank">垂直居中-flex</a> by Hoofoo (<a href="https://codepen.io/hoofoo-whu" rel="external nofollow noopener noreferrer" target="_blank">@hoofoo-whu</a>) on <a href="https://codepen.io" rel="external nofollow noopener noreferrer" target="_blank">CodePen</a>.<br></iframe><ol start="5"><li>通过grid实现</li></ol><blockquote><p>不太推荐，适用于单列或多列元素的居中，没有flex灵活</p></blockquote><iframe height="265" scrolling="no" title="垂直居中-grid" src="//codepen.io/hoofoo-whu/embed/ZVyyNw/?height=265&theme-id=dark&default-tab=css,result" frameborder="no" allowtransparency="true" allowfullscreen="true" style="width: 100%;">See the Pen <a href="https://codepen.io/hoofoo-whu/pen/ZVyyNw/" rel="external nofollow noopener noreferrer" target="_blank">垂直居中-grid</a> by Hoofoo (<a href="https://codepen.io/hoofoo-whu" rel="external nofollow noopener noreferrer" target="_blank">@hoofoo-whu</a>) on <a href="https://codepen.io" rel="external nofollow noopener noreferrer" target="_blank">CodePen</a>.<br></iframe><h2 id="水平垂直都居中"><a href="#水平垂直都居中" class="headerlink" title="水平垂直都居中"></a>水平垂直都居中</h2><p>通过水平居中和垂直居中的组合可以实现完全居中，以下各情况都是通过前面提到的方法组合而成，就不给代码演示了。</p><ol><li>line-height与text-align实现</li></ol><blockquote><p>内联元素只需要同时使用line-height垂直居中和text-align水平居中即可，适用于单行多个元素</p></blockquote><ol start="2"><li>text-align与table实现</li></ol><blockquote><p>不同于上面的第一种，此种方法可以行内元素多行也保持居中</p></blockquote><ol start="3"><li>margin与line-height实现</li></ol><blockquote><p>inline-block可以通过margin水平居中和line-height垂直居中组合，只适用于一个元素的情况，不推荐使用</p></blockquote><ol start="4"><li>绝对定位实现</li></ol><blockquote><p>没什么好说的，垂直水平都用绝对定位居中就好了，只适用于一个任何种类元素</p></blockquote><ol start="5"><li>flex实现</li></ol><blockquote><p>同上，最灵活的方式居中，可以多个元素甚至可以多行</p></blockquote><ol start="6"><li>grid实现</li></ol><blockquote><p>不推荐使用，垂直水平都用grid居中就好了，但只能一个元素居中，兼容性又差</p></blockquote><h1 id="CSS小技巧"><a href="#CSS小技巧" class="headerlink" title="CSS小技巧"></a>CSS小技巧</h1><p>其他的多种小技巧可以通过<a href="https://css-tricks.com" rel="external nofollow noopener noreferrer" target="_blank">css-tricks</a>搜索</p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>一种布局是可以通过多种方式实现的，每种布局方式都有各自的优点与缺点，flex、grid虽然简洁好用但兼容性较差适合较晚起步的移动端使用，行内块和绝对定位兼容性好但相对麻烦，居中时有单个元素、多个元素甚至多行的需求可以使用相对简单的方式来解决，较老的平台为了兼容性问题则可以使用嵌套的形式来布局。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本文探讨常用的css布局各种实现方式，其中&lt;code&gt;float&lt;/code&gt;、&lt;code&gt;position&lt;/code&gt;的实现方式兼容性较好，&lt;code&gt;flex&lt;/code&gt;、&lt;code&gt;grid&lt;/code&gt;兼容性较差甚至各种浏览器有不同的语法，可以通过&lt;a href=&quot;https://caniuse.com/&quot; rel=&quot;external nofollow noopener noreferrer&quot; target=&quot;_blank&quot;&gt;caniuse&lt;/a&gt;搜索查看。&lt;br&gt;
    
    </summary>
    
      <category term="CSS" scheme="http://hoofoo-whu.github.io/categories/CSS/"/>
    
    
      <category term="前端" scheme="http://hoofoo-whu.github.io/tags/%E5%89%8D%E7%AB%AF/"/>
    
      <category term="CSS" scheme="http://hoofoo-whu.github.io/tags/CSS/"/>
    
      <category term="布局" scheme="http://hoofoo-whu.github.io/tags/%E5%B8%83%E5%B1%80/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript陷阱之sort</title>
    <link href="http://hoofoo-whu.github.io/article/2017-06-10/JavaScript%E9%99%B7%E9%98%B1%E4%B9%8Bsort.html"/>
    <id>http://hoofoo-whu.github.io/article/2017-06-10/JavaScript陷阱之sort.html</id>
    <published>2017-06-10T10:49:45.000Z</published>
    <updated>2020-11-29T10:16:15.238Z</updated>
    
    <content type="html"><![CDATA[<p>先安利一个<code>OJ</code>网站<a href="https://www.codewars.com" rel="external nofollow noopener noreferrer" target="_blank">CodeWars</a>，上面的题都是用户出的，所以题库无限大，升段系统也挺有意思的，我的主页<a href="https://www.codewars.com/users/Hoofoo" rel="external nofollow noopener noreferrer" target="_blank">Hoofoo</a>。</p><p><code>Array.prototype.sort()</code>函数是<code>JavaScript</code>编程最常用的函数之一，最近在<a href="https://www.codewars.com" rel="external nofollow noopener noreferrer" target="_blank">codewars</a>练算法时偶然发现执行<code>sort()</code>时负数的排序顺序没有按照预想的运行。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[<span class="number">5</span>,<span class="number">4</span>,<span class="number">3</span>,<span class="number">2</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">-1</span>,<span class="number">-2</span>].sort()</span><br><span class="line"><span class="comment">// =&gt;[ -1, -2, 0, 1, 2, 3, 4, 5 ]</span></span><br></pre></td></tr></table></figure></p><a id="more"></a><p>然后在<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/sort" rel="external nofollow noopener noreferrer" target="_blank">MDN</a>查看发现<code>sort()</code>函数默认是按<strong>字典序</strong>排序的，<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/sort" rel="external nofollow noopener noreferrer" target="_blank">MDN</a>是如下描述的：</p><blockquote><p><code>sort()</code>方法在适当的位置对数组的元素进行排序，并返回数组。 sort 排序不一定是稳定的。默认排序顺序是根据字符串Unicode码点。</p></blockquote><p>所以排序还是要老老实实的用回调函数：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[<span class="number">5</span>,<span class="number">4</span>,<span class="number">3</span>,<span class="number">2</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">-1</span>,<span class="number">-2</span>].sort(<span class="function">(<span class="params">a, b</span>) =&gt;</span> a - b)</span><br><span class="line"><span class="comment">// =&gt;[ -2, -1, 0, 1, 2, 3, 4, 5 ]</span></span><br><span class="line">[<span class="number">5</span>,<span class="number">4</span>,<span class="number">3</span>,<span class="number">2</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">-1</span>,<span class="number">-2</span>].sort(<span class="function">(<span class="params">a, b</span>) =&gt;</span> b - a)</span><br><span class="line"><span class="comment">// =&gt;[ 5, 4, 3, 2, 1, 0, -1, -2 ]</span></span><br></pre></td></tr></table></figure></p><p>可能很多函数都像<code>sort()</code>一样不会像我们想象的那样运行，多看书看文档，巩固好基础，才能写出足够稳固的代码。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;先安利一个&lt;code&gt;OJ&lt;/code&gt;网站&lt;a href=&quot;https://www.codewars.com&quot; rel=&quot;external nofollow noopener noreferrer&quot; target=&quot;_blank&quot;&gt;CodeWars&lt;/a&gt;，上面的题都是用户出的，所以题库无限大，升段系统也挺有意思的，我的主页&lt;a href=&quot;https://www.codewars.com/users/Hoofoo&quot; rel=&quot;external nofollow noopener noreferrer&quot; target=&quot;_blank&quot;&gt;Hoofoo&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;Array.prototype.sort()&lt;/code&gt;函数是&lt;code&gt;JavaScript&lt;/code&gt;编程最常用的函数之一，最近在&lt;a href=&quot;https://www.codewars.com&quot; rel=&quot;external nofollow noopener noreferrer&quot; target=&quot;_blank&quot;&gt;codewars&lt;/a&gt;练算法时偶然发现执行&lt;code&gt;sort()&lt;/code&gt;时负数的排序顺序没有按照预想的运行。&lt;br&gt;&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;[&lt;span class=&quot;number&quot;&gt;5&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;4&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;-1&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;-2&lt;/span&gt;].sort()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// =&amp;gt;[ -1, -2, 0, 1, 2, 3, 4, 5 ]&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="JavaScript陷阱" scheme="http://hoofoo-whu.github.io/categories/JavaScript%E9%99%B7%E9%98%B1/"/>
    
    
      <category term="前端" scheme="http://hoofoo-whu.github.io/tags/%E5%89%8D%E7%AB%AF/"/>
    
      <category term="JavaScript" scheme="http://hoofoo-whu.github.io/tags/JavaScript/"/>
    
      <category term="排序" scheme="http://hoofoo-whu.github.io/tags/%E6%8E%92%E5%BA%8F/"/>
    
      <category term="sort" scheme="http://hoofoo-whu.github.io/tags/sort/"/>
    
  </entry>
  
  <entry>
    <title>解决Cordova在iOS10下插件失效</title>
    <link href="http://hoofoo-whu.github.io/article/2017-04-19/%E8%A7%A3%E5%86%B3Cordova%E5%9C%A8iOS10%E4%B8%8B%E6%8F%92%E4%BB%B6%E5%A4%B1%E6%95%88.html"/>
    <id>http://hoofoo-whu.github.io/article/2017-04-19/解决Cordova在iOS10下插件失效.html</id>
    <published>2017-04-19T09:27:38.000Z</published>
    <updated>2020-11-29T10:16:15.242Z</updated>
    
    <content type="html"><![CDATA[<p>最近做毕设遇到了<code>Cordova</code>在<code>iOS10</code>环境插件不生效的问题，寻找解决方法很久无果，最终在<a href="http://stackoverflow.com/questions/38410159/cordova-app-hanging-during-startup-on-ios-10-beta" rel="external nofollow noopener noreferrer" target="_blank"><code>StackOverflow</code></a>上找到了解决方法，虽然并不能理解，但是好歹解决了问题，<code>StackOverflow</code>大法好。</p><p>解决方法：<br>iOS 10需要在<code>index.html</code>的<code>Content-Security-Policy</code>meta标签中添加<code>gap://ready</code>和<code>file:</code>，添加完之后是这样的:<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"Content-Security-Policy"</span> <span class="attr">content</span>=<span class="string">"default-src * gap://ready file:; style-src 'self' 'unsafe-inline'; img-src 'self' data:; script-src * 'unsafe-inline' 'unsafe-eval'"</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>然后生成启动项目，插件们就又都生效了。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;最近做毕设遇到了&lt;code&gt;Cordova&lt;/code&gt;在&lt;code&gt;iOS10&lt;/code&gt;环境插件不生效的问题，寻找解决方法很久无果，最终在&lt;a href=&quot;http://stackoverflow.com/questions/38410159/cordova-app-
      
    
    </summary>
    
      <category term="Hybrid" scheme="http://hoofoo-whu.github.io/categories/Hybrid/"/>
    
    
      <category term="Cordova" scheme="http://hoofoo-whu.github.io/tags/Cordova/"/>
    
      <category term="iOS" scheme="http://hoofoo-whu.github.io/tags/iOS/"/>
    
      <category term="iOS10" scheme="http://hoofoo-whu.github.io/tags/iOS10/"/>
    
      <category term="Hybrid" scheme="http://hoofoo-whu.github.io/tags/Hybrid/"/>
    
  </entry>
  
  <entry>
    <title>赛码网前端笔试本地环境搭建</title>
    <link href="http://hoofoo-whu.github.io/article/2017-04-11/%E8%B5%9B%E7%A0%81%E7%BD%91%E5%89%8D%E7%AB%AF%E7%AC%94%E8%AF%95%E6%9C%AC%E5%9C%B0%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA.html"/>
    <id>http://hoofoo-whu.github.io/article/2017-04-11/赛码网前端笔试本地环境搭建.html</id>
    <published>2017-04-11T23:54:10.000Z</published>
    <updated>2020-11-29T10:16:15.242Z</updated>
    
    <content type="html"><![CDATA[<p>最近事情是真的真的真的多，找工作、做毕设，再加上拖延症晚期，很久没更博客了，最近的笔试基本都是在<a href="http://www.acmcoder.com" rel="external nofollow noopener noreferrer" target="_blank">赛码网</a>做的，然后写编程题时就遇到了其<code>JavaScript V8</code>引擎实现的奇葩<code>read_line()</code>和<code>print()</code>方法，我不否认这个确实不难用，但是这导致在本地环境根本无法直接调试代码，所以为了达成优雅的本地调试后直接复制到答题框就出现了今天除草的理由，<strong>本地搭建赛码网前端笔试环境</strong>。<br><a id="more"></a></p><h2 id="print方法的实现"><a href="#print方法的实现" class="headerlink" title="print方法的实现"></a>print方法的实现</h2><p>这个没有什么难度，只是把<code>console.log</code>改个名字的事情，一行代码就可以解决。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> print = <span class="built_in">console</span>.log</span><br></pre></td></tr></table></figure></p><h2 id="read-line方法的实现"><a href="#read-line方法的实现" class="headerlink" title="read_line方法的实现"></a>read_line方法的实现</h2><p>众所周知，<code>Node.js</code>是一个异步语言，所以<code>readline</code>也是一个异步操作，根据<a href="http://nodejs.cn/api/readline.html" rel="external nofollow noopener noreferrer" target="_blank">Node.js中文文档</a>介绍，<code>readline</code>是这样操作的：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> readline = <span class="built_in">require</span>(<span class="string">'readline'</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> rl = readline.createInterface(&#123;</span><br><span class="line">  input: process.stdin,</span><br><span class="line">  output: process.stdout</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">rl.question(<span class="string">'你认为 Node.js 中文网怎么样？'</span>, (answer) =&gt; &#123;</span><br><span class="line">  <span class="comment">// 对答案进行处理</span></span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">`多谢你的反馈：<span class="subst">$&#123;answer&#125;</span>`</span>);</span><br><span class="line"></span><br><span class="line">  rl.close();</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p><p>又或者是这样操作的：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">rl.on(<span class="string">'line'</span>, (input) =&gt; &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">`接收到：<span class="subst">$&#123;input&#125;</span>`</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>没错，这样如果用来写一个<code>cli</code>工具<strong>相当</strong>的好用，可是现在的需求不同，我们需要的是复制到答题框可以直接运行的代码，现在神器就该出现了。<br><strong>Duang~! readline-sync</strong><br>绝望的时候还是<code>GitHub</code>靠得住，只需两步即可实现<code>read_line</code>方法：</p><ol><li><p>安装<code>readline-sync</code>，<code>Node.js</code>的环境我就不多介绍了想必大佬们都清楚得很。</p> <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install readline-sync</span><br></pre></td></tr></table></figure></li><li><p>写之前复制下面的代码到前面</p> <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> __readline = <span class="built_in">require</span>(<span class="string">'readline-sync'</span>)</span><br><span class="line">__readline.setDefaultOptions(&#123;<span class="attr">prompt</span>: <span class="string">''</span>&#125;)</span><br><span class="line"><span class="keyword">var</span> read_line = __readline.prompt</span><br></pre></td></tr></table></figure><p> 大功告成，尽情的去笔试吧~</p></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;最近事情是真的真的真的多，找工作、做毕设，再加上拖延症晚期，很久没更博客了，最近的笔试基本都是在&lt;a href=&quot;http://www.acmcoder.com&quot; rel=&quot;external nofollow noopener noreferrer&quot; target=&quot;_blank&quot;&gt;赛码网&lt;/a&gt;做的，然后写编程题时就遇到了其&lt;code&gt;JavaScript V8&lt;/code&gt;引擎实现的奇葩&lt;code&gt;read_line()&lt;/code&gt;和&lt;code&gt;print()&lt;/code&gt;方法，我不否认这个确实不难用，但是这导致在本地环境根本无法直接调试代码，所以为了达成优雅的本地调试后直接复制到答题框就出现了今天除草的理由，&lt;strong&gt;本地搭建赛码网前端笔试环境&lt;/strong&gt;。&lt;br&gt;
    
    </summary>
    
      <category term="Offer" scheme="http://hoofoo-whu.github.io/categories/Offer/"/>
    
    
      <category term="JavaScript" scheme="http://hoofoo-whu.github.io/tags/JavaScript/"/>
    
      <category term="赛码网" scheme="http://hoofoo-whu.github.io/tags/%E8%B5%9B%E7%A0%81%E7%BD%91/"/>
    
      <category term="笔试" scheme="http://hoofoo-whu.github.io/tags/%E7%AC%94%E8%AF%95/"/>
    
      <category term="read_line" scheme="http://hoofoo-whu.github.io/tags/read-line/"/>
    
      <category term="print" scheme="http://hoofoo-whu.github.io/tags/print/"/>
    
  </entry>
  
  <entry>
    <title>修改Next多说评论框样式</title>
    <link href="http://hoofoo-whu.github.io/article/2016-12-09/%E4%BF%AE%E6%94%B9Next%E5%A4%9A%E8%AF%B4%E8%AF%84%E8%AE%BA%E6%A1%86%E6%A0%B7%E5%BC%8F.html"/>
    <id>http://hoofoo-whu.github.io/article/2016-12-09/修改Next多说评论框样式.html</id>
    <published>2016-12-09T12:38:48.000Z</published>
    <updated>2020-11-29T10:16:15.242Z</updated>
    
    <content type="html"><![CDATA[<p>前些天 <a href="http://blog.mliml.com" rel="external nofollow noopener noreferrer" target="_blank">@苏阳mliml</a> 留言要本博客的留言框样式，这几天没太留意博客所以昨天才看到。由于改动次数太多了，代码乱七八糟的，正好也借此机会整理了一下现阶段多说评论框的样式。也欢迎其他博主留言、评论、加友情链接。</p><p>多说因为是使用 <code>JavaScript</code> 加载模块的，所以不能通过修改HTML的方法来修改整体的框架，只能通过一些取巧的方式写 <code>CSS</code> 来得到比较理想的效果。<br><a id="more"></a></p><h2 id="效果图"><a href="#效果图" class="headerlink" title="效果图"></a>效果图</h2><p><img src="https://image-1256107964.cos.ap-beijing.myqcloud.com/blog/20161209001.png" alt="20161209"></p><h2 id="需要注意的几点"><a href="#需要注意的几点" class="headerlink" title="需要注意的几点"></a>需要注意的几点</h2><ul><li>样式里主要进行了风格的适配、对 <code>Retina</code> 屏幕的适配以及多处细节的修改，因为是根据本博客写的，所以复制后还需要部分修改来适配自己的博客。</li><li>修改里隐藏了一部分作用不大但是影响观感的功能，需要的人可以重新显示出来修改成配套的样式。</li><li><code>Next</code> 主题里默认使用 <code>Stylus</code> 预处理 <code>CSS</code> 样式，其他主题建议使用 <code>Stylus</code> 进行预处理后再进行导入或者为站点配置 <code>Stylus</code>。<code>Stylus</code> 语法很简单，修改样式前建议看一下 <a href="https://segmentfault.com/a/1190000002712872" rel="external nofollow noopener noreferrer" target="_blank">Stylus入门使用方法</a>。</li><li><code>Next</code> 主题多说样式文件是 <code>your-blog-path/themes/next/source/css/_common/components/third-party/duoshuo.styl</code></li><li>此样式只适用于多说的平铺模式，其他模式没有测试，可能会出现问题。</li></ul><h2 id="样式文件代码"><a href="#样式文件代码" class="headerlink" title="样式文件代码"></a>样式文件代码</h2><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.theme-next</span> &#123;</span><br><span class="line">  <span class="comment">/*浏览器兼容begin*/</span></span><br><span class="line">    <span class="attribute">box-shadow</span>()&#123;</span><br><span class="line">      <span class="attribute">box-shadow</span>: arguments;</span><br><span class="line">      -moz-<span class="attribute">box-shadow</span>: arguments;</span><br><span class="line">      -webkit-<span class="attribute">box-shadow</span>: arguments;</span><br><span class="line">      -o-<span class="attribute">box-shadow</span>: arguments;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="attribute">transition</span>()&#123;</span><br><span class="line">      <span class="attribute">transition</span>: arguments;</span><br><span class="line">      -moz-<span class="attribute">transition</span>: arguments;</span><br><span class="line">      -webkit-<span class="attribute">transition</span>: arguments;</span><br><span class="line">      -o-<span class="attribute">transition</span>: arguments;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="attribute">border-radius</span>()&#123;</span><br><span class="line">      <span class="attribute">border-radius</span>: arguments;</span><br><span class="line">      -moz-<span class="attribute">border-radius</span>: arguments;</span><br><span class="line">      -webkit-<span class="attribute">border-radius</span>: arguments;</span><br><span class="line">      -o-<span class="attribute">border-radius</span>: arguments;</span><br><span class="line">    &#125;</span><br><span class="line">  <span class="comment">/*浏览器兼容end*/</span></span><br><span class="line">  </span><br><span class="line">  <span class="variable">$duoshuoMaxWidth</span> = <span class="number">700px</span></span><br><span class="line">  <span class="variable">$duoshuoBoxShadow</span> = <span class="number">0</span> <span class="number">2px</span> <span class="number">10px</span> -<span class="number">4px</span> <span class="number">#000</span>1</span><br><span class="line">  <span class="variable">$duoshuoBoxShadowHover</span> = <span class="number">0</span> <span class="number">8px</span> <span class="number">10px</span> -<span class="number">4px</span> <span class="number">#000</span>2</span><br><span class="line">  <span class="variable">$duoshuoBoxBackgroundColor</span> = <span class="number">#fff</span></span><br><span class="line">  <span class="variable">$duoshuoInnerBoxBackgroundColor</span> = <span class="number">#000000</span>05</span><br><span class="line">  <span class="variable">$duoshuoModalBackground</span> = <span class="number">#000</span>A</span><br><span class="line">  <span class="variable">$duoshuoDialogBoxShadow</span> = <span class="number">0</span> <span class="number">10px</span> <span class="number">25px</span> rgba(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0.5</span>)</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// 评论区域整体</span></span><br><span class="line">  <span class="selector-id">#ds-thread</span> <span class="selector-id">#ds-reset</span> &#123;</span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#555</span>;</span><br><span class="line">    <span class="attribute">max-width</span>: <span class="variable">$duoshuoMaxWidth</span>;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">20px</span> auto;</span><br><span class="line">    <span class="selector-class">.ds-comment-body</span> p&#123;</span><br><span class="line">      <span class="attribute">margin</span> <span class="number">1em</span> <span class="number">0</span> <span class="number">0.5em</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="selector-class">.ds-comment-header</span> br&#123;</span><br><span class="line">      <span class="attribute">display</span>: none;</span><br><span class="line">    &#125;</span><br><span class="line">    .ds-toolbar&#123;</span><br><span class="line">      .ds-visitor&#123;</span><br><span class="line">        <span class="attribute">padding</span>: <span class="number">10px</span> <span class="number">0</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="comment">//菜单</span></span><br><span class="line">      .ds-account-control&#123;</span><br><span class="line">        <span class="attribute">padding</span>: <span class="number">10px</span> <span class="number">0</span>;</span><br><span class="line">        .ds-bind-more&#123;</span><br><span class="line">          <span class="attribute">display</span>: none;</span><br><span class="line">        &#125;</span><br><span class="line">        ul&#123;</span><br><span class="line">          <span class="attribute">overflow</span>: hidden;</span><br><span class="line">          <span class="attribute">background</span>: <span class="number">#fff</span>;</span><br><span class="line">          <span class="attribute">left</span>: <span class="number">13px</span>;</span><br><span class="line">          <span class="attribute">top</span>: <span class="number">30px</span>;</span><br><span class="line">          <span class="attribute">width</span>: <span class="number">60px</span>;</span><br><span class="line">          <span class="attribute">border</span>: none;</span><br><span class="line">          <span class="attribute">box-shadow</span>: <span class="number">0</span> <span class="number">1px</span> <span class="number">5px</span> -<span class="number">1px</span> <span class="number">#000</span>3;</span><br><span class="line">          <span class="attribute">transition</span>: box-shadow <span class="number">0.4s</span>;</span><br><span class="line">          &amp;:hover&#123;</span><br><span class="line">            <span class="attribute">box-shadow</span>: <span class="number">0</span> <span class="number">3px</span> <span class="number">6px</span> -<span class="number">1px</span> <span class="number">#000</span>4;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//评论框</span></span><br><span class="line">    <span class="selector-class">.ds-replybox</span> &#123;</span><br><span class="line">      <span class="attribute">margin</span>: <span class="number">5px</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span>;  </span><br><span class="line">      <span class="selector-tag">form</span> &#123;</span><br><span class="line">        <span class="attribute">background</span>: <span class="variable">$duoshuoBoxBackgroundColor</span>;</span><br><span class="line">        <span class="attribute">border-radius</span>: <span class="number">4px</span>;</span><br><span class="line">        <span class="attribute">box-shadow</span>: <span class="variable">$duoshuoBoxShadow</span>;</span><br><span class="line">        <span class="attribute">transition</span>: box-shadow <span class="number">0.4s</span>;</span><br><span class="line">        &amp;:hover&#123;</span><br><span class="line">          <span class="attribute">box-shadow</span>: <span class="variable">$duoshuoBoxShadowHover</span>;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//输入框</span></span><br><span class="line">    <span class="selector-class">.ds-textarea-wrapper</span> &#123;</span><br><span class="line">      <span class="attribute">border</span>: none;</span><br><span class="line">      <span class="attribute">background</span>: none;</span><br><span class="line">      <span class="comment">//添加高度变化动效</span></span><br><span class="line">      <span class="selector-tag">textarea</span> &#123;</span><br><span class="line">        <span class="attribute">overflow-y</span>: hidden;</span><br><span class="line">        <span class="attribute">transition</span>: height <span class="number">0.2s</span>;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//气泡</span></span><br><span class="line">    #ds-bubble&#123;</span><br><span class="line">      <span class="attribute">border</span>: none;</span><br><span class="line">      .ds-time&#123;</span><br><span class="line">        <span class="attribute">display</span>: none;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//评论框工具栏</span></span><br><span class="line">    <span class="selector-class">.ds-post-toolbar</span> &#123;</span><br><span class="line">      <span class="attribute">box-sizing</span>: border-box;</span><br><span class="line">      <span class="attribute">border</span>: none;</span><br><span class="line">      <span class="attribute">background</span>: none;</span><br><span class="line">      <span class="attribute">box-shadow</span>: none;</span><br><span class="line">      <span class="selector-class">.ds-toolbar-buttons</span> &#123;</span><br><span class="line">        <span class="attribute">display</span>: none;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="selector-class">.ds-post-options</span> &#123;</span><br><span class="line">        <span class="attribute">height</span>: <span class="number">40px</span>;</span><br><span class="line">        <span class="attribute">border</span>: none;</span><br><span class="line">        <span class="attribute">background</span>: none;</span><br><span class="line">        <span class="selector-class">.ds-sync</span> &#123;</span><br><span class="line">          <span class="attribute">display</span>: none;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//回复按钮</span></span><br><span class="line">    <span class="selector-class">.ds-post-button</span> &#123;</span><br><span class="line">      <span class="attribute">top</span>: <span class="number">4px</span>;</span><br><span class="line">      <span class="attribute">right</span>: <span class="number">5px</span>;</span><br><span class="line">      <span class="attribute">width</span>: <span class="number">90px</span>;</span><br><span class="line">      <span class="attribute">height</span>: <span class="number">30px</span>;</span><br><span class="line">      <span class="attribute">border</span>: <span class="number">0</span>;</span><br><span class="line">      <span class="attribute">text-shadow</span>: none;</span><br><span class="line">      <span class="attribute">font-weight</span>: <span class="number">200</span>;</span><br><span class="line">      <span class="attribute">border-radius</span>: <span class="number">3px</span>;</span><br><span class="line">      <span class="attribute">background</span>: <span class="number">#555</span>;</span><br><span class="line">      <span class="attribute">color</span>: <span class="number">#fff</span>;</span><br><span class="line">      <span class="attribute">box-shadow</span>: none;</span><br><span class="line">      &amp;:hover &#123;</span><br><span class="line">        <span class="attribute">background</span>: <span class="number">#222</span>;</span><br><span class="line">        <span class="attribute">color</span>: <span class="number">#fff</span>;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//评论数量和排序</span></span><br><span class="line">    <span class="selector-class">.ds-comments-info</span> &#123;</span><br><span class="line">      <span class="attribute">padding</span>: <span class="number">10px</span> <span class="number">0</span>;</span><br><span class="line">      <span class="selector-class">.ds-sort</span> &#123;</span><br><span class="line">        <span class="attribute">top</span>: initial !important;</span><br><span class="line">        <span class="attribute">bottom</span>: <span class="number">0</span> !important;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="selector-tag">li</span><span class="selector-class">.ds-tab</span> <span class="selector-tag">a</span><span class="selector-class">.ds-current</span> &#123;</span><br><span class="line">        <span class="attribute">border</span>: none;</span><br><span class="line">        <span class="attribute">color</span>: <span class="number">#60676d</span>;</span><br><span class="line">        <span class="attribute">transition</span>: background <span class="number">0.2s</span>;  </span><br><span class="line">        <span class="attribute">text-shadow</span>: none;</span><br><span class="line"></span><br><span class="line">        &amp;:hover &#123;</span><br><span class="line">          <span class="attribute">background-color</span>: <span class="number">#eee</span>;</span><br><span class="line">          <span class="attribute">color</span>: <span class="number">#60676d</span>;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="selector-tag">li</span><span class="selector-class">.ds-tab</span> <span class="selector-tag">a</span> &#123;</span><br><span class="line">        <span class="attribute">border-radius</span>: <span class="number">3px</span>;</span><br><span class="line">        <span class="attribute">padding</span>: <span class="number">5px</span>;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//非弹窗登录图标</span></span><br><span class="line">    .ds-login-buttons&#123;</span><br><span class="line">      <span class="attribute">visibility</span>: hidden;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//评论</span></span><br><span class="line">    .ds-comments&#123;</span><br><span class="line">      <span class="attribute">border</span>: none;</span><br><span class="line">      <span class="comment">//评论回复框</span></span><br><span class="line">      <span class="selector-class">.ds-comment-body</span> form&#123;</span><br><span class="line">        <span class="attribute">background</span>: <span class="variable">$duoshuoInnerBoxBackgroundColor</span> !important;</span><br><span class="line">        <span class="attribute">box-shadow</span>: none !important;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="selector-tag">li</span>.ds-post&#123;</span><br><span class="line">        <span class="attribute">border</span>: none;</span><br><span class="line">        <span class="attribute">overflow</span>: visible !important;</span><br><span class="line">        .ds-post-self&#123;</span><br><span class="line">          <span class="attribute">border</span>: none;</span><br><span class="line">          <span class="attribute">padding</span>: <span class="number">10px</span> <span class="number">0</span> !important;</span><br><span class="line">          <span class="attribute">overflow</span>: visible !important;</span><br><span class="line">          .ds-comment-body&#123;</span><br><span class="line">            <span class="attribute">margin</span>: <span class="number">0</span>;</span><br><span class="line">            <span class="attribute">padding</span>: <span class="number">10px</span> !important;</span><br><span class="line">            <span class="attribute">background</span>: <span class="variable">$duoshuoBoxBackgroundColor</span>;</span><br><span class="line">            <span class="attribute">overflow</span>: hidden;</span><br><span class="line">            <span class="attribute">border-radius</span>: <span class="number">4px</span>;</span><br><span class="line">            <span class="attribute">box-shadow</span>: <span class="variable">$duoshuoBoxShadow</span>;</span><br><span class="line">            <span class="attribute">transition</span>: box-shadow <span class="number">0.4s</span>;</span><br><span class="line">            &amp;:hover&#123;</span><br><span class="line">              <span class="attribute">box-shadow</span>: <span class="variable">$duoshuoBoxShadowHover</span>;</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="comment">//评论区头像</span></span><br><span class="line">  <span class="selector-id">#ds-thread</span> <span class="selector-id">#ds-reset</span> <span class="selector-class">.ds-avatar</span>,<span class="selector-id">#ds-ctx</span> .ds-avatar&#123;</span><br><span class="line">    <span class="attribute">box-shadow</span>: none;</span><br><span class="line">    <span class="attribute">border-radius</span>: <span class="number">50%</span>;</span><br><span class="line">    <span class="attribute">overflow</span>: hidden;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="selector-id">#ds-reset</span> .ds-avatar&#123;</span><br><span class="line">    <span class="attribute">float</span>: left;</span><br><span class="line">    <span class="attribute">margin-right</span>: <span class="number">10px</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="comment">//查看对话内部时间标签，由于是A标签且链接为undefined，但是多说内部的代码不能改只能隐藏掉了。</span></span><br><span class="line">  <span class="selector-class">.ds-ctx-head</span> .ds-time&#123;</span><br><span class="line">    <span class="attribute">display</span>: none !important;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="comment">//隐藏掉不必要的东西</span></span><br><span class="line">  <span class="selector-class">.ds-powered-by</span>,<span class="selector-class">.ds-post-likes</span>,<span class="selector-class">.ds-post-repost</span>,<span class="selector-class">.ds-dialog-footer</span>,#ds-indicator&#123;</span><br><span class="line">    <span class="attribute">display</span>: none !important;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="comment">//全屏弹窗</span></span><br><span class="line">  #ds-wrapper&#123;</span><br><span class="line">    <span class="attribute">top</span>: <span class="number">0</span> !important;</span><br><span class="line">    <span class="attribute">background</span>: <span class="variable">$duoshuoModalBackground</span>;</span><br><span class="line">    <span class="attribute">transition</span>: background <span class="number">0.4s</span> !important;</span><br><span class="line">    #ds-reset&#123;</span><br><span class="line">      h2&#123;</span><br><span class="line">        <span class="attribute">margin</span>: <span class="number">15px</span> <span class="number">0px</span> <span class="number">30px</span> <span class="number">0px</span>;</span><br><span class="line">        <span class="attribute">text-shadow</span>: none;</span><br><span class="line">      &#125;</span><br><span class="line">      .ds-icons-<span class="number">32</span>&#123;</span><br><span class="line">        <span class="attribute">margin</span>: <span class="number">0</span> <span class="number">0</span> <span class="number">30px</span> <span class="number">10px</span>;</span><br><span class="line">        a&#123;</span><br><span class="line">          <span class="attribute">margin</span>: <span class="number">0px</span> <span class="number">10px</span> <span class="number">0</span> <span class="number">0</span>;</span><br><span class="line">          <span class="attribute">background-size</span>: <span class="number">32px</span> <span class="number">32px</span> !important;</span><br><span class="line">          <span class="attribute">background-position</span>: <span class="number">0</span> <span class="number">0</span> !important;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    .ds-dialog&#123;</span><br><span class="line">      <span class="attribute">border-radius</span>: <span class="number">3px</span>;</span><br><span class="line">      <span class="attribute">left</span>: <span class="number">0</span> !important;</span><br><span class="line">      <span class="attribute">right</span>: <span class="number">0</span> !important;</span><br><span class="line">      <span class="attribute">margin</span> <span class="number">0</span> auto;</span><br><span class="line">      <span class="attribute">top</span>: <span class="number">20%</span>;</span><br><span class="line">      <span class="attribute">position</span>: fixed;</span><br><span class="line">      <span class="attribute">box-shadow</span>: <span class="variable">$duoshuoDialogBoxShadow</span>;</span><br><span class="line">      .ds-dialog-inner&#123;</span><br><span class="line">        <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">        <span class="attribute">margin</span>: <span class="number">0</span>;</span><br><span class="line">        <span class="attribute">border</span>: none !important;</span><br><span class="line">        <span class="attribute">background</span>: <span class="number">#fff</span>;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="comment">/*ds-icons 改为fontawaysome适配高清屏 begin*/</span></span><br><span class="line">    <span class="selector-class">.ds-icon</span>,<span class="selector-class">.ds-dialog-close</span>,.ds-service-<span class="attribute">icon</span>&#123;</span><br><span class="line">      <span class="attribute">position</span>: relative;</span><br><span class="line">      <span class="attribute">display</span>: inline-block !important;</span><br><span class="line">      <span class="attribute">font</span>: normal normal normal <span class="number">14px</span>/<span class="number">1</span> FontAwesome !important;</span><br><span class="line">      <span class="attribute">outline</span>: none;</span><br><span class="line">      <span class="attribute">font-size</span>: inherit !important;</span><br><span class="line">      <span class="attribute">text-rendering</span>: auto;</span><br><span class="line">      -webkit-<span class="attribute">font</span>-smoothing: antialiased;</span><br><span class="line">      -moz-osx-<span class="attribute">font</span>-smoothing: grayscale;</span><br><span class="line">      <span class="attribute">background</span>: none !important;</span><br><span class="line">      <span class="attribute">width</span>: <span class="number">18px</span> !important;</span><br><span class="line">    &#125;</span><br><span class="line">    .ds-dialog-close&#123;</span><br><span class="line">      <span class="attribute">color</span>: <span class="number">#ccc</span> !important;</span><br><span class="line">      <span class="attribute">transition</span>: color <span class="number">0.2s</span> !important;</span><br><span class="line">      &amp;:hover&#123;</span><br><span class="line">        <span class="attribute">color</span>: <span class="number">#555</span> !important;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="selector-class">.ds-icon-settings</span>::before&#123;</span><br><span class="line">      <span class="attribute">content</span>: <span class="string">"\f013"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="selector-class">.ds-icon-reply</span>::before&#123;</span><br><span class="line">      <span class="attribute">content</span>: <span class="string">"\f112"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="selector-class">.ds-icon-report</span>::before&#123;</span><br><span class="line">      <span class="attribute">content</span>: <span class="string">"\f024"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="selector-class">.ds-icon-delete</span>::before&#123;</span><br><span class="line">      <span class="attribute">content</span>: <span class="string">"\f1f8"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="selector-class">.ds-dialog-close</span>:before&#123;</span><br><span class="line">      <span class="attribute">content</span>: <span class="string">"\f00d"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="selector-class">.ds-service-icon</span>:before&#123;</span><br><span class="line">      <span class="attribute">content</span>: <span class="string">"\f086"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  <span class="comment">/*ds-icons 改为fontawaysome适配高清屏 end*/</span></span><br><span class="line">  </span><br><span class="line">  <span class="comment">/*登录弹框图标begin*/</span></span><br><span class="line">    .ds-icons-<span class="number">32</span>&#123;</span><br><span class="line">      <span class="selector-tag">a</span><span class="selector-class">.ds-weixin</span> &#123;</span><br><span class="line">        <span class="attribute">background-image</span>: url(<span class="string">'http://f1.webshare.mob.com/code/res/icon/sns_icon_22@2x_b.png'</span>) !important;</span><br><span class="line">      &#125; </span><br><span class="line">      <span class="selector-tag">a</span><span class="selector-class">.ds-qq</span> &#123;</span><br><span class="line">        <span class="attribute">background-image</span>: url(<span class="string">'http://f1.webshare.mob.com/code/res/icon/sns_icon_24@2x_b.png'</span>) !important;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="selector-tag">a</span><span class="selector-class">.ds-weibo</span> &#123;</span><br><span class="line">        <span class="attribute">background-image</span>: url(<span class="string">'http://f1.webshare.mob.com/code/res/icon/sns_icon_1@2x_b.png'</span>) !important;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="selector-tag">a</span><span class="selector-class">.ds-renren</span> &#123;</span><br><span class="line">        <span class="attribute">background-image</span>: url(<span class="string">'http://f1.webshare.mob.com/code/res/icon/sns_icon_7@2x_b.png'</span>) !important;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="selector-tag">a</span><span class="selector-class">.ds-kaixin</span> &#123;</span><br><span class="line">        <span class="attribute">background-image</span>: url(<span class="string">'http://f1.webshare.mob.com/code/res/icon/sns_icon_8@2x_b.png'</span>) !important;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="selector-tag">a</span><span class="selector-class">.ds-douban</span> &#123;</span><br><span class="line">      <span class="attribute">margin</span>: <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> !important;</span><br><span class="line">        <span class="attribute">background-image</span>: url(<span class="string">'http://f1.webshare.mob.com/code/res/icon/sns_icon_5@2x_b.png'</span>) !important;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  <span class="comment">/*登录弹框图标end*/</span></span><br><span class="line">  </span><br><span class="line">  <span class="comment">/*最近访客begin*/</span></span><br><span class="line">    <span class="selector-id">#ds-recent-visitors</span> .ds-avatar&#123;</span><br><span class="line">      <span class="attribute">float</span>: left;</span><br><span class="line">      <span class="attribute">overflow</span>: hidden;</span><br><span class="line">      <span class="attribute">border-radius</span>: <span class="number">50%</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    .ds-recent-container&#123;</span><br><span class="line">      <span class="attribute">line-height</span>: <span class="number">40px</span>;</span><br><span class="line">      <span class="attribute">text-align</span>: center;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="selector-class">.ds-recent-container</span> .ds-recent-title&#123;</span><br><span class="line">      <span class="attribute">font-size</span>: <span class="number">20px</span>;</span><br><span class="line">      <span class="attribute">font-weight</span>: <span class="number">200</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    .ds-recent-visitors&#123;</span><br><span class="line">      <span class="attribute">display</span>: inline-block;</span><br><span class="line">      -webkit-<span class="attribute">margin</span>-before: <span class="number">0</span>;</span><br><span class="line">      -webkit-<span class="attribute">margin</span>-after: <span class="number">0</span>;</span><br><span class="line">      -webkit-<span class="attribute">padding</span>-start: <span class="number">0</span>;</span><br><span class="line">      <span class="attribute">vertical-align</span>: middle;</span><br><span class="line">    &#125;</span><br><span class="line">  <span class="comment">/*最近访客end*/</span></span><br><span class="line">  </span><br><span class="line"></span><br><span class="line"><span class="comment">/*duoshuo UA style begin*/</span></span><br><span class="line"></span><br><span class="line">  <span class="selector-id">#ds-reset</span> <span class="selector-class">.duoshuo-ua-platform</span>,</span><br><span class="line">  <span class="selector-id">#ds-reset</span> <span class="selector-class">.duoshuo-ua-browser</span> &#123;</span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#999</span>;</span><br><span class="line"></span><br><span class="line">    <span class="selector-class">.fa</span> &#123;</span><br><span class="line">      <span class="attribute">display</span>: inline-block;</span><br><span class="line">      <span class="attribute">margin-right</span>: <span class="number">3px</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="selector-id">#ds-reset</span> <span class="selector-class">.duoshuo-ua-browser</span> &#123;</span><br><span class="line">    <span class="attribute">display</span>: none;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*duoshuo UA style end*/</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;前些天 &lt;a href=&quot;http://blog.mliml.com&quot; rel=&quot;external nofollow noopener noreferrer&quot; target=&quot;_blank&quot;&gt;@苏阳mliml&lt;/a&gt; 留言要本博客的留言框样式，这几天没太留意博客所以昨天才看到。由于改动次数太多了，代码乱七八糟的，正好也借此机会整理了一下现阶段多说评论框的样式。也欢迎其他博主留言、评论、加友情链接。&lt;/p&gt;
&lt;p&gt;多说因为是使用 &lt;code&gt;JavaScript&lt;/code&gt; 加载模块的，所以不能通过修改HTML的方法来修改整体的框架，只能通过一些取巧的方式写 &lt;code&gt;CSS&lt;/code&gt; 来得到比较理想的效果。&lt;br&gt;
    
    </summary>
    
      <category term="Hexo" scheme="http://hoofoo-whu.github.io/categories/Hexo/"/>
    
    
      <category term="前端" scheme="http://hoofoo-whu.github.io/tags/%E5%89%8D%E7%AB%AF/"/>
    
      <category term="CSS" scheme="http://hoofoo-whu.github.io/tags/CSS/"/>
    
      <category term="Next" scheme="http://hoofoo-whu.github.io/tags/Next/"/>
    
      <category term="多说" scheme="http://hoofoo-whu.github.io/tags/%E5%A4%9A%E8%AF%B4/"/>
    
  </entry>
  
  <entry>
    <title>尾部的零</title>
    <link href="http://hoofoo-whu.github.io/article/2016-12-02/%E5%B0%BE%E9%83%A8%E7%9A%84%E9%9B%B6.html"/>
    <id>http://hoofoo-whu.github.io/article/2016-12-02/尾部的零.html</id>
    <published>2016-12-02T22:49:12.000Z</published>
    <updated>2020-11-29T10:16:15.242Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p><a href="http://www.lintcode.com" rel="external nofollow noopener noreferrer" target="_blank">LintCode</a> 是专注代码面试的在线评测系统，有很多代码题，可以用 <code>Java</code>、<code>C++</code>、<code>Python</code> 在线答题，我觉得还不错，就决定把做一做这些题，然后把题目的实现、优化思路写下来，一来是为了有更深的理解，二来是讨论一下还有没有更好的方法。</p><h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><p>LintCode：<a href="http://www.lintcode.com/zh-cn/problem/trailing-zeros/" rel="external nofollow noopener noreferrer" target="_blank">尾部的零</a><br><a id="more"></a></p><h3 id="描述"><a href="#描述" class="headerlink" title="描述"></a>描述</h3><p>设计一个算法，计算出n阶乘中尾部零的个数</p><h3 id="样例"><a href="#样例" class="headerlink" title="样例"></a>样例</h3><p><code>11! = 39916800</code>，因此应该返回 <code>2</code></p><h3 id="挑战"><a href="#挑战" class="headerlink" title="挑战"></a>挑战</h3><p>O(logN)的时间复杂度</p><h2 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h2><h3 id="问题分析"><a href="#问题分析" class="headerlink" title="问题分析"></a>问题分析</h3><blockquote><p>如果算出来阶乘再计算的话，至少要遍历一遍，肯定是无法达到 O(logN) 的时间复杂度的，所以要采用数学方法来解决。</p></blockquote><p>例子：（1000的阶乘末尾0的个数，其中的“/”是取整除法）</p><blockquote><p>$$<br>\begin{aligned}<br>&amp;1000/5+1000/25+1000/125+1000/625\<br>=\quad&amp;200+40+8+1\<br>=\quad&amp;249(个)<br>\end{aligned}<br>$$</p></blockquote><p>原理是：<br>假如你把 $1\times2\times３\times4\times\cdots\times N$ 中每一个因数分解质因数，结果就像：</p><blockquote><p>$$1\times2\times3\times(2\times2)\times5\times(2\times3)\times7\times(2\times2\times2)\times\cdots$$</p></blockquote><ul><li>10 进制数结尾的每一个 0 都表示有一个因数 10 存在——任何进制都一样，对于一个 M 进制的数，让结尾多一个 0 就等价于乘以 M 。   </li><li>10 可以分解为 $2\times5$ ——因此只有质数 2 和 5 相乘能产生 0 ，别的任何两个质数相乘都不能产生 0 ，而且 2 ，5 相乘只产生一个 0 。</li><li>分解后的整个因数式中有多少对 $(2,5)$ ，结果中就有多少个 0 ，而分解的结果中，2 的个数显然是多于 5 的，因此，有多少个 5 ，就有多少个 $(2,5)$ 对。讨论 1000 的阶乘结尾有几个 0 的问题，就被转换成了 1 到 1000 所有这些数的质因数分解式有多少个5的问题。</li></ul><blockquote><p>$$10000 以内 0 的个数 = 5的倍数 + 5^2的倍数 + 5^3的倍数 + 5^4的倍数 + 5^5的倍数$$</p></blockquote><h3 id="代码实现-C"><a href="#代码实现-C" class="headerlink" title="代码实现 - C++"></a>代码实现 - C++</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"> <span class="keyword">public</span>:</span><br><span class="line">    <span class="comment">// param n : description of n</span></span><br><span class="line">    <span class="comment">// return: description of return </span></span><br><span class="line">    <span class="function"><span class="keyword">long</span> <span class="keyword">long</span> <span class="title">trailingZeros</span><span class="params">(<span class="keyword">long</span> <span class="keyword">long</span> n)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">long</span> <span class="keyword">long</span> temp = <span class="number">5</span>;</span><br><span class="line">        <span class="keyword">long</span> <span class="keyword">long</span> result = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(temp &lt;= n)&#123;</span><br><span class="line">            result += n / temp;</span><br><span class="line">            temp *= <span class="number">5</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="结果分析"><a href="#结果分析" class="headerlink" title="结果分析"></a>结果分析</h3><p><code>5ms</code> 完成，预想之中的快。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>数学思想忘得一干二净了，要加强数学思维才行。</p><p><br></p><blockquote><p>本文整理自 <a href="http://blog.163.com/taoqibao_tao/" rel="external nofollow noopener noreferrer" target="_blank">淘气宝宝</a> 的文章 <a href="http://blog.163.com/taoqibao_tao/blog/static/122906690200962784627562/" rel="external nofollow noopener noreferrer" target="_blank">求大数的阶乘和末尾0个数的计算</a><br>转载请注明原出处</p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;http://www.lintcode.com&quot; rel=&quot;external nofollow noopener noreferrer&quot; target=&quot;_blank&quot;&gt;LintCode&lt;/a&gt; 是专注代码面试的在线评测系统，有很多代码题，可以用 &lt;code&gt;Java&lt;/code&gt;、&lt;code&gt;C++&lt;/code&gt;、&lt;code&gt;Python&lt;/code&gt; 在线答题，我觉得还不错，就决定把做一做这些题，然后把题目的实现、优化思路写下来，一来是为了有更深的理解，二来是讨论一下还有没有更好的方法。&lt;/p&gt;
&lt;h2 id=&quot;问题&quot;&gt;&lt;a href=&quot;#问题&quot; class=&quot;headerlink&quot; title=&quot;问题&quot;&gt;&lt;/a&gt;问题&lt;/h2&gt;&lt;p&gt;LintCode：&lt;a href=&quot;http://www.lintcode.com/zh-cn/problem/trailing-zeros/&quot; rel=&quot;external nofollow noopener noreferrer&quot; target=&quot;_blank&quot;&gt;尾部的零&lt;/a&gt;&lt;br&gt;
    
    </summary>
    
      <category term="LintCode" scheme="http://hoofoo-whu.github.io/categories/LintCode/"/>
    
    
      <category term="算法" scheme="http://hoofoo-whu.github.io/tags/%E7%AE%97%E6%B3%95/"/>
    
      <category term="C++" scheme="http://hoofoo-whu.github.io/tags/C/"/>
    
      <category term="数学" scheme="http://hoofoo-whu.github.io/tags/%E6%95%B0%E5%AD%A6/"/>
    
      <category term="整理" scheme="http://hoofoo-whu.github.io/tags/%E6%95%B4%E7%90%86/"/>
    
  </entry>
  
  <entry>
    <title>用node.js实现简单验证码识别</title>
    <link href="http://hoofoo-whu.github.io/article/2016-11-29/%E7%94%A8node-js%E5%AE%9E%E7%8E%B0%E7%AE%80%E5%8D%95%E9%AA%8C%E8%AF%81%E7%A0%81%E8%AF%86%E5%88%AB.html"/>
    <id>http://hoofoo-whu.github.io/article/2016-11-29/用node-js实现简单验证码识别.html</id>
    <published>2016-11-29T11:08:41.000Z</published>
    <updated>2020-11-29T10:16:15.242Z</updated>
    
    <content type="html"><![CDATA[<h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>在验证码识别上， <code>node.js</code> 其实也只是打酱油的角色，因为已经有成熟的工具做这个事情，而node只需要做调度就行了。</p><h2 id="所需工具"><a href="#所需工具" class="headerlink" title="所需工具"></a>所需工具</h2><p>那么介绍一下这些工具吧</p><ul><li><code>Tesseract</code> 开源的 <code>OCR</code> 识别工具，目前由 <code>Google</code> 维护，支持中文，默认的识别率很低哈，特别是中文，但是可以自己提供样本，训练提高识别率。</li><li><code>graphicsmagick</code> 非常实用的图像处理工具，下面会讲到用途。</li></ul><a id="more"></a><h2 id="Tesseract的使用"><a href="#Tesseract的使用" class="headerlink" title="Tesseract的使用"></a>Tesseract的使用</h2><blockquote><p>以下操作均在 Mac 环境下，Windows 其实也差不多，请自行区分 :-)。</p></blockquote><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">brew install tesseract --all-languages</span><br></pre></td></tr></table></figure><h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tesseract 1.jpg -psm 7 r</span><br></pre></td></tr></table></figure><blockquote><p><code>-psm 7</code> 表示识别的内容是文本，<code>r</code> 是保存识别内容的文件。</p></blockquote><p><img src="https://image-1256107964.cos.ap-beijing.myqcloud.com/blog/20161129001.gif" alt="20161129001"></p><p>然后你会发现识别结果很坑… (⊙o⊙)…</p><h3 id="提高识别率"><a href="#提高识别率" class="headerlink" title="提高识别率"></a>提高识别率</h3><p>之所以是这样，是因为验证码上有无关的图像干扰，例如噪点什么的，理论上去掉了干扰的元素，识别率就会极大的提高。用阈值处理图片是个很方便的办法，<code>在Photoshop中可以模拟这种操作</code> 。</p><p><img src="https://image-1256107964.cos.ap-beijing.myqcloud.com/blog/20161129002.gif" alt="20161129002"></p><h3 id="再试一次"><a href="#再试一次" class="headerlink" title="再试一次"></a>再试一次</h3><p>这里配置为55%的阈值，再来一次。</p><p><img src="https://image-1256107964.cos.ap-beijing.myqcloud.com/blog/20161129003.gif" alt="20161129003"></p><p>成功了！( ⊙ o ⊙ )！虽然多了个空格，但是已经完整识别出来了。</p><h2 id="用node-js实现"><a href="#用node-js实现" class="headerlink" title="用node.js实现"></a>用node.js实现</h2><p>最后在 <code>node.js</code> 中整合上面的操作，其中图像处理用 <code>graphicsmagick</code> 代替。直接上源码把，里面用到了 <code>tesseract</code> 和 <code>graphicsmagick</code> 在 <code>node.js</code> 中对应的包装。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> fs = <span class="built_in">require</span>(<span class="string">'fs'</span>);</span><br><span class="line"><span class="keyword">var</span> tesseract = <span class="built_in">require</span>(<span class="string">'node-tesseract'</span>);</span><br><span class="line"><span class="keyword">var</span> gm = <span class="built_in">require</span>(<span class="string">'gm'</span>);</span><br><span class="line"></span><br><span class="line">processImg(<span class="string">'1.jpg'</span>, <span class="string">'test_1.jpg'</span>)</span><br><span class="line">    .then(recognizer)</span><br><span class="line">    .then(text = &gt; &#123; <span class="built_in">console</span>.log(<span class="string">`识别结果: $ &#123; text &#125;`</span>); &#125;)</span><br><span class="line">    .catch((err) = &gt; &#123; <span class="built_in">console</span>.error(<span class="string">`识别失败: $ &#123; err &#125;`</span>); &#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">///</span></span><br><span class="line"> <span class="comment">// 处理图片为阈值图片</span></span><br><span class="line"> <span class="comment">// @param imgPath</span></span><br><span class="line"> <span class="comment">// @param newPath</span></span><br><span class="line"> <span class="comment">// @param [thresholdVal=55] 默认阈值</span></span><br><span class="line"> <span class="comment">// @returns &#123;Promise&#125;</span></span><br><span class="line"><span class="comment">///</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">processImg</span>(<span class="params">imgPath, newPath, thresholdVal</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>((resolve, reject) = &gt; &#123;</span><br><span class="line">    gm(imgPath).threshold(thresholdVal || <span class="number">55</span>).write(newPath, (err) = &gt; &#123;</span><br><span class="line">      <span class="keyword">if</span> (err) <span class="keyword">return</span> reject(err);</span><br><span class="line"></span><br><span class="line">      resolve(newPath);</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">///</span></span><br><span class="line"> <span class="comment">// 识别图片</span></span><br><span class="line"> <span class="comment">// @param imgPath</span></span><br><span class="line"> <span class="comment">// @param options tesseract options</span></span><br><span class="line"> <span class="comment">// @returns &#123;Promise&#125;</span></span><br><span class="line"><span class="comment">///</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">recognizer</span>(<span class="params">imgPath, options</span>) </span>&#123;</span><br><span class="line">  options = <span class="built_in">Object</span>.assign(&#123;<span class="attr">psm</span> : <span class="number">7</span>&#125;, options);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>((resolve, reject) = &gt; &#123;</span><br><span class="line">    tesseract.process(imgPath, options, (err, text) = &gt; &#123;</span><br><span class="line">      <span class="keyword">if</span> (err) <span class="keyword">return</span> reject(err);</span><br><span class="line">      resolve(text.replace(<span class="regexp">/ [\r\n\s] /</span> gm, <span class="string">''</span>));</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h2><p>写完之后才发现实例中的验证码的第一个字符其实是 <code>G</code> ，而不是识别出来的 <code>C</code> 。默认样本对相近字符识别还是挺低的，可以搜索 <code>tesseract训练</code> ，提高相近字符的识别率。</p><h2 id="资源"><a href="#资源" class="headerlink" title="资源"></a>资源</h2><ul><li><a href="https://github.com/desmondmorris/node-tesseract" rel="external nofollow noopener noreferrer" target="_blank">node-tesseract</a> tesseract的node包装</li><li><a href="https://github.com/aheckmann/gm" rel="external nofollow noopener noreferrer" target="_blank">gm</a> graphicsmagick的node包装</li><li><a href="https://github.com/think2011/node-ocr-demo" rel="external nofollow noopener noreferrer" target="_blank">node-ocr-demo</a> 还做了一个 demo 放在 github 上了</li></ul><p><br></p><blockquote><p>本文整理自 <a href="http://think2011.net" rel="external nofollow noopener noreferrer" target="_blank">think2011的博客</a> 的文章 <a href="http://think2011.net/2016/01/31/node-ocr/" rel="external nofollow noopener noreferrer" target="_blank">用node.js实现验证码简单识别</a><br>转载请注明原出处</p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;概述&quot;&gt;&lt;a href=&quot;#概述&quot; class=&quot;headerlink&quot; title=&quot;概述&quot;&gt;&lt;/a&gt;概述&lt;/h2&gt;&lt;p&gt;在验证码识别上， &lt;code&gt;node.js&lt;/code&gt; 其实也只是打酱油的角色，因为已经有成熟的工具做这个事情，而node只需要做调度就行了。&lt;/p&gt;
&lt;h2 id=&quot;所需工具&quot;&gt;&lt;a href=&quot;#所需工具&quot; class=&quot;headerlink&quot; title=&quot;所需工具&quot;&gt;&lt;/a&gt;所需工具&lt;/h2&gt;&lt;p&gt;那么介绍一下这些工具吧&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Tesseract&lt;/code&gt; 开源的 &lt;code&gt;OCR&lt;/code&gt; 识别工具，目前由 &lt;code&gt;Google&lt;/code&gt; 维护，支持中文，默认的识别率很低哈，特别是中文，但是可以自己提供样本，训练提高识别率。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;graphicsmagick&lt;/code&gt; 非常实用的图像处理工具，下面会讲到用途。&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="node.js" scheme="http://hoofoo-whu.github.io/categories/node-js/"/>
    
    
      <category term="JavaScript" scheme="http://hoofoo-whu.github.io/tags/JavaScript/"/>
    
      <category term="整理" scheme="http://hoofoo-whu.github.io/tags/%E6%95%B4%E7%90%86/"/>
    
      <category term="ocr" scheme="http://hoofoo-whu.github.io/tags/ocr/"/>
    
      <category term="验证码识别" scheme="http://hoofoo-whu.github.io/tags/%E9%AA%8C%E8%AF%81%E7%A0%81%E8%AF%86%E5%88%AB/"/>
    
  </entry>
  
  <entry>
    <title>主元素</title>
    <link href="http://hoofoo-whu.github.io/article/2016-11-19/%E4%B8%BB%E5%85%83%E7%B4%A0.html"/>
    <id>http://hoofoo-whu.github.io/article/2016-11-19/主元素.html</id>
    <published>2016-11-19T00:13:50.000Z</published>
    <updated>2020-11-29T10:16:15.242Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p><a href="http://www.lintcode.com" rel="external nofollow noopener noreferrer" target="_blank">LintCode</a> 是专注代码面试的在线评测系统，有很多代码题，可以用 <code>Java</code>、<code>C++</code>、<code>Python</code> 在线答题，我觉得还不错，就决定把做一做这些题，然后把题目的实现、优化思路写下来，一来是为了有更深的理解，二来是讨论一下还有没有更好的方法。</p><h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><p>LintCode：<a href="http://www.lintcode.com/zh-cn/problem/majority-number/" rel="external nofollow noopener noreferrer" target="_blank">主元素</a><br><a id="more"></a></p><h3 id="描述"><a href="#描述" class="headerlink" title="描述"></a>描述</h3><p>给定一个整型数组，找出主元素，它在数组中的出现次数严格大于数组元素个数的二分之一。</p><h3 id="样例"><a href="#样例" class="headerlink" title="样例"></a>样例</h3><p>给出数组 <code>[1,1,1,1,2,2,2]</code> ，返回 <code>1</code></p><h3 id="挑战"><a href="#挑战" class="headerlink" title="挑战"></a>挑战</h3><p>要求时间复杂度为O(n)，空间复杂度为O(1)</p><h2 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h2><p>这个问题非常简单，不过完成挑战还是需要一个很讨巧的思想，先说一说正常的思路。</p><h3 id="排序计数"><a href="#排序计数" class="headerlink" title="排序计数"></a>排序计数</h3><h4 id="问题分析"><a href="#问题分析" class="headerlink" title="问题分析"></a>问题分析</h4><p>首先想到的是用一个合适的 <a href="http://www.cplusplus.com/reference/tuple/" rel="external nofollow noopener noreferrer" target="_blank">Tuple</a> 来分别存储每个值的个数，最后取最大的（因为题目默认是有主元素的）。然而这完全是人脑的思路，并不是适合计算机，而且从空间复杂度上就和过挑战无缘了。还是决定先进行排序，再遍历一遍，重复的就计数，大于一半就跳出、返回。</p><h4 id="代码实现-C"><a href="#代码实现-C" class="headerlink" title="代码实现 - C++"></a>代码实现 - C++</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">majorityNumber</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; nums)</span> </span>&#123;</span><br><span class="line">        sort(nums.begin(), nums.end());</span><br><span class="line">        <span class="keyword">int</span> len = nums.size();</span><br><span class="line">        <span class="keyword">int</span> count = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; len; ++i)</span><br><span class="line">            <span class="keyword">if</span>(nums[i] == nums[i - <span class="number">1</span>])&#123;</span><br><span class="line">                count++;</span><br><span class="line">                <span class="keyword">if</span>(count * <span class="number">2</span> &gt; len)</span><br><span class="line">                    <span class="keyword">return</span> nums[i];</span><br><span class="line">            &#125;<span class="keyword">else</span></span><br><span class="line">                count = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h4 id="结果分析"><a href="#结果分析" class="headerlink" title="结果分析"></a>结果分析</h4><ul><li>结果：<code>23ms</code> 通过测试，速度还不错。</li><li>分析：由于排序，时间复杂度一定大于 $o(n)$ ，大概为 $o(nlog_2 n)$，不能完成挑战要求。空间复杂度由于快排占空间复杂度为 $o(1)$，遍历时变量为常数，所以整体空间复杂度为 $o(1)$ ， 符合挑战要求。</li></ul><h3 id="剪裁数组"><a href="#剪裁数组" class="headerlink" title="剪裁数组"></a>剪裁数组</h3><h4 id="问题分析-1"><a href="#问题分析-1" class="headerlink" title="问题分析"></a>问题分析</h4><p>这并不是我想出来的方法，不过这个方法很是巧妙，所以在此记录并拿出来分享一下。核心的思路在于 <strong>当一个数组去掉两个不同的元素时，其主元素不改变</strong> 。</p><blockquote><p>两个不相等的元素只有两种可能，两种情况分别为 <strong>去掉两个非主元素</strong> 和 <strong>去掉一个主元素和一个非主元素</strong>，无论如何主元素比例都不小于去掉之前。</p></blockquote><p>所以从头开始遍历，只要凑成 <code>n</code> 对不相等元素就可以裁剪掉前面的部分。</p><h4 id="代码实现-C-1"><a href="#代码实现-C-1" class="headerlink" title="代码实现 - C++"></a>代码实现 - C++</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">majorityNumber</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; nums)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> len = nums.size();</span><br><span class="line">        <span class="keyword">int</span> count = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> majority;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; len; ++i)&#123;</span><br><span class="line">            <span class="keyword">if</span>(count == <span class="number">0</span>) majority = nums[i];</span><br><span class="line">            <span class="keyword">if</span>(majority == nums[i]) ++count;</span><br><span class="line">            <span class="keyword">else</span> --count;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> majority;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h4 id="结果分析-1"><a href="#结果分析-1" class="headerlink" title="结果分析"></a>结果分析</h4><p>结果：<code>21ms</code> 通过测试，由于测试数据不大，速度提升并不是很明显。<br>分析：只遍历一次，时间复杂度 $o(n)$，常数个变量，空间复杂度 $o(1)$，虽然速度提升不明显，但是理论上通过挑战。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>简单题想做出花来也并非易事，每道题都有每道题的特点，生搬硬套、死记硬背可以解决很多问题但未必能完美解决。灵活来源于量的积累，多做题，多思考。</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;http://www.lintcode.com&quot; rel=&quot;external nofollow noopener noreferrer&quot; target=&quot;_blank&quot;&gt;LintCode&lt;/a&gt; 是专注代码面试的在线评测系统，有很多代码题，可以用 &lt;code&gt;Java&lt;/code&gt;、&lt;code&gt;C++&lt;/code&gt;、&lt;code&gt;Python&lt;/code&gt; 在线答题，我觉得还不错，就决定把做一做这些题，然后把题目的实现、优化思路写下来，一来是为了有更深的理解，二来是讨论一下还有没有更好的方法。&lt;/p&gt;
&lt;h2 id=&quot;问题&quot;&gt;&lt;a href=&quot;#问题&quot; class=&quot;headerlink&quot; title=&quot;问题&quot;&gt;&lt;/a&gt;问题&lt;/h2&gt;&lt;p&gt;LintCode：&lt;a href=&quot;http://www.lintcode.com/zh-cn/problem/majority-number/&quot; rel=&quot;external nofollow noopener noreferrer&quot; target=&quot;_blank&quot;&gt;主元素&lt;/a&gt;&lt;br&gt;
    
    </summary>
    
      <category term="LintCode" scheme="http://hoofoo-whu.github.io/categories/LintCode/"/>
    
    
      <category term="算法" scheme="http://hoofoo-whu.github.io/tags/%E7%AE%97%E6%B3%95/"/>
    
      <category term="C++" scheme="http://hoofoo-whu.github.io/tags/C/"/>
    
      <category term="vector" scheme="http://hoofoo-whu.github.io/tags/vector/"/>
    
  </entry>
  
  <entry>
    <title>整数排序</title>
    <link href="http://hoofoo-whu.github.io/article/2016-11-14/%E6%95%B4%E6%95%B0%E6%8E%92%E5%BA%8F.html"/>
    <id>http://hoofoo-whu.github.io/article/2016-11-14/整数排序.html</id>
    <published>2016-11-14T16:53:56.000Z</published>
    <updated>2020-11-29T10:16:15.242Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p><a href="http://www.lintcode.com" rel="external nofollow noopener noreferrer" target="_blank">LintCode</a> 是专注代码面试的在线评测系统，有很多代码题，可以用 <code>Java</code>、<code>C++</code>、<code>Python</code> 在线答题，我觉得还不错，就决定把做一做这些题，然后把题目的实现、优化思路写下来，一来是为了有更深的理解，二来是讨论一下还有没有更好的方法。</p><h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><p>LintCode：<a href="http://www.lintcode.com/zh-cn/problem/sort-integers/" rel="external nofollow noopener noreferrer" target="_blank">整数排序</a><br><a id="more"></a></p><h3 id="描述"><a href="#描述" class="headerlink" title="描述"></a>描述</h3><p>给一组整数，按照升序排序，使用选择排序，冒泡排序，插入排序或者任何 <code>O(n2)</code> 的排序算法。</p><h3 id="样例"><a href="#样例" class="headerlink" title="样例"></a>样例</h3><p>对于数组 <code>[3, 2, 1, 4, 5]</code> ， 排序后为：<code>[1, 2, 3, 4, 5]</code> 。</p><h2 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h2><p>排序是最常见的算法了，但也不是人人都能信手拈来的。<code>toptal</code> 提供了 <a href="https://www.toptal.com/developers/sorting-algorithms/" rel="external nofollow noopener noreferrer" target="_blank">Sorting Algorithms Animations</a> 帮助人们理解和对比各种排序，每一种排序都有介绍、伪代码以及不同情况下的动画演示，在这里向大家推荐。</p><h3 id="意识排序"><a href="#意识排序" class="headerlink" title="意识排序"></a>意识排序</h3><p>意识排序就是潜意识下写出来的排序，并没有一个名字。<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">sortIntegers</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; A)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 29ms</span></span><br><span class="line">        <span class="keyword">int</span> i, j, buffer;</span><br><span class="line">        <span class="keyword">int</span> size = A.size();</span><br><span class="line">        <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; size; ++i)</span><br><span class="line">            <span class="keyword">for</span> (j = <span class="number">0</span>; j &lt; i; ++j) &#123;</span><br><span class="line">                <span class="keyword">if</span> (A[i] &lt; A[j]) &#123;</span><br><span class="line">                    buffer = A[j];</span><br><span class="line">                    A[j] = A[i];</span><br><span class="line">                    A[i] = buffer;</span><br><span class="line">                &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="冒泡排序"><a href="#冒泡排序" class="headerlink" title="冒泡排序"></a>冒泡排序</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">sortIntegers</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; A)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 33ms</span></span><br><span class="line">        <span class="keyword">int</span> i, j, buffer;</span><br><span class="line">        <span class="keyword">bool</span> swapped = <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">int</span> size = A.size();</span><br><span class="line">        <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; size &amp;&amp; swapped; ++i)</span><br><span class="line">            <span class="keyword">for</span> (j = size - <span class="number">1</span>, swapped = <span class="literal">false</span>; j &gt; i; --j)</span><br><span class="line">                <span class="keyword">if</span> (A[j] &lt; A[j - <span class="number">1</span>]) &#123;</span><br><span class="line">                    buffer = A[j];</span><br><span class="line">                    A[j] = A[j - <span class="number">1</span>];</span><br><span class="line">                    A[j - <span class="number">1</span>] = buffer;</span><br><span class="line">                    swapped = <span class="literal">true</span>;</span><br><span class="line">                &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="选择排序"><a href="#选择排序" class="headerlink" title="选择排序"></a>选择排序</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">sortIntegers</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; A)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 28ms</span></span><br><span class="line">        <span class="keyword">int</span> i, j, key, buffer;</span><br><span class="line">        <span class="keyword">int</span> size = A.size();</span><br><span class="line">        <span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; size; ++i)&#123;</span><br><span class="line">            key = i;</span><br><span class="line">            <span class="keyword">for</span>(j = i; j &lt; size; ++j) &#123;</span><br><span class="line">                <span class="keyword">if</span>(A[j] &lt; A[key]) key = j;</span><br><span class="line">            &#125;</span><br><span class="line">            buffer = A[i];</span><br><span class="line">            A[i] = A[key];</span><br><span class="line">            A[key] = buffer;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="插入排序"><a href="#插入排序" class="headerlink" title="插入排序"></a>插入排序</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">sortIntegers</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; A)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 20ms</span></span><br><span class="line">        <span class="keyword">int</span> i, j, temp;</span><br><span class="line">        <span class="keyword">int</span> size = A.size();</span><br><span class="line">        <span class="keyword">for</span>(i = <span class="number">1</span>; i &lt; size; ++i) &#123;</span><br><span class="line">            <span class="keyword">if</span>(A[i] &gt;= A[i - <span class="number">1</span>]) <span class="keyword">continue</span>;</span><br><span class="line">            temp = A[i];</span><br><span class="line">            <span class="keyword">for</span> (j = i - <span class="number">1</span>; j &gt;= <span class="number">0</span> &amp;&amp; A[j] &gt; temp; --j)&#123;</span><br><span class="line">                A[j + <span class="number">1</span>] = A[j];</span><br><span class="line">            &#125;</span><br><span class="line">            A[j + <span class="number">1</span>] = temp;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="快速排序"><a href="#快速排序" class="headerlink" title="快速排序"></a>快速排序</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">sortIntegers</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; A)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 14ms</span></span><br><span class="line">        Qsort(A, <span class="number">0</span>, A.size() - <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Qsort</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; A, <span class="keyword">int</span> low, <span class="keyword">int</span> high)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(low &gt;= high) <span class="keyword">return</span>;</span><br><span class="line">        <span class="keyword">int</span> begin = low;</span><br><span class="line">        <span class="keyword">int</span> end = high;</span><br><span class="line">        <span class="keyword">int</span> temp = A[low];</span><br><span class="line">        <span class="keyword">while</span> (begin &lt; end) &#123;</span><br><span class="line">            <span class="keyword">while</span>(A[end] &gt;= temp) --end;</span><br><span class="line">            A[begin] = A[end];</span><br><span class="line">            <span class="keyword">while</span>(begin &lt; end &amp;&amp; A[begin] &lt;= temp) ++begin;</span><br><span class="line">            A[end] = A[begin];</span><br><span class="line">        &#125;</span><br><span class="line">        A[begin] = temp;</span><br><span class="line">        Qsort(A, low, begin - <span class="number">1</span>);</span><br><span class="line">        Qsort(A, begin + <span class="number">1</span>, high);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>因为是很常见的排序，就没有写具体的分析，而且 <a href="https://www.toptal.com/developers/sorting-algorithms/" rel="external nofollow noopener noreferrer" target="_blank">Sorting Algorithms Animations</a> 上给的很清晰。务必要打开看一下，非常好的网站。<br>虽然排序各种标准库里都有，但是还是要多思考、多了解一点，不仅可以锻炼一下逻辑能力，还可以在某些特殊情况下有奇效。</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;http://www.lintcode.com&quot; rel=&quot;external nofollow noopener noreferrer&quot; target=&quot;_blank&quot;&gt;LintCode&lt;/a&gt; 是专注代码面试的在线评测系统，有很多代码题，可以用 &lt;code&gt;Java&lt;/code&gt;、&lt;code&gt;C++&lt;/code&gt;、&lt;code&gt;Python&lt;/code&gt; 在线答题，我觉得还不错，就决定把做一做这些题，然后把题目的实现、优化思路写下来，一来是为了有更深的理解，二来是讨论一下还有没有更好的方法。&lt;/p&gt;
&lt;h2 id=&quot;问题&quot;&gt;&lt;a href=&quot;#问题&quot; class=&quot;headerlink&quot; title=&quot;问题&quot;&gt;&lt;/a&gt;问题&lt;/h2&gt;&lt;p&gt;LintCode：&lt;a href=&quot;http://www.lintcode.com/zh-cn/problem/sort-integers/&quot; rel=&quot;external nofollow noopener noreferrer&quot; target=&quot;_blank&quot;&gt;整数排序&lt;/a&gt;&lt;br&gt;
    
    </summary>
    
      <category term="LintCode" scheme="http://hoofoo-whu.github.io/categories/LintCode/"/>
    
    
      <category term="排序" scheme="http://hoofoo-whu.github.io/tags/%E6%8E%92%E5%BA%8F/"/>
    
      <category term="算法" scheme="http://hoofoo-whu.github.io/tags/%E7%AE%97%E6%B3%95/"/>
    
      <category term="C++" scheme="http://hoofoo-whu.github.io/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>删除链表中的元素</title>
    <link href="http://hoofoo-whu.github.io/article/2016-11-14/%E5%88%A0%E9%99%A4%E9%93%BE%E8%A1%A8%E4%B8%AD%E7%9A%84%E5%85%83%E7%B4%A0.html"/>
    <id>http://hoofoo-whu.github.io/article/2016-11-14/删除链表中的元素.html</id>
    <published>2016-11-14T01:53:21.000Z</published>
    <updated>2020-11-29T10:16:15.242Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p><a href="http://www.lintcode.com" rel="external nofollow noopener noreferrer" target="_blank">LintCode</a> 是专注代码面试的在线评测系统，有很多代码题，可以用 <code>Java</code>、<code>C++</code>、<code>Python</code> 在线答题，我觉得还不错，就决定把做一做这些题，然后把题目的实现、优化思路写下来，一来是为了有更深的理解，二来是讨论一下还有没有更好的方法。</p><h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><p>LintCode：<a href="http://www.lintcode.com/zh-cn/problem/remove-linked-list-elements/" rel="external nofollow noopener noreferrer" target="_blank">删除链表中的元素</a><br><a id="more"></a></p><h3 id="描述"><a href="#描述" class="headerlink" title="描述"></a>描述</h3><p>删除链表中等于给定值 <code>val</code> 的所有节点。</p><h3 id="样例"><a href="#样例" class="headerlink" title="样例"></a>样例</h3><p>给出链表 <code>1-&gt;2-&gt;3-&gt;3-&gt;4-&gt;5-&gt;3</code> 和 val = <code>3</code>，你需要返回删除 <code>3</code> 之后的链表： <code>1-&gt;2-&gt;4-&gt;5</code> 。</p><h3 id="链表的数据结构"><a href="#链表的数据结构" class="headerlink" title="链表的数据结构"></a>链表的数据结构</h3> <figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">ListNode</span> &#123;</span></span><br><span class="line">    <span class="keyword">int</span> val;</span><br><span class="line">    ListNode *next;</span><br><span class="line">    ListNode(<span class="keyword">int</span> x) : val(x), next(<span class="literal">NULL</span>) &#123;&#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="实现-C"><a href="#实现-C" class="headerlink" title="实现 - C++"></a>实现 - C++</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">ListNode *<span class="title">removeElements</span><span class="params">(ListNode *head, <span class="keyword">int</span> val)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 21ms</span></span><br><span class="line">        ListNode *prev = <span class="literal">NULL</span>;</span><br><span class="line">        ListNode *p = head;</span><br><span class="line">        ListNode *buffer;</span><br><span class="line">        <span class="keyword">while</span> (p != <span class="literal">NULL</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (p-&gt;val == val) &#123;</span><br><span class="line">                <span class="keyword">if</span> (prev != <span class="literal">NULL</span>)</span><br><span class="line">                    prev-&gt;next = p-&gt;next;</span><br><span class="line">                <span class="keyword">else</span></span><br><span class="line">                    head = p-&gt;next;</span><br><span class="line">                buffer = p;</span><br><span class="line">                p = p-&gt;next;</span><br><span class="line">                <span class="keyword">delete</span> buffer;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                prev = p;</span><br><span class="line">                p = p-&gt;next;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> head;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>简单题不需要太多分析，注意几个细节就可以：</p><ul><li>返回时要返回头指针，所以要使用另一个指针遍历。</li><li>删除节点不能只是跳过，<strong>一定</strong> 要用 <code>delete</code> 释放内存。</li><li>删除头节点时，头指针会改变，返回值 <strong>一定</strong> 要改成新的头指针。</li><li>删除尾节点时，<strong>必须</strong> 将前一个节点的 <code>next</code> 置为 <code>NULL</code> 。如果只是将尾节点 <code>delete</code> 并置为 <code>NULL</code> ，那么前一个节点的 <code>next</code> 就成了一个 <code>野指针</code> 。</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;http://www.lintcode.com&quot; rel=&quot;external nofollow noopener noreferrer&quot; target=&quot;_blank&quot;&gt;LintCode&lt;/a&gt; 是专注代码面试的在线评测系统，有很多代码题，可以用 &lt;code&gt;Java&lt;/code&gt;、&lt;code&gt;C++&lt;/code&gt;、&lt;code&gt;Python&lt;/code&gt; 在线答题，我觉得还不错，就决定把做一做这些题，然后把题目的实现、优化思路写下来，一来是为了有更深的理解，二来是讨论一下还有没有更好的方法。&lt;/p&gt;
&lt;h2 id=&quot;问题&quot;&gt;&lt;a href=&quot;#问题&quot; class=&quot;headerlink&quot; title=&quot;问题&quot;&gt;&lt;/a&gt;问题&lt;/h2&gt;&lt;p&gt;LintCode：&lt;a href=&quot;http://www.lintcode.com/zh-cn/problem/remove-linked-list-elements/&quot; rel=&quot;external nofollow noopener noreferrer&quot; target=&quot;_blank&quot;&gt;删除链表中的元素&lt;/a&gt;&lt;br&gt;
    
    </summary>
    
      <category term="LintCode" scheme="http://hoofoo-whu.github.io/categories/LintCode/"/>
    
    
      <category term="算法" scheme="http://hoofoo-whu.github.io/tags/%E7%AE%97%E6%B3%95/"/>
    
      <category term="C++" scheme="http://hoofoo-whu.github.io/tags/C/"/>
    
      <category term="链表" scheme="http://hoofoo-whu.github.io/tags/%E9%93%BE%E8%A1%A8/"/>
    
      <category term="数据结构" scheme="http://hoofoo-whu.github.io/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
  </entry>
  
  <entry>
    <title>为Next集成Mob分享组件</title>
    <link href="http://hoofoo-whu.github.io/article/2016-11-12/%E4%B8%BANext%E9%9B%86%E6%88%90Mob%E5%88%86%E4%BA%AB%E7%BB%84%E4%BB%B6.html"/>
    <id>http://hoofoo-whu.github.io/article/2016-11-12/为Next集成Mob分享组件.html</id>
    <published>2016-11-12T02:32:00.000Z</published>
    <updated>2020-11-29T10:16:15.242Z</updated>
    
    <content type="html"><![CDATA[<p>博客开通以来，最让我不满意的地方就是社会化分享组件，因为 <code>Next</code> 内置的几个都不是很好用，唯一让我满意的 <code>addthis</code> 对中文又不友好而且速度慢，其他的尽管已经尽力的去修改不满意的地方，不支持 <code>@2x</code> 尺寸图标的问题还是不好解决，因为实在是不好找到成套的合适图标，自己绘制又嫌麻烦，所以就一直搁置着这个问题。不过很多事情都是机缘巧合的，不经意间就发现了 <a href="http://www.mob.com" rel="external nofollow noopener noreferrer" target="_blank">Mob</a> 的分享插件，质量高出其他的不少，下面就分享一下我在 <code>Next</code> 主题配置和美化 <a href="http://www.mob.com" rel="external nofollow noopener noreferrer" target="_blank">Mob</a> 分享插件的过程。<br><a id="more"></a></p><h2 id="配置插件"><a href="#配置插件" class="headerlink" title="配置插件"></a>配置插件</h2><p>配置 <a href="http://www.mob.com" rel="external nofollow noopener noreferrer" target="_blank">Mob</a> 分享组件非常简单，只需要获取一个 <code>AppKey</code> 然后将 <code>Mob</code> 提供的代码复制到网页中即可，<a href="http://wiki.mob.com/sharesdk-for-web快速集成/" rel="external nofollow noopener noreferrer" target="_blank">文档</a> 也比较详细，具体的插件设置等可以直接在 <a href="http://wiki.mob.com/sharesdk-for-web快速集成/" rel="external nofollow noopener noreferrer" target="_blank">文档</a> 中看。</p><h3 id="获取-AppKey"><a href="#获取-AppKey" class="headerlink" title="获取 AppKey"></a>获取 AppKey</h3><ul><li>在 <a href="http://www.mob.com" rel="external nofollow noopener noreferrer" target="_blank">Mob</a> 注册账号后，点击头像进入后台，选择 <code>shareSDK</code> 添加一个 <code>Web应用</code> ，如下图：</li></ul><p><img src="https://image-1256107964.cos.ap-beijing.myqcloud.com/blog/20161112001.png" width="600px" style="margin: 0 auto;">   </p><ul><li>添加后就可以看到自己 <code>AppKey</code> 了，如下图：</li></ul><p><img src="https://image-1256107964.cos.ap-beijing.myqcloud.com/blog/20161112002.png" width="600px" style="margin: 0 auto;"></p><h3 id="在-Next-中配置"><a href="#在-Next-中配置" class="headerlink" title="在 Next 中配置"></a>在 Next 中配置</h3><p><code>Next</code> 采用的是 <code>Swig</code> 模板引擎，模板引擎可以理解为把网页分解成一个个模块，最后再组合到一起，可以起到复用代码、简化工程的作用。我们需要做的就是找到 <code>Next</code> 的分享模块位置，添加上 <code>Mob</code> 的提供的代码就好了。</p><h4 id="修改-Next-配置文件"><a href="#修改-Next-配置文件" class="headerlink" title="修改 Next 配置文件"></a>修改 Next 配置文件</h4><p>考虑到分享模块的可控性，首先需要在 <code>Next</code> 的配置文件中添加 <code>Mob</code> 的相关参数，配置文件路径为：</p><blockquote><p>your-blog-path/themes/next/_config.yml</p></blockquote><p>找到配置文件中分享模块部分：</p> <figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Baidu Share</span></span><br><span class="line"><span class="comment"># Available value:</span></span><br><span class="line"><span class="comment">#    button | slide</span></span><br><span class="line"><span class="comment"># baidushare:</span></span><br><span class="line"><span class="comment">##  type: button </span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Share</span></span><br><span class="line"><span class="comment"># jiathis:</span></span><br><span class="line"><span class="comment"># add_this_id:</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Share</span></span><br><span class="line"><span class="attr">duoshuo_share:</span> <span class="literal">false</span></span><br></pre></td></tr></table></figure><p>将上述代码注释或    改为 <code>false</code> ，在后面添加下面的代码（注意缩进），<code>appkey</code> 修改为之前获取的 <code>appkey</code> 。</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#Share</span></span><br><span class="line"><span class="attr">mob_share:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">appkey:</span> <span class="string">********</span></span><br></pre></td></tr></table></figure><p>现在就可以通过修改配置文件轻松的打开关闭以及修改mob_share的参数了。</p><h4 id="添加-Mob-模块"><a href="#添加-Mob-模块" class="headerlink" title="添加 Mob 模块"></a>添加 Mob 模块</h4><p><code>Next</code> 中的分享模块都存在下面的路径中：</p><blockquote><p>your-blog-path/themes/next/layout/_partials/share/</p></blockquote><p>在其中新建名为 <code>mob_share.swig</code> 的文件，内容为：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--MOB SHARE BEGIN--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"-mob-share-ui-button -mob-share-open"</span>&gt;</span>分享<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"-mob-share-ui"</span> <span class="attr">style</span>=<span class="string">"display: none"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">"-mob-share-list"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"-mob-share-weibo"</span>&gt;</span><span class="tag">&lt;<span class="name">p</span>&gt;</span>新浪微博<span class="tag">&lt;/<span class="name">p</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"-mob-share-weixin"</span>&gt;</span><span class="tag">&lt;<span class="name">p</span>&gt;</span>微信<span class="tag">&lt;/<span class="name">p</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"-mob-share-qzone"</span>&gt;</span><span class="tag">&lt;<span class="name">p</span>&gt;</span>QQ空间<span class="tag">&lt;/<span class="name">p</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"-mob-share-qq"</span>&gt;</span><span class="tag">&lt;<span class="name">p</span>&gt;</span>QQ好友<span class="tag">&lt;/<span class="name">p</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"-mob-share-tencentweibo"</span>&gt;</span><span class="tag">&lt;<span class="name">p</span>&gt;</span>腾讯微博<span class="tag">&lt;/<span class="name">p</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"-mob-share-renren"</span>&gt;</span><span class="tag">&lt;<span class="name">p</span>&gt;</span>人人网<span class="tag">&lt;/<span class="name">p</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"-mob-share-kaixin"</span>&gt;</span><span class="tag">&lt;<span class="name">p</span>&gt;</span>开心网<span class="tag">&lt;/<span class="name">p</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"-mob-share-douban"</span>&gt;</span><span class="tag">&lt;<span class="name">p</span>&gt;</span>豆瓣<span class="tag">&lt;/<span class="name">p</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"-mob-share-youdao"</span>&gt;</span><span class="tag">&lt;<span class="name">p</span>&gt;</span>有道云笔记<span class="tag">&lt;/<span class="name">p</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"-mob-share-mingdao"</span>&gt;</span><span class="tag">&lt;<span class="name">p</span>&gt;</span>明道<span class="tag">&lt;/<span class="name">p</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"-mob-share-pengyou"</span>&gt;</span><span class="tag">&lt;<span class="name">p</span>&gt;</span>朋友网<span class="tag">&lt;/<span class="name">p</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"-mob-share-facebook"</span>&gt;</span><span class="tag">&lt;<span class="name">p</span>&gt;</span>Facebook<span class="tag">&lt;/<span class="name">p</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"-mob-share-twitter"</span>&gt;</span><span class="tag">&lt;<span class="name">p</span>&gt;</span>Twitter<span class="tag">&lt;/<span class="name">p</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"-mob-share-pocket"</span>&gt;</span><span class="tag">&lt;<span class="name">p</span>&gt;</span>Pocket<span class="tag">&lt;/<span class="name">p</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"-mob-share-google"</span>&gt;</span><span class="tag">&lt;<span class="name">p</span>&gt;</span>Google+<span class="tag">&lt;/<span class="name">p</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"-mob-share-tumblr"</span>&gt;</span><span class="tag">&lt;<span class="name">p</span>&gt;</span>Tumblr<span class="tag">&lt;/<span class="name">p</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"-mob-share-instapaper"</span>&gt;</span><span class="tag">&lt;<span class="name">p</span>&gt;</span>Instapaper<span class="tag">&lt;/<span class="name">p</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"-mob-share-linkedin"</span>&gt;</span><span class="tag">&lt;<span class="name">p</span>&gt;</span>Linkedin<span class="tag">&lt;/<span class="name">p</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"-mob-share-close"</span>&gt;</span>取消<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"-mob-share-ui-bg"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">id</span>=<span class="string">"-mob-share"</span> <span class="attr">src</span>=<span class="string">"http://f1.webshare.mob.com/code/mob-share.js?appkey=&#123;&#123;theme.mob_share.appkey&#125;&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--MOB SHARE END--&gt;</span></span><br></pre></td></tr></table></figure><p>上述代码包括了 <code>Mob</code> 支持的所有社交软件，根据需要自行删除或修改顺序，当然也可以添加其他想要添加的东西。</p><h4 id="添加引用"><a href="#添加引用" class="headerlink" title="添加引用"></a>添加引用</h4><p>现在只是声明了模块，使其生效需要在文章模块中引入，打开文章模块：</p><blockquote><p> your-blog-path/themes/next/layout/post.swig</p></blockquote><p>修改如下部分：</p><ul><li><p>修改前</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&#123;% <span class="keyword">if</span> theme.jiathis %&#125;</span><br><span class="line">  &#123;% <span class="keyword">include</span> <span class="string">'_partials/share/jiathis.swig'</span> %&#125;</span><br><span class="line">&#123;% <span class="keyword">elseif</span> theme.baidushare %&#125;</span><br><span class="line">  &#123;% <span class="keyword">include</span> <span class="string">'_partials/share/baidushare.swig'</span> %&#125;</span><br><span class="line">&#123;% <span class="keyword">elseif</span> theme.add_this_id %&#125;</span><br><span class="line">  &#123;% <span class="keyword">include</span> <span class="string">'_partials/share/add-this.swig'</span> %&#125;</span><br><span class="line">&#123;% <span class="keyword">elseif</span> theme.duoshuo_shortname <span class="keyword">and</span> theme.duoshuo_share %&#125;</span><br><span class="line">  &#123;% <span class="keyword">include</span> <span class="string">'_partials/share/duoshuo_share.swig'</span> %&#125;</span><br><span class="line">&#123;% <span class="keyword">endif</span> %&#125;</span><br></pre></td></tr></table></figure></li><li><p>修改后</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&#123;% <span class="keyword">if</span> theme.jiathis %&#125;</span><br><span class="line">  &#123;% <span class="keyword">include</span> <span class="string">'_partials/share/jiathis.swig'</span> %&#125;</span><br><span class="line">&#123;% <span class="keyword">elseif</span> theme.baidushare %&#125;</span><br><span class="line">  &#123;% <span class="keyword">include</span> <span class="string">'_partials/share/baidushare.swig'</span> %&#125;</span><br><span class="line">&#123;% <span class="keyword">elseif</span> theme.add_this_id %&#125;</span><br><span class="line">  &#123;% <span class="keyword">include</span> <span class="string">'_partials/share/add-this.swig'</span> %&#125;</span><br><span class="line">&#123;% <span class="keyword">elseif</span> theme.duoshuo_shortname <span class="keyword">and</span> theme.duoshuo_share %&#125;</span><br><span class="line">  &#123;% <span class="keyword">include</span> <span class="string">'_partials/share/duoshuo_share.swig'</span> %&#125;</span><br><span class="line">&#123;% <span class="keyword">elseif</span> theme.mob_share.enable %&#125;</span><br><span class="line">  &#123;% <span class="keyword">include</span> <span class="string">'_partials/share/mob_share.swig'</span> %&#125;</span><br><span class="line">&#123;% <span class="keyword">endif</span> %&#125;</span><br></pre></td></tr></table></figure></li></ul><p>现在，重新生成发布博客 <code>Mob</code> 分享插件就出现在文章后面了。</p><h3 id="美化"><a href="#美化" class="headerlink" title="美化"></a>美化</h3><p>经过上述配置，插件应该已经可以跑起来了，但是还是有一些细节与 <code>Next</code> 不搭配，有前端经验的人可以试着修改成自己喜欢的外观。</p><h4 id="添加-Mob-样式文件"><a href="#添加-Mob-样式文件" class="headerlink" title="添加 Mob 样式文件"></a>添加 Mob 样式文件</h4><p><code>Next</code> 样式使用的 <code>Stylus</code> 进行预处理，可以算是扩展版的 <code>CSS</code> ，很容易上手。<br>在下面目录中添加 <code>mob_share.styl</code> 样式文件。</p><blockquote><p>your-blog-path/themes/next/source/css/_common/components/third-party/</p></blockquote><h4 id="添加引用-1"><a href="#添加引用-1" class="headerlink" title="添加引用"></a>添加引用</h4><p>在同一目录下的 <code>third-party.styl</code> 中添加：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">@import</span> <span class="string">"mob_share"</span>;</span><br></pre></td></tr></table></figure><p>现在就可以在 <code>mob_share.styl</code> 中愉快的写想要的样式了。<br>通过浏览器 <code>审查元素</code> 找到需要修改的 <code>class</code> 把想要的写在样式文件中就好了。</p><h3 id="脚本控制"><a href="#脚本控制" class="headerlink" title="脚本控制"></a>脚本控制</h3><h4 id="添加-Mob-脚本文件"><a href="#添加-Mob-脚本文件" class="headerlink" title="添加 Mob 脚本文件"></a>添加 Mob 脚本文件</h4><p>毕竟 <code>CSS3</code> 能做的有限，为了完善插件，加入 <code>JavaScript</code> 就能更加深度的定制了。<br><code>Next</code> 第三方插件的 <code>JavaScript</code> 存在下面的路径里。</p><blockquote><p>your-blog-path/themes/next/layout/_scripts/third-party/</p></blockquote><p>在其中添加新文件 <code>mob_share.swig</code> ，内容为：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;% <span class="keyword">if</span> theme.mob_share.enable %&#125;</span><br><span class="line">&lt;script type=<span class="string">"text/javascript"</span>&gt;</span><br><span class="line"><span class="comment">//enter your code</span></span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&#123;% <span class="keyword">endif</span> %&#125;</span><br></pre></td></tr></table></figure><h4 id="添加引用-2"><a href="#添加引用-2" class="headerlink" title="添加引用"></a>添加引用</h4><p>打开 <code>_layout</code> 文件，路径为：</p><blockquote><p>your-blog-path/themes/next/layout/_layout.swig</p></blockquote><p>在 <code>body</code> 的最后添加下面的代码来引入 <code>mob_share.swig</code>。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% <span class="keyword">include</span> <span class="string">'_scripts/third-party/mob_share.swig'</span> %&#125;</span><br></pre></td></tr></table></figure><p>这样就可以在 <code>mob_share.swig</code> 愉快地写各种事件控制插件了。</p><h2 id="代码分享"><a href="#代码分享" class="headerlink" title="代码分享"></a>代码分享</h2><p>由于修改比较多就不细说了，拿出本站现在的 <code>Mob</code> 模块的代码作为参考。</p><h3 id="模块部分"><a href="#模块部分" class="headerlink" title="模块部分"></a>模块部分</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--MOB SHARE BEGIN--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"-hoofoo-share-title"</span>&gt;</span>分享到：<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"-hoofoo-share-buttons"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"-mob-share-weibo -hoofoo-share-weibo -hoofoo-share-ui-button"</span>&gt;</span><span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">"fa fa-weibo"</span> <span class="attr">aria-hidden</span>=<span class="string">"true"</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"-mob-share-weixin -hoofoo-share-weixin -hoofoo-share-ui-button"</span>&gt;</span><span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">"fa fa-weixin"</span> <span class="attr">aria-hidden</span>=<span class="string">"true"</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"-mob-share-twitter -hoofoo-share-twitter -hoofoo-share-ui-button"</span>&gt;</span><span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">"fa fa-twitter"</span> <span class="attr">aria-hidden</span>=<span class="string">"true"</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"-hoofoo-share-more -hoofoo-share-ui-button -mob-share-open"</span>&gt;</span><span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">"fa fa-ellipsis-h"</span> <span class="attr">aria-hidden</span>=<span class="string">"true"</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"-mob-share-ui"</span> <span class="attr">style</span>=<span class="string">"display: none"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">"-mob-share-list"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"-mob-share-weibo"</span>&gt;</span><span class="tag">&lt;<span class="name">p</span>&gt;</span>新浪微博<span class="tag">&lt;/<span class="name">p</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"-mob-share-weixin"</span>&gt;</span><span class="tag">&lt;<span class="name">p</span>&gt;</span>微信<span class="tag">&lt;/<span class="name">p</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"-mob-share-qzone"</span>&gt;</span><span class="tag">&lt;<span class="name">p</span>&gt;</span>QQ空间<span class="tag">&lt;/<span class="name">p</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"-mob-share-qq"</span>&gt;</span><span class="tag">&lt;<span class="name">p</span>&gt;</span>QQ好友<span class="tag">&lt;/<span class="name">p</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"-mob-share-tencentweibo"</span>&gt;</span><span class="tag">&lt;<span class="name">p</span>&gt;</span>腾讯微博<span class="tag">&lt;/<span class="name">p</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"-mob-share-renren"</span>&gt;</span><span class="tag">&lt;<span class="name">p</span>&gt;</span>人人网<span class="tag">&lt;/<span class="name">p</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"-mob-share-kaixin"</span>&gt;</span><span class="tag">&lt;<span class="name">p</span>&gt;</span>开心网<span class="tag">&lt;/<span class="name">p</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"-mob-share-douban"</span>&gt;</span><span class="tag">&lt;<span class="name">p</span>&gt;</span>豆瓣<span class="tag">&lt;/<span class="name">p</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"-mob-share-youdao"</span>&gt;</span><span class="tag">&lt;<span class="name">p</span>&gt;</span>有道云笔记<span class="tag">&lt;/<span class="name">p</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"-mob-share-mingdao"</span>&gt;</span><span class="tag">&lt;<span class="name">p</span>&gt;</span>明道<span class="tag">&lt;/<span class="name">p</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"-mob-share-pengyou"</span>&gt;</span><span class="tag">&lt;<span class="name">p</span>&gt;</span>朋友网<span class="tag">&lt;/<span class="name">p</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"-mob-share-facebook"</span>&gt;</span><span class="tag">&lt;<span class="name">p</span>&gt;</span>Facebook<span class="tag">&lt;/<span class="name">p</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"-mob-share-twitter"</span>&gt;</span><span class="tag">&lt;<span class="name">p</span>&gt;</span>Twitter<span class="tag">&lt;/<span class="name">p</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"-mob-share-pocket"</span>&gt;</span><span class="tag">&lt;<span class="name">p</span>&gt;</span>Pocket<span class="tag">&lt;/<span class="name">p</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"-mob-share-google"</span>&gt;</span><span class="tag">&lt;<span class="name">p</span>&gt;</span>Google+<span class="tag">&lt;/<span class="name">p</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"-mob-share-tumblr"</span>&gt;</span><span class="tag">&lt;<span class="name">p</span>&gt;</span>Tumblr<span class="tag">&lt;/<span class="name">p</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"-mob-share-instapaper"</span>&gt;</span><span class="tag">&lt;<span class="name">p</span>&gt;</span>Instapaper<span class="tag">&lt;/<span class="name">p</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"-mob-share-linkedin"</span>&gt;</span><span class="tag">&lt;<span class="name">p</span>&gt;</span>Linkedin<span class="tag">&lt;/<span class="name">p</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"-mob-share-close"</span>&gt;</span>取消<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"-mob-share-ui-bg"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">id</span>=<span class="string">"-mob-share"</span> <span class="attr">src</span>=<span class="string">"http://f1.webshare.mob.com/code/mob-share.js?appkey=&#123;&#123;theme.mob_share.appkey&#125;&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--MOB SHARE END--&gt;</span></span><br></pre></td></tr></table></figure><h3 id="样式部分"><a href="#样式部分" class="headerlink" title="样式部分"></a>样式部分</h3><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><span class="line">.-hoofoo-share-buttons&#123;</span><br><span class="line"><span class="attribute">display</span>: inline-block;</span><br><span class="line">&#125;</span><br><span class="line">.-hoofoo-share-title&#123;</span><br><span class="line"><span class="attribute">font-size</span>: <span class="number">1.1em</span>;</span><br><span class="line"><span class="attribute">font-weight</span>: <span class="number">200</span>;</span><br><span class="line">&#125;</span><br><span class="line">.-hoofoo-share-ui-button&#123;</span><br><span class="line"><span class="attribute">cursor</span>: pointer;</span><br><span class="line"><span class="attribute">background-color</span>: <span class="number">#555</span>;</span><br><span class="line"><span class="attribute">color</span>: <span class="number">#fff</span>;</span><br><span class="line"><span class="attribute">font-size</span>: <span class="number">24px</span>;</span><br><span class="line"><span class="attribute">line-height</span>: <span class="number">40px</span>;</span><br><span class="line"><span class="attribute">width</span>: <span class="number">40px</span>;</span><br><span class="line"><span class="attribute">height</span>: <span class="number">40px</span>;</span><br><span class="line"><span class="attribute">margin</span>: <span class="number">10px</span>;</span><br><span class="line"><span class="attribute">border-radius</span>: <span class="number">25px</span>;</span><br><span class="line"><span class="attribute">float</span>: left;</span><br><span class="line"><span class="attribute">transition</span>: background <span class="number">0.4s</span>;</span><br><span class="line">-moz-<span class="attribute">transition</span>: background <span class="number">0.4s</span>;<span class="comment">/* Firefox 4 */</span></span><br><span class="line">-webkit-<span class="attribute">transition</span>: background <span class="number">0.4s</span>;<span class="comment">/* Safari 和 Chrome */</span></span><br><span class="line">-o-<span class="attribute">transition</span>: background <span class="number">0.4s</span>;</span><br><span class="line">&#125;</span><br><span class="line">.-hoofoo-share-weibo:hover&#123;</span><br><span class="line"><span class="attribute">background-color</span>: <span class="number">#cf3f41</span>;</span><br><span class="line">&#125;</span><br><span class="line">.-hoofoo-share-weixin:hover&#123;</span><br><span class="line"><span class="attribute">background-color</span>: <span class="number">#18a01a</span>;</span><br><span class="line">&#125;</span><br><span class="line">.-hoofoo-share-twitter:hover&#123;</span><br><span class="line"><span class="attribute">background-color</span>: <span class="number">#2ab3e6</span>;</span><br><span class="line">&#125;</span><br><span class="line">.-hoofoo-share-more:hover&#123;</span><br><span class="line"><span class="attribute">background-color</span>: <span class="number">#777</span>;</span><br><span class="line">&#125;</span><br><span class="line">.-mob-share-weixin-qrcode-<span class="attribute">content</span>&#123;</span><br><span class="line"><span class="attribute">border-radius</span>: <span class="number">4px</span>;</span><br><span class="line">-webkit-<span class="attribute">box-shadow</span>: <span class="number">0</span> <span class="number">10px</span> <span class="number">25px</span> rgba(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0.5</span>);</span><br><span class="line">-moz-<span class="attribute">box-shadow</span>: <span class="number">0</span> <span class="number">10px</span> <span class="number">25px</span> rgba(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0.5</span>);</span><br><span class="line">-o-<span class="attribute">box-shadow</span>: <span class="number">0</span> <span class="number">10px</span> <span class="number">25px</span> rgba(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0.5</span>);</span><br><span class="line"><span class="attribute">box-shadow</span>: <span class="number">0</span> <span class="number">10px</span> <span class="number">25px</span> rgba(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0.5</span>);</span><br><span class="line">&#125;</span><br><span class="line">.-mob-share-weixin-qrcode&#123;</span><br><span class="line"><span class="attribute">margin</span>: <span class="number">5%</span> !important;</span><br><span class="line"><span class="attribute">width</span>: <span class="number">90%</span> !important;</span><br><span class="line"><span class="attribute">height</span>: auto !important;</span><br><span class="line">&#125;</span><br><span class="line">.-mob-share-weixin-qrcode-close &#123;</span><br><span class="line"><span class="attribute">background-image</span>: url(<span class="string">'/lib/fancybox/source/fancybox_sprite.png'</span>) !important;<span class="comment">//因为兼容问题把vendor改成了lib，根据自己的路径修改</span></span><br><span class="line">&#125;</span><br><span class="line">.-mob-share-weixin-qrcode-close &#123;</span><br><span class="line"><span class="attribute">overflow</span>: hidden;</span><br><span class="line"><span class="attribute">line-height</span>: <span class="number">100px</span> !important;</span><br><span class="line"><span class="attribute">position</span>: absolute !important;</span><br><span class="line"><span class="attribute">top</span>: -<span class="number">18px</span> !important;</span><br><span class="line"><span class="attribute">right</span>: -<span class="number">18px</span> !important;</span><br><span class="line"><span class="attribute">width</span>: <span class="number">36px</span> !important;</span><br><span class="line"><span class="attribute">height</span>: <span class="number">36px</span> !important;</span><br><span class="line"><span class="attribute">cursor</span>: pointer !important;</span><br><span class="line"><span class="attribute">z-index</span>: <span class="number">8040</span> !important;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*Retina graphics!*/</span></span><br><span class="line">@media only screen and (-webkit-min-device-pixel-ratio: <span class="number">1.5</span>),</span><br><span class="line">   only screen and (min--moz-device-pixel-ratio: <span class="number">1.5</span>),</span><br><span class="line">   only screen and (min-device-pixel-ratio: <span class="number">1.5</span>)&#123;</span><br><span class="line">.-mob-share-weixin-qrcode-close &#123;</span><br><span class="line"><span class="attribute">background-image</span>: url(<span class="string">'/lib/fancybox/source/fancybox_sprite@2x.png'</span>) !important;<span class="comment">//因为兼容问题把vendor改成了lib，根据自己的路径修改</span></span><br><span class="line"><span class="attribute">background-size</span>: <span class="number">44px</span> <span class="number">152px</span> !important; <span class="comment">/*The size of the normal image, half the size of the hi-res image*/</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">.-mob-share-close&#123;</span><br><span class="line"><span class="attribute">height</span>: <span class="number">4em</span> !important;</span><br><span class="line"><span class="attribute">font-size</span>: <span class="number">0.8em</span> !important;</span><br><span class="line"><span class="attribute">line-height</span>: <span class="number">4em</span> !important;</span><br><span class="line"><span class="attribute">background</span>: <span class="number">#555</span> !important;</span><br><span class="line"><span class="attribute">color</span>: <span class="number">#fff</span> !important;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="脚本部分"><a href="#脚本部分" class="headerlink" title="脚本部分"></a>脚本部分</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&#123;% <span class="keyword">if</span> theme.mob_share.enable %&#125;</span><br><span class="line">&lt;script type=<span class="string">"text/javascript"</span>&gt;</span><br><span class="line"><span class="comment">//微信二维码点击背景关闭</span></span><br><span class="line">$(<span class="string">'body'</span>).delegate(<span class="string">'.-mob-share-weixin-qrcode-bg'</span>,<span class="string">'click'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"> $(<span class="string">".-mob-share-weixin-qrcode-close"</span>).trigger(<span class="string">"click"</span>);</span><br><span class="line">&#125;); </span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br><span class="line"><span class="regexp">&#123;% endif %&#125;</span></span><br></pre></td></tr></table></figure><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>对自己过于复杂的事情不妨等一等，也许就不经意间遇到了解决的办法，当然可能一直都达不到自己的要求，但是也是在趋近于完善的。当把遇到的都研究一遍之后，就可以吸取百家之长，复杂的事情也许就不会那么复杂了。另求网页调用手机各种 <code>APP</code> 的接口，如果能实现的话就总结起来开一个开源项目。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;博客开通以来，最让我不满意的地方就是社会化分享组件，因为 &lt;code&gt;Next&lt;/code&gt; 内置的几个都不是很好用，唯一让我满意的 &lt;code&gt;addthis&lt;/code&gt; 对中文又不友好而且速度慢，其他的尽管已经尽力的去修改不满意的地方，不支持 &lt;code&gt;@2x&lt;/code&gt; 尺寸图标的问题还是不好解决，因为实在是不好找到成套的合适图标，自己绘制又嫌麻烦，所以就一直搁置着这个问题。不过很多事情都是机缘巧合的，不经意间就发现了 &lt;a href=&quot;http://www.mob.com&quot; rel=&quot;external nofollow noopener noreferrer&quot; target=&quot;_blank&quot;&gt;Mob&lt;/a&gt; 的分享插件，质量高出其他的不少，下面就分享一下我在 &lt;code&gt;Next&lt;/code&gt; 主题配置和美化 &lt;a href=&quot;http://www.mob.com&quot; rel=&quot;external nofollow noopener noreferrer&quot; target=&quot;_blank&quot;&gt;Mob&lt;/a&gt; 分享插件的过程。&lt;br&gt;
    
    </summary>
    
      <category term="Hexo" scheme="http://hoofoo-whu.github.io/categories/Hexo/"/>
    
    
      <category term="前端" scheme="http://hoofoo-whu.github.io/tags/%E5%89%8D%E7%AB%AF/"/>
    
      <category term="CSS" scheme="http://hoofoo-whu.github.io/tags/CSS/"/>
    
      <category term="JavaScript" scheme="http://hoofoo-whu.github.io/tags/JavaScript/"/>
    
      <category term="Next" scheme="http://hoofoo-whu.github.io/tags/Next/"/>
    
      <category term="Mob" scheme="http://hoofoo-whu.github.io/tags/Mob/"/>
    
      <category term="HTML" scheme="http://hoofoo-whu.github.io/tags/HTML/"/>
    
  </entry>
  
  <entry>
    <title>大楼轮廓实现及优化</title>
    <link href="http://hoofoo-whu.github.io/article/2016-11-07/%E5%A4%A7%E6%A5%BC%E8%BD%AE%E5%BB%93%E5%AE%9E%E7%8E%B0%E5%8F%8A%E4%BC%98%E5%8C%96.html"/>
    <id>http://hoofoo-whu.github.io/article/2016-11-07/大楼轮廓实现及优化.html</id>
    <published>2016-11-07T20:05:22.000Z</published>
    <updated>2020-11-29T10:16:15.242Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p><a href="http://www.lintcode.com" rel="external nofollow noopener noreferrer" target="_blank">LintCode</a> 是专注代码面试的在线评测系统，有很多代码题，可以用 <code>Java</code>、<code>C++</code>、<code>Python</code> 在线答题，我觉得还不错，就决定把做一做这些题，然后把题目的实现、优化思路写下来，一来是为了有更深的理解，二来是讨论一下还有没有更好的方法。</p><h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><p>LintCode：<a href="http://www.lintcode.com/zh-cn/problem/building-outline/" rel="external nofollow noopener noreferrer" target="_blank">大楼轮廓</a> <code>超难</code><br><a id="more"></a></p><h3 id="描述"><a href="#描述" class="headerlink" title="描述"></a>描述</h3><p>水平面上有 $N$ 座大楼，每座大楼都是矩阵的形状，可以用三个数字表示 <code>(start, end, height)</code> ，分别代表其在 $x$ 轴上的起点，终点和高度。大楼之间从远处看可能会重叠，求出 $N$ 座大楼的外轮廓线。<br>外轮廓线的表示方法为若干三元组，每个三元组包含三个数字 <code>(start, end, height)</code> ，代表这段轮廓的起始位置，终止位置和高度。</p><h3 id="样例"><a href="#样例" class="headerlink" title="样例"></a>样例</h3><p>给出三座大楼：</p><blockquote><p>[<br>　[1, 3, 3],<br>　[2, 4, 4],<br>　[5, 6, 1]<br>]</p></blockquote><p>外轮廓线为：</p><blockquote><p>[<br>　[1, 2, 3],<br>　[2, 4, 4],<br>　[5, 6, 1]<br>]</p></blockquote><h2 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h2><p>一开始看到这道题难度是超难我是不相信的，因为看起来很容易找到思路，然而测试用数据却非常大，很难不超时完成，这让我非常感兴趣，用了很久来做这道题，以下是我做这道题的思路，由于用语言描述过于复杂，所以采用动图的方式来描述绘制过程（手机浏览器可能会有些问题，建议用电脑看），拟定输入数据为：</p><blockquote><p>[<br>　[7,9,5],<br>　[1,3,3],<br>　[2,5,4],<br>　[12,13,2],<br>　[4,10,2],<br>　[11,14,4]<br>]</p></blockquote><h3 id="无序逐个插入"><a href="#无序逐个插入" class="headerlink" title="无序逐个插入"></a>无序逐个插入</h3><h4 id="问题分析"><a href="#问题分析" class="headerlink" title="问题分析"></a>问题分析</h4><p>大楼的数组并不是有序的，所以首先想到了逐个插入，再根据包含、相交、被包含等不同的情况来绘制逐个绘制轮廓，如下图：</p><p><img src="https://image-1256107964.cos.ap-beijing.myqcloud.com/blog/20161107001.gif" class="noborder-img" width="700" height"300"></p><h4 id="实现-C"><a href="#实现-C" class="headerlink" title="实现 - C++"></a>实现 - C++</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; &gt; <span class="title">buildingOutline</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; &gt; &amp;buildings)</span> </span>&#123;</span><br><span class="line">        <span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt; result;</span><br><span class="line">        <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; buffer1;</span><br><span class="line">        <span class="keyword">int</span> size = buildings.size();</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; size; j++)&#123;</span><br><span class="line">            buffer1 = buildings[j];</span><br><span class="line">            <span class="keyword">if</span>(result.size() == <span class="number">0</span>)&#123;</span><br><span class="line">                result.push_back(buffer1);</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(result.back()[<span class="number">1</span>] &lt; buffer1[<span class="number">0</span>])&#123;</span><br><span class="line">                result.push_back(buffer1);</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(result.front()[<span class="number">0</span>] &gt; buffer1[<span class="number">1</span>])&#123;</span><br><span class="line">                result.insert(result.begin(), buffer1);</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; result.size(); i++)&#123;</span><br><span class="line">                <span class="keyword">if</span>(i &gt; <span class="number">0</span>)&#123;</span><br><span class="line">                    <span class="keyword">if</span>(result[i <span class="number">-1</span>][<span class="number">1</span>] != result[i][<span class="number">0</span>])&#123;</span><br><span class="line">                        <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; buffer2;</span><br><span class="line">                        buffer2.push_back(result[i - <span class="number">1</span>][<span class="number">1</span>]);</span><br><span class="line">                        buffer2.push_back(result[i][<span class="number">0</span>]);</span><br><span class="line">                        buffer2.push_back(buffer1[<span class="number">2</span>]);</span><br><span class="line">                        result.insert(result.begin() + i, buffer2);</span><br><span class="line">                        <span class="keyword">continue</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span>(buffer1[<span class="number">2</span>] &gt; result[i][<span class="number">2</span>])&#123;</span><br><span class="line">                    <span class="keyword">if</span>(result[i][<span class="number">1</span>] &lt; buffer1[<span class="number">0</span>])&#123;</span><br><span class="line">                        <span class="keyword">continue</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">if</span>(result[i][<span class="number">0</span>] &gt; buffer1[<span class="number">1</span>])&#123;</span><br><span class="line">                        <span class="keyword">continue</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">if</span>(buffer1[<span class="number">0</span>] &lt;= result[i][<span class="number">0</span>] </span><br><span class="line">                        &amp;&amp; buffer1[<span class="number">1</span>] &gt;= result[i][<span class="number">1</span>])&#123;</span><br><span class="line">                        result[i][<span class="number">2</span>] = buffer1[<span class="number">2</span>];</span><br><span class="line">                    &#125;<span class="keyword">else</span> <span class="keyword">if</span>(buffer1[<span class="number">0</span>] &gt; result[i][<span class="number">0</span>] </span><br><span class="line">                        &amp;&amp; buffer1[<span class="number">1</span>] &gt;= result[i][<span class="number">1</span>])&#123;</span><br><span class="line">                        <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; buffer2;</span><br><span class="line">                        buffer2.push_back(buffer1[<span class="number">0</span>]);</span><br><span class="line">                        buffer2.push_back(result[i][<span class="number">1</span>]);</span><br><span class="line">                        buffer2.push_back(buffer1[<span class="number">2</span>]);</span><br><span class="line">                        result[i][<span class="number">1</span>] = buffer1[<span class="number">0</span>];</span><br><span class="line">                        result.insert(result.begin() + i + <span class="number">1</span>, buffer2);</span><br><span class="line">                        i++;</span><br><span class="line">                    &#125;<span class="keyword">else</span> <span class="keyword">if</span>(buffer1[<span class="number">0</span>] &lt;= result[i][<span class="number">0</span>] </span><br><span class="line">                        &amp;&amp; buffer1[<span class="number">1</span>] &lt; result[i][<span class="number">1</span>])&#123;</span><br><span class="line">                        <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; buffer2;</span><br><span class="line">                        buffer2.push_back(result[i][<span class="number">0</span>]);</span><br><span class="line">                        buffer2.push_back(buffer1[<span class="number">1</span>]);</span><br><span class="line">                        buffer2.push_back(buffer1[<span class="number">2</span>]);</span><br><span class="line">                        result[i][<span class="number">0</span>] = buffer1[<span class="number">1</span>];</span><br><span class="line">                        result.insert(result.begin() + i, buffer2);</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    &#125;<span class="keyword">else</span> <span class="keyword">if</span>(buffer1[<span class="number">0</span>] &gt; result[i][<span class="number">0</span>] </span><br><span class="line">                        &amp;&amp; buffer1[<span class="number">1</span>] &lt; result[i][<span class="number">1</span>])&#123;</span><br><span class="line">                        <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; buffer2;</span><br><span class="line">                        buffer2.push_back(result[i][<span class="number">0</span>]);</span><br><span class="line">                        buffer2.push_back(buffer1[<span class="number">0</span>]);</span><br><span class="line">                        buffer2.push_back(result[i][<span class="number">2</span>]);</span><br><span class="line">                        result[i][<span class="number">0</span>] = buffer1[<span class="number">1</span>];</span><br><span class="line">                        result.insert(result.begin() + i, buffer1);</span><br><span class="line">                        result.insert(result.begin() + i, buffer2);</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(result.back()[<span class="number">1</span>] &lt; buffer1[<span class="number">1</span>])&#123;</span><br><span class="line">                <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; buffer2;</span><br><span class="line">                buffer2.push_back(result.back()[<span class="number">1</span>]);</span><br><span class="line">                buffer2.push_back(buffer1[<span class="number">1</span>]);</span><br><span class="line">                buffer2.push_back(buffer1[<span class="number">2</span>]);</span><br><span class="line">                result.push_back(buffer2);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(result.front()[<span class="number">0</span>] &gt; buffer1[<span class="number">0</span>])&#123;</span><br><span class="line">                <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; buffer2;</span><br><span class="line">                buffer2.push_back(buffer1[<span class="number">0</span>]);</span><br><span class="line">                buffer2.push_back(result.front()[<span class="number">0</span>]);</span><br><span class="line">                buffer2.push_back(buffer1[<span class="number">2</span>]);</span><br><span class="line">                result.insert(result.begin(), buffer2);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; result.size(); i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(result[i][<span class="number">0</span>] == result[i][<span class="number">1</span>])&#123;</span><br><span class="line">                result.erase(result.begin() + i);</span><br><span class="line">                i--;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(i != <span class="number">0</span>)&#123;</span><br><span class="line">                <span class="keyword">if</span>(result[i - <span class="number">1</span>][<span class="number">2</span>] == result[i][<span class="number">2</span>] </span><br><span class="line">                    &amp;&amp; result[i - <span class="number">1</span>][<span class="number">1</span>] == result[i][<span class="number">0</span>])&#123;</span><br><span class="line">                    result[i][<span class="number">0</span>] = result[i - <span class="number">1</span>][<span class="number">0</span>];</span><br><span class="line">                    result.erase(result.begin() + i - <span class="number">1</span>);</span><br><span class="line">                    i--;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h4 id="结果分析"><a href="#结果分析" class="headerlink" title="结果分析"></a>结果分析</h4><ul><li>结果：非常慢，代码实际写起来远比想象的要复杂，当新大楼与旧轮廓线相交时，需要分块儿遍历旧轮廓线，效率非常低，<a href="http://www.lintcode.com" rel="external nofollow noopener noreferrer" target="_blank">LintCode</a> 测试数据跑到 $53\%$ 时就超时了。</li><li>分析：当大楼无序插入时，需要考虑情况非常多，不仅代码复杂容易混乱且执行效率低下，所以也未进行进一步的改正便直接放弃。直接考虑排序后再进行逐个插入，以减少需要考虑的情况。</li></ul><h3 id="有序逐个插入"><a href="#有序逐个插入" class="headerlink" title="有序逐个插入"></a>有序逐个插入</h3><h4 id="问题分析-1"><a href="#问题分析-1" class="headerlink" title="问题分析"></a>问题分析</h4><p>由于考虑到无序插入时情况过多且遍历次数过多，导致时间复杂度很高，在数据量大时运行效率过低，所以便打算采用预排序来减少遇到的情况，具体过程如下图：</p><p><img src="https://image-1256107964.cos.ap-beijing.myqcloud.com/blog/20161107002.gif" class="noborder-img" width="700" height"300"></p><h4 id="结果预测"><a href="#结果预测" class="headerlink" title="结果预测"></a>结果预测</h4><p>由于思考这种方法时想到了更高效的方法，所以没有进行代码实现。虽然上图的逻辑看起来比较简单，但是当大量大楼重叠时，需要频繁的修改旧的轮廓，相对于第一种方法来说也只是减少了遍历的次数，但是并不能免于分段遍历旧轮廓，而且判断是否与旧轮廓相交、包括、被包括需要做的对比也比较多。可想而知，此方法也并不能通过测试。</p><h3 id="无序逐个插入-拆分为单位大楼"><a href="#无序逐个插入-拆分为单位大楼" class="headerlink" title="无序逐个插入 - 拆分为单位大楼"></a>无序逐个插入 - 拆分为单位大楼</h3><h4 id="问题分析-2"><a href="#问题分析-2" class="headerlink" title="问题分析"></a>问题分析</h4><p>由于采用 <code>(start, end, height)</code> 三元组的形式存储数据，当无序插入时只能采用遍历判断的方式来分情况讨论，由此导致的逻辑混乱使复杂度很难降低。便想出了将 <code>三元组（[1,4,3]）</code> 转化为<code>若干个连续的单位大楼([1,3],[2,3],[3,3])</code>（因为每个单位大楼跨度都为一，所以 <code>end</code> 可以不需要表示了），这样存储时就可以将每栋楼的 <code>start</code> 作为下标。此时便只需要对比每个单位大楼的高度来决定是否修改轮廓，整体过程与第一种方法一致：</p><p><img src="https://image-1256107964.cos.ap-beijing.myqcloud.com/blog/20161107004.gif" class="noborder-img" width="700" height"300"></p><h4 id="实现-C-1"><a href="#实现-C-1" class="headerlink" title="实现 - C++"></a>实现 - C++</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; &gt; <span class="title">buildingOutline</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; &gt; &amp;buildings)</span> </span>&#123;</span><br><span class="line">        <span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt; result;</span><br><span class="line">        <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; draft;</span><br><span class="line">        <span class="keyword">int</span> dSize = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> bSize = buildings.size();</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; bSize; i++)&#123;</span><br><span class="line">            <span class="comment">//新加大楼超出draft范围则需要扩容</span></span><br><span class="line">            <span class="keyword">int</span> cEnd = buildings[i][<span class="number">1</span>];</span><br><span class="line">            <span class="keyword">if</span>(dSize &lt; cEnd)&#123;</span><br><span class="line">                <span class="keyword">while</span>(dSize &lt; cEnd)&#123;</span><br><span class="line">                    draft.push_back(<span class="number">0</span>);</span><br><span class="line">                    dSize++;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//更新大楼轮廓</span></span><br><span class="line">            <span class="keyword">int</span> cValue = buildings[i][<span class="number">2</span>];</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j = buildings[i][<span class="number">0</span>] - <span class="number">1</span>; j &lt; cEnd - <span class="number">1</span>; j++)&#123;</span><br><span class="line">                <span class="keyword">if</span>(draft[j] &lt; cValue)&#123;</span><br><span class="line">                    draft[j] = cValue;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//将单位大楼模式转为三元组格式</span></span><br><span class="line">        <span class="keyword">int</span> start = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> value = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; dSize; i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(draft[i] != value)&#123;</span><br><span class="line">                <span class="keyword">if</span>(start &lt; i &amp;&amp; value != <span class="number">0</span>)&#123;</span><br><span class="line">                    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; building;</span><br><span class="line">                    building.push_back(start + <span class="number">1</span>);</span><br><span class="line">                    building.push_back(i + <span class="number">1</span>);</span><br><span class="line">                    building.push_back(value);</span><br><span class="line">                    result.push_back(building);</span><br><span class="line">                &#125;</span><br><span class="line">                start = i;</span><br><span class="line">                value = draft[i];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h4 id="结果分析-1"><a href="#结果分析-1" class="headerlink" title="结果分析"></a>结果分析</h4><ul><li>结果：成功将 <a href="http://www.lintcode.com" rel="external nofollow noopener noreferrer" target="_blank">LintCode</a> 测试数据跑到了 $77\%$ 。</li><li>分析：转化思路后，从代码量上来看，逻辑复杂程度大大降低，拆分大楼后坐标按 <code>vector</code> 坐标存储，提高了随机存取的效率，但是由于拆分存储，空间复杂度大大提高。尽管每一步都是简单的大小对比，数据量较大时仍然会消耗大量的时间，这应该也是不能通过 <a href="http://www.lintcode.com" rel="external nofollow noopener noreferrer" target="_blank">LintCode</a> 测试的根本原因。</li></ul><h3 id="有序插入-拆分为左右墙"><a href="#有序插入-拆分为左右墙" class="headerlink" title="有序插入 - 拆分为左右墙"></a>有序插入 - 拆分为左右墙</h3><h4 id="问题分析-3"><a href="#问题分析-3" class="headerlink" title="问题分析"></a>问题分析</h4><p>这种方法解决问题的基本思想就是将每座大楼用 <code>左右两面墙表示([1,3],[4,-3])</code> 替换 <code>三元组表示([1,4,3])</code>，左墙的高度为正，右墙的高度为负，也可以理解为高度的跳跃，因为是从左到右扫描，所以左墙高度升高，右墙高度降低。拆分为墙之后按坐标排序，如果坐标相同则根据高度反向排序，因为优先左墙可以避免同样高且位置相同的两面墙先结束再开始的情况，而且优先更高的墙也可以减少先低墙后高墙是否需要划轮廓的不必要判断。然后从左至右逐个墙面进行扫描，如下图：</p><p><img src="https://image-1256107964.cos.ap-beijing.myqcloud.com/blog/20161107003.gif" class="noborder-img" width="700" height"300"></p><h4 id="实现-C-2"><a href="#实现-C-2" class="headerlink" title="实现 - C++"></a>实现 - C++</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;set&gt;</span></span></span><br><span class="line"><span class="comment">//墙的数据结构</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">JUMP</span>  </span></span><br><span class="line"><span class="class">&#123;</span>  </span><br><span class="line">    <span class="keyword">int</span> index; </span><br><span class="line">    <span class="keyword">int</span> height;  </span><br><span class="line">    JUMP(<span class="keyword">int</span> a, <span class="keyword">int</span> b) : index(a), height(b)&#123;&#125;</span><br><span class="line">    <span class="comment">//操作符&lt;的定义，用于排序</span></span><br><span class="line">    <span class="keyword">bool</span> <span class="keyword">operator</span>&lt; (<span class="keyword">const</span> JUMP &amp;j)  <span class="keyword">const</span>  &#123;</span><br><span class="line">        <span class="keyword">if</span>(index != j.index)&#123;</span><br><span class="line">            <span class="keyword">return</span> index &lt; j.index;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="comment">//相等时由高到底排序</span></span><br><span class="line">            <span class="keyword">return</span> height &gt; j.height;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;; </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; &gt; <span class="title">buildingOutline</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; &gt; &amp;buildings)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//数量提前取出来，避免多次调用浪费时间</span></span><br><span class="line">        <span class="keyword">int</span> numOfBuilding = buildings.size();</span><br><span class="line">        <span class="keyword">int</span> sizeOfJumps = numOfBuilding * <span class="number">2</span>;</span><br><span class="line">        <span class="comment">//拆分为墙存储</span></span><br><span class="line">        <span class="built_in">vector</span>&lt;JUMP&gt; jumps;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; numOfBuilding; i++)&#123;</span><br><span class="line">            jumps.push_back(JUMP(buildings[i][<span class="number">0</span>], buildings[i][<span class="number">2</span>]));</span><br><span class="line">            jumps.push_back(JUMP(buildings[i][<span class="number">1</span>], - buildings[i][<span class="number">2</span>]));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//对墙进行排序</span></span><br><span class="line">        sort(jumps.begin(), jumps.end());</span><br><span class="line">        <span class="comment">//绘制轮廓</span></span><br><span class="line">        <span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt; result;</span><br><span class="line">        <span class="comment">//没有结束的大楼存起来，multiset插入时会自动排序</span></span><br><span class="line">        <span class="built_in">multiset</span>&lt;<span class="keyword">int</span>&gt; current;</span><br><span class="line">        <span class="keyword">int</span> prevJump = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; sizeOfJumps; i++)&#123;</span><br><span class="line">            <span class="comment">//没有没结束的大楼，添加左墙高度，设置线段起点</span></span><br><span class="line">            <span class="keyword">if</span>(current.empty())&#123;</span><br><span class="line">                current.insert(jumps[i].height);</span><br><span class="line">                prevJump = jumps[i].index;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//如果是左墙</span></span><br><span class="line">            <span class="keyword">if</span>(jumps[i].height &gt; <span class="number">0</span>)&#123;</span><br><span class="line">                <span class="comment">//如果高于没结束的最高的大楼，且线段长度大于0</span></span><br><span class="line">                <span class="keyword">if</span>(jumps[i].height &gt; *current.rbegin() </span><br><span class="line">                &amp;&amp; prevJump &lt; jumps[i].index)&#123;</span><br><span class="line">                    <span class="comment">//画线 设置为起点</span></span><br><span class="line">                    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; jump;</span><br><span class="line">                    jump.push_back(prevJump);</span><br><span class="line">                    jump.push_back(jumps[i].index);</span><br><span class="line">                    jump.push_back(*(--current.end()));</span><br><span class="line">                    result.push_back(jump);</span><br><span class="line">                    prevJump = jumps[i].index;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">//添加墙</span></span><br><span class="line">                current.insert(jumps[i].height);</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="comment">//右墙 而且是存起来最高的大楼并且只有一座 线段长度大于0</span></span><br><span class="line">                <span class="keyword">if</span>(jumps[i].height == -*current.rbegin() </span><br><span class="line">                &amp;&amp; current.count(-jumps[i].height) &lt; <span class="number">2</span> </span><br><span class="line">                &amp;&amp; prevJump &lt; jumps[i].index)&#123;</span><br><span class="line">                    <span class="comment">//画线 设置为起点</span></span><br><span class="line">                    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; jump;</span><br><span class="line">                    jump.push_back(prevJump);</span><br><span class="line">                    jump.push_back(jumps[i].index);</span><br><span class="line">                    jump.push_back(*current.rbegin());</span><br><span class="line">                    result.push_back(jump);</span><br><span class="line">                    prevJump = jumps[i].index;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">//大楼结束 删除存储的大楼</span></span><br><span class="line">                current.erase(current.lower_bound(-jumps[i].height));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h4 id="结果分析-2"><a href="#结果分析-2" class="headerlink" title="结果分析"></a>结果分析</h4><ul><li>结果：经测试 <code>C++</code> 最快可以 <code>3326ms</code> 通过 <a href="http://www.lintcode.com" rel="external nofollow noopener noreferrer" target="_blank">LintCode</a> 测试。</li><li>分析：由于判断的条件少，并且一次性绘制轮廓不进行修改，效率很高，经受住了大数据量的考验。</li><li><p>细节：</p><ul><li>遍历前取出次数，避免重复执行影响遍历效率</li><li>数据结构设计有缺陷，左右通过正负判断降低了代码的简洁程度</li><li>这道题数据结构的选择很重要，要说的比较多，后面使用单独一节来说明。</li></ul></li></ul><h4 id="数据结构的选择"><a href="#数据结构的选择" class="headerlink" title="数据结构的选择"></a>数据结构的选择</h4><p>最终作为选择的容器分别为 <code>vector</code> 和 <code>multiset</code>。</p><ul><li>vector：由于 <code>vector</code> 属于顺序容器，内部由 <code>数组</code> 实现，随机存取效率高，尾部插入删除效率高，中间插入删除效率低。</li><li>multiset：与 <code>set</code> 唯一的不同就是可以添加等值元素，都属于关联容器，内部由 <a href="https://en.wikipedia.org/wiki/Red–black_tree" rel="external nofollow noopener noreferrer" target="_blank">红黑树</a> 实现，插入时会自动排序，检索效率高。</li></ul><p>同样是排序，墙的排序由于不需要插入一次取一次，所以选择了 <code>vector</code> ，<code>std::sort()</code> 对 <code>vector</code> 的排序是优化过的快排，效率高于 <a href="https://en.wikipedia.org/wiki/Red–black_tree" rel="external nofollow noopener noreferrer" target="_blank">红黑树</a> 的堆排序。<br>最开始是存数组然后自己写快排排序，然后发现 <code>std::sort()</code> 的排序比手写的要快，所以采用了 <code>vector</code> 搭配 <code>std::sort()</code> 进行墙的存储排序。<br>相对于墙的存储，未结束墙存储使用的 <code>multiset</code>，由于每次插入后都要取一次最大值，<code>multiset</code> 的堆排序作为插入排序的一种，每次插入一个元素都是有序的，相对于快排的一次成型，更适合存储未结束墙的情况。<br>起先是打算用 <code>数组存储</code> + <code>直接插排</code> 的方式，简直是低估了这道题的难度，最终不得不选用 <code>multiset</code>。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>因为写两个语言的代码实在是太浪费时间，所以实现就只使用 <code>C++</code> 了，主要还是看思路。<br>通过对这道题的执着，学到了不少的东西，最重要的是做题的心态，这里要感谢 <a href="http://hoofoo.duoshuo.com/user-url/?user_id=6341847514957742850" rel="external nofollow noopener noreferrer" target="_blank">@Cicy_Lee</a> 在我不知道难度的情况提问我这道题，如果当时看到这道题难度是超难的话，可能都不会去感兴趣甚至打开，何况是做出来。所以遇到问题还是不要停留在思考一下的程度上，尽量去做一下，因为做起来可能远比想的复杂。<br>另外，描述很多东西总是免不了用动画来表示， 但是 <code>After Effect</code> 画动图效率忒低了，却又找不到很好的图形化 <code>HTML5</code> 动画模块的制作工具（是模块不是网页），如果谁有很好的工具，求推荐一个。如果实在没有的话，有人有兴趣一起开发一个的话请留言告诉我。<br>特别感谢一下 <a href="https://www.qiniu.com" rel="external nofollow noopener noreferrer" target="_blank">七牛云</a> 提供的免费图床支持，个人认为国内最好用的图床，没有之一，也推荐给大家使用。</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;http://www.lintcode.com&quot; rel=&quot;external nofollow noopener noreferrer&quot; target=&quot;_blank&quot;&gt;LintCode&lt;/a&gt; 是专注代码面试的在线评测系统，有很多代码题，可以用 &lt;code&gt;Java&lt;/code&gt;、&lt;code&gt;C++&lt;/code&gt;、&lt;code&gt;Python&lt;/code&gt; 在线答题，我觉得还不错，就决定把做一做这些题，然后把题目的实现、优化思路写下来，一来是为了有更深的理解，二来是讨论一下还有没有更好的方法。&lt;/p&gt;
&lt;h2 id=&quot;问题&quot;&gt;&lt;a href=&quot;#问题&quot; class=&quot;headerlink&quot; title=&quot;问题&quot;&gt;&lt;/a&gt;问题&lt;/h2&gt;&lt;p&gt;LintCode：&lt;a href=&quot;http://www.lintcode.com/zh-cn/problem/building-outline/&quot; rel=&quot;external nofollow noopener noreferrer&quot; target=&quot;_blank&quot;&gt;大楼轮廓&lt;/a&gt; &lt;code&gt;超难&lt;/code&gt;&lt;br&gt;
    
    </summary>
    
      <category term="LintCode" scheme="http://hoofoo-whu.github.io/categories/LintCode/"/>
    
    
      <category term="算法" scheme="http://hoofoo-whu.github.io/tags/%E7%AE%97%E6%B3%95/"/>
    
      <category term="C++" scheme="http://hoofoo-whu.github.io/tags/C/"/>
    
      <category term="数据结构" scheme="http://hoofoo-whu.github.io/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
  </entry>
  
  <entry>
    <title>斐波那契数列的实现及优化</title>
    <link href="http://hoofoo-whu.github.io/article/2016-10-28/%E6%96%90%E6%B3%A2%E9%82%A3%E5%A5%91%E6%95%B0%E5%88%97%E7%9A%84%E5%AE%9E%E7%8E%B0%E5%8F%8A%E4%BC%98%E5%8C%96.html"/>
    <id>http://hoofoo-whu.github.io/article/2016-10-28/斐波那契数列的实现及优化.html</id>
    <published>2016-10-28T15:48:12.000Z</published>
    <updated>2020-11-29T10:16:15.242Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p><a href="http://www.lintcode.com" rel="external nofollow noopener noreferrer" target="_blank">LintCode</a> 是专注代码面试的在线评测系统，有很多代码题，可以用 <code>Java</code>、<code>C++</code>、<code>Python</code> 在线答题，我觉得还不错，就决定把做一做这些题，然后把题目的实现、优化思路写下来，一来是为了有更深的理解，二来是讨论一下还有没有更好的方法。</p><h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p>LintCode：<a href="http://www.lintcode.com/zh-cn/problem/fibonacci/" rel="external nofollow noopener noreferrer" target="_blank">斐波纳契数列</a><br><a id="more"></a></p><h3 id="描述"><a href="#描述" class="headerlink" title="描述"></a>描述</h3><p>查找 <code>斐波纳契数列</code> 中第 $N$ 个数。<br>所谓的 <code>斐波纳契数列</code> 是指：</p><ul><li>前两个数是 <code>0</code> 和 <code>1</code> 。</li><li>第 $i$ 个数是第 $i-1$ 个数和第 $i-2$ 个数的和。</li></ul><p>斐波纳契数列的前10个数字是：<br><code>0, 1, 1, 2, 3, 5, 8, 13, 21, 34 ...</code></p><h3 id="样例"><a href="#样例" class="headerlink" title="样例"></a>样例</h3><p>给定 <code>1</code>，返回 <code>0</code><br>给定 <code>2</code>，返回 <code>1</code><br>给定 <code>10</code>，返回 <code>34</code></p><h2 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h2><h3 id="递归实现"><a href="#递归实现" class="headerlink" title="递归实现"></a>递归实现</h3><h4 id="问题分析"><a href="#问题分析" class="headerlink" title="问题分析"></a>问题分析</h4><p>根据 <code>斐波那契数列</code> 的定义得：</p><blockquote><p>$$<br>\begin{aligned}<br>f(1) &amp; = 0\<br>f(2) &amp; = 1\<br>f(n) &amp; = f(n - 1) + f(n - 2)\qquad n\in{3,4,5\ldots}<br>\end{aligned}<br>$$</p></blockquote><p>根据上述表达式最明显的实现方式便是递归。</p><h4 id="实现-C"><a href="#实现-C" class="headerlink" title="实现 - C++"></a>实现 - C++</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">fibonacci</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (n == <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (n == <span class="number">2</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> fibonacci(n - <span class="number">1</span>) + fibonacci(n - <span class="number">2</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h4 id="实现-Java"><a href="#实现-Java" class="headerlink" title="实现 - Java"></a>实现 - Java</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">fibonacci</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (n == <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (n == <span class="number">2</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> fibonacci(n - <span class="number">1</span>) + fibonacci(n - <span class="number">2</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="结果分析"><a href="#结果分析" class="headerlink" title="结果分析"></a>结果分析</h4><ul><li>结果：结果不尽人意，速度非常慢，甚至没有通过 <a href="http://www.lintcode.com" rel="external nofollow noopener noreferrer" target="_blank">LintCode</a> 的评测。</li><li>分析：这种递归不同于一般的递归，在 <code>n</code> 较大时，两次递归调用中存在大量的重复运算，导致速度非常慢。</li></ul><h3 id="非递归实现"><a href="#非递归实现" class="headerlink" title="非递归实现"></a>非递归实现</h3><h4 id="问题分析-1"><a href="#问题分析-1" class="headerlink" title="问题分析"></a>问题分析</h4><p>在递归实现中，由于大量的重复运算导致速度慢，所以采用非递归形式，思路也非常简单：从 $f(0)$ 开始根据公式叠加至 $f(n)$ 。</p><h4 id="实现-C-1"><a href="#实现-C-1" class="headerlink" title="实现 - C++"></a>实现 - C++</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>&#123;</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">fibonacci</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (n == <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (n == <span class="number">2</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">int</span> n1 = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">int</span> n2 = <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">int</span> sn = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">while</span> (n &gt; <span class="number">2</span>) &#123;</span><br><span class="line">                sn = n1 + n2;</span><br><span class="line">                n1 = n2;</span><br><span class="line">                n2 = sn;</span><br><span class="line">                n--;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> sn;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h4 id="实现-Java-1"><a href="#实现-Java-1" class="headerlink" title="实现 - Java"></a>实现 - Java</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">fibonacci</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (n == <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (n == <span class="number">2</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">int</span> n1 = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">int</span> n2 = <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">int</span> sn = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">while</span> (n &gt; <span class="number">2</span>) &#123;</span><br><span class="line">                sn = n1 + n2;</span><br><span class="line">                n1 = n2;</span><br><span class="line">                n2 = sn;</span><br><span class="line">                n--;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> sn;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h4 id="结果分析-1"><a href="#结果分析-1" class="headerlink" title="结果分析"></a>结果分析</h4><ul><li>结果：经测试 <code>C++</code> 最快可以以 <code>10ms</code> 轻松通过 <a href="http://www.lintcode.com" rel="external nofollow noopener noreferrer" target="_blank">LintCode</a> 的评测。</li><li>分析：时间复杂度为 $o(n)$ ，空间复杂度为 $o(1)$ ，效果不错。</li><li>细节：使用 <code>while</code> 代替 <code>for</code> 节省了一个 <code>Int(4Byte)</code> 的空间。</li></ul><h3 id="递归实现优化"><a href="#递归实现优化" class="headerlink" title="递归实现优化"></a>递归实现优化</h3><h4 id="问题分析-2"><a href="#问题分析-2" class="headerlink" title="问题分析"></a>问题分析</h4><p>类似的递归重复计算问题很多，但未必都可以简单的像 <code>斐波那契数列</code> 问题这么容易化为非递归，那么有没有办法递归的前提下保证没有重复计算呢？思路也很简单：计算结果加入缓存。</p><h4 id="实现-C-2"><a href="#实现-C-2" class="headerlink" title="实现 - C++"></a>实现 - C++</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; buffer;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">fibonacci</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(n == <span class="number">1</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (n == <span class="number">2</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> n1, n2, sn;</span><br><span class="line">        <span class="keyword">if</span> (buffer.size() == <span class="number">0</span>) &#123;</span><br><span class="line">            buffer.push_back(<span class="number">0</span>);</span><br><span class="line">            buffer.push_back(<span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (buffer.size() &gt; n - <span class="number">2</span>) &#123;</span><br><span class="line">            n1 = buffer[n - <span class="number">2</span>];</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            n1 = fibonacci(n - <span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (buffer.size() &gt; n - <span class="number">3</span>) &#123;</span><br><span class="line">            n2 = buffer[n - <span class="number">3</span>];</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            n2 = fibonacci(n - <span class="number">2</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        sn = n1 + n2;</span><br><span class="line">        <span class="keyword">if</span> (buffer.size() &lt; n) &#123;</span><br><span class="line">            buffer.push_back(sn);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> sn;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h4 id="实现-Java-2"><a href="#实现-Java-2" class="headerlink" title="实现 - Java"></a>实现 - Java</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    ArrayList&lt;Integer&gt; buffer = <span class="keyword">new</span> ArrayList&lt;Integer&gt;();</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">fibonacci</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(n == <span class="number">1</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (n == <span class="number">2</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> n1, n2, sn;</span><br><span class="line">        <span class="keyword">if</span> (buffer.size() == <span class="number">0</span>) &#123;</span><br><span class="line">            buffer.add(<span class="number">0</span>);</span><br><span class="line">            buffer.add(<span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (buffer.size() &gt; n - <span class="number">2</span>) &#123;</span><br><span class="line">            n1 = buffer.get(n - <span class="number">2</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            n1 = fibonacci(n - <span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (buffer.size() &gt; n - <span class="number">3</span>) &#123;</span><br><span class="line">            n2 = buffer.get(n - <span class="number">3</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            n2 = fibonacci(n - <span class="number">2</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        sn = n1 + n2;</span><br><span class="line">        <span class="keyword">if</span> (buffer.size() &lt; n) &#123;</span><br><span class="line">            buffer.add(sn);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> sn;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="结果分析-2"><a href="#结果分析-2" class="headerlink" title="结果分析"></a>结果分析</h4><ul><li>结果：经测试 <code>C++</code> 同样最快可以以 <code>10ms</code> 轻松通过 <a href="http://www.lintcode.com" rel="external nofollow noopener noreferrer" target="_blank">LintCode</a> 的评测。 <code>Java</code> 也跑出了 <code>1269ms</code> 的成绩，可喜可贺。</li><li>分析：虽然空间复杂度相对非递归提升到了 $o(n)$ ，不过在不改动递归结构的前提下，也算达到了不错的效果。</li><li>细节：<ul><li>在枚举 $f(1)$ 、 $f(2)$ 后再声明变量，以节约内存空间。</li><li><code>n</code> 是从 <code>1</code> 开始，<code>buffer</code> 是从 <code>0</code> 开始。</li><li>$f(1)$ 和 $f(2)$ 要一开始加进来，如果递归加入会顺序相反，导致结果出错。</li></ul></li></ul><h3 id="矩阵快速幂实现"><a href="#矩阵快速幂实现" class="headerlink" title="矩阵快速幂实现"></a>矩阵快速幂实现</h3><h4 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h4><p>根据<a href="http://hoofoo.duoshuo.com/user-url/?user_id=6338700328229143298" rel="external nofollow noopener noreferrer" target="_blank">@iFzzzh</a>的提醒，发现了大大降低时间复杂度的方法。</p><h4 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h4><p>先介绍一下什么是快速幂，如下式：</p><blockquote><p>$$<br>f(n) = a^n\tag{1}<br>$$</p></blockquote><p>当 $n$ 为偶数时则有:</p><blockquote><p>$$<br>f(n) = (a^{\frac{n}{2}})^2=f(\frac{n}{2})^2\tag{2}<br>$$</p></blockquote><p>当 $n$ 为奇数时则有:</p><blockquote><p>$$<br>f(n) = (a^{\lfloor\frac{n}{2}\rfloor})^2 \times a=f(\lfloor\frac{n}{2}\rfloor)^2\times a\tag{3}<br>$$</p></blockquote><p>显然 $(1)$ 式时间复杂度为 $o(n)$ ，而 $(2)$ $(3)$ 式复杂度为 $o(log_2 n)$，这就是快速幂，简单的来说就是以二分降幂的方式减少计算步骤。</p><h4 id="问题分析-3"><a href="#问题分析-3" class="headerlink" title="问题分析"></a>问题分析</h4><p>类比上述的快速幂法，采用矩阵的方式也可以将 <code>斐波那契数列</code> 化为 $a^n$ 的格式，达到降幂的效果：</p><blockquote><p>$$<br>\begin{aligned}<br>\begin{bmatrix}<br>f(n)\<br>f(n-1)\<br>\end{bmatrix}&amp;=<br>\begin{bmatrix}<br>f(n-1)+f(n-2)\<br>f(n-1)\<br>\end{bmatrix}\\<br>&amp;=\begin{bmatrix}<br>1 &amp; 1\<br>1 &amp; 0\<br>\end{bmatrix}\times<br>\begin{bmatrix}<br>f(n-1)\<br>f(n-2)\<br>\end{bmatrix}\\<br>&amp;=\begin{bmatrix}<br>1 &amp; 1\<br>1 &amp; 0\<br>\end{bmatrix}^2\times<br>\begin{bmatrix}<br>f(n-2)\<br>f(n-3)\<br>\end{bmatrix}\<br>&amp;\qquad\qquad\quad\vdots\<br>&amp;=\begin{bmatrix}<br>1 &amp; 1\<br>1 &amp; 0\<br>\end{bmatrix}^{n-2}\times<br>\begin{bmatrix}<br>f(2)\<br>f(1)\<br>\end{bmatrix}\<br>\end{aligned}<br>$$</p></blockquote><p>根据 <code>斐波那契数列</code> 的定义，$f(1)$ $f(2)$ 为常数，此时便可以通过快速幂的方式计算 $f(n)$ 的值了。</p><h4 id="实现-C-3"><a href="#实现-C-3" class="headerlink" title="实现 - C++"></a>实现 - C++</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">fibonacci</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(n == <span class="number">1</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(n == <span class="number">2</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> s[<span class="number">2</span>][<span class="number">2</span>];</span><br><span class="line">        rxn(n - <span class="number">2</span>, s);</span><br><span class="line">        <span class="keyword">return</span> s[<span class="number">0</span>][<span class="number">0</span>];</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">rxn</span><span class="params">(<span class="keyword">int</span> n, <span class="keyword">int</span> result[<span class="number">2</span>][<span class="number">2</span>])</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(n == <span class="number">0</span>)&#123;</span><br><span class="line">            result[<span class="number">0</span>][<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">            result[<span class="number">0</span>][<span class="number">1</span>] = <span class="number">0</span>;</span><br><span class="line">            result[<span class="number">1</span>][<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">            result[<span class="number">1</span>][<span class="number">1</span>] = <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(n == <span class="number">1</span>)&#123;</span><br><span class="line">            result[<span class="number">0</span>][<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">            result[<span class="number">0</span>][<span class="number">1</span>] = <span class="number">1</span>;</span><br><span class="line">            result[<span class="number">1</span>][<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">            result[<span class="number">1</span>][<span class="number">1</span>] = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(n &gt; <span class="number">1</span>)&#123;</span><br><span class="line">            <span class="keyword">int</span> s[<span class="number">2</span>][<span class="number">2</span>] = &#123;<span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>&#125;;</span><br><span class="line">            <span class="keyword">int</span> buffer[<span class="number">2</span>][<span class="number">2</span>];</span><br><span class="line">            rxn(n / <span class="number">2</span>, buffer);</span><br><span class="line">            <span class="keyword">int</span> buffer2[<span class="number">2</span>][<span class="number">2</span>];</span><br><span class="line">            mul(buffer, buffer, buffer2);</span><br><span class="line">            <span class="keyword">if</span>(n % <span class="number">2</span> == <span class="number">0</span>)&#123;</span><br><span class="line">                result[<span class="number">0</span>][<span class="number">0</span>] = buffer2[<span class="number">0</span>][<span class="number">0</span>];</span><br><span class="line">                result[<span class="number">0</span>][<span class="number">1</span>] = buffer2[<span class="number">0</span>][<span class="number">1</span>];</span><br><span class="line">                result[<span class="number">1</span>][<span class="number">0</span>] = buffer2[<span class="number">1</span>][<span class="number">0</span>];</span><br><span class="line">                result[<span class="number">1</span>][<span class="number">1</span>] = buffer2[<span class="number">1</span>][<span class="number">1</span>];</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                mul(buffer2, s, result);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">mul</span><span class="params">(<span class="keyword">int</span> m1[<span class="number">2</span>][<span class="number">2</span>], <span class="keyword">int</span> m2[<span class="number">2</span>][<span class="number">2</span>], <span class="keyword">int</span> result[<span class="number">2</span>][<span class="number">2</span>])</span> </span>&#123;</span><br><span class="line">        result[<span class="number">0</span>][<span class="number">0</span>] = m1[<span class="number">0</span>][<span class="number">0</span>] * m2[<span class="number">0</span>][<span class="number">0</span>] + m1[<span class="number">0</span>][<span class="number">1</span>] * m2[<span class="number">1</span>][<span class="number">0</span>];</span><br><span class="line">        result[<span class="number">0</span>][<span class="number">1</span>] = m1[<span class="number">0</span>][<span class="number">0</span>] * m2[<span class="number">0</span>][<span class="number">1</span>] + m1[<span class="number">0</span>][<span class="number">1</span>] * m2[<span class="number">1</span>][<span class="number">1</span>];</span><br><span class="line">        result[<span class="number">1</span>][<span class="number">0</span>] = m1[<span class="number">1</span>][<span class="number">0</span>] * m2[<span class="number">0</span>][<span class="number">0</span>] + m1[<span class="number">1</span>][<span class="number">1</span>] * m2[<span class="number">1</span>][<span class="number">0</span>];</span><br><span class="line">        result[<span class="number">1</span>][<span class="number">1</span>] = m1[<span class="number">1</span>][<span class="number">0</span>] * m2[<span class="number">0</span>][<span class="number">1</span>] + m1[<span class="number">1</span>][<span class="number">1</span>] * m2[<span class="number">1</span>][<span class="number">1</span>];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h4 id="实现-Java-3"><a href="#实现-Java-3" class="headerlink" title="实现 - Java"></a>实现 - Java</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">fibonacci</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(n == <span class="number">1</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (n == <span class="number">2</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> s[][] = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">2</span>][<span class="number">2</span>];</span><br><span class="line">        rxn(n - <span class="number">2</span>, s);</span><br><span class="line">        <span class="keyword">return</span> s[<span class="number">0</span>][<span class="number">0</span>];</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">rxn</span><span class="params">(<span class="keyword">int</span> n, <span class="keyword">int</span>[][] result)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(n == <span class="number">0</span>)&#123;</span><br><span class="line">            result[<span class="number">0</span>][<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">            result[<span class="number">0</span>][<span class="number">1</span>] = <span class="number">0</span>;</span><br><span class="line">            result[<span class="number">1</span>][<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">            result[<span class="number">1</span>][<span class="number">1</span>] = <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(n == <span class="number">1</span>)&#123;</span><br><span class="line">            result[<span class="number">0</span>][<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">            result[<span class="number">0</span>][<span class="number">1</span>] = <span class="number">1</span>;</span><br><span class="line">            result[<span class="number">1</span>][<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">            result[<span class="number">1</span>][<span class="number">1</span>] = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(n &gt; <span class="number">1</span>)&#123;</span><br><span class="line">            <span class="keyword">int</span> s[][] = &#123;&#123;<span class="number">1</span>, <span class="number">1</span>&#125;, &#123;<span class="number">1</span>, <span class="number">0</span>&#125;&#125;;</span><br><span class="line">            <span class="keyword">int</span> buffer[][] = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">2</span>][<span class="number">2</span>];</span><br><span class="line">            rxn(n / <span class="number">2</span>, buffer);</span><br><span class="line">            <span class="keyword">int</span> buffer2[][] = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">2</span>][<span class="number">2</span>];</span><br><span class="line">            mul(buffer, buffer, buffer2);</span><br><span class="line">            <span class="keyword">if</span>(n % <span class="number">2</span> == <span class="number">0</span>)&#123;</span><br><span class="line">                result[<span class="number">0</span>][<span class="number">0</span>] = buffer2[<span class="number">0</span>][<span class="number">0</span>];</span><br><span class="line">                result[<span class="number">0</span>][<span class="number">1</span>] = buffer2[<span class="number">0</span>][<span class="number">1</span>];</span><br><span class="line">                result[<span class="number">1</span>][<span class="number">0</span>] = buffer2[<span class="number">1</span>][<span class="number">0</span>];</span><br><span class="line">                result[<span class="number">1</span>][<span class="number">1</span>] = buffer2[<span class="number">1</span>][<span class="number">1</span>];</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                mul(buffer2, s, result);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">mul</span><span class="params">(<span class="keyword">int</span>[][] m1, <span class="keyword">int</span>[][] m2, <span class="keyword">int</span>[][] result)</span> </span>&#123;</span><br><span class="line">        result[<span class="number">0</span>][<span class="number">0</span>] = m1[<span class="number">0</span>][<span class="number">0</span>] * m2[<span class="number">0</span>][<span class="number">0</span>] + m1[<span class="number">0</span>][<span class="number">1</span>] * m2[<span class="number">1</span>][<span class="number">0</span>];</span><br><span class="line">        result[<span class="number">0</span>][<span class="number">1</span>] = m1[<span class="number">0</span>][<span class="number">0</span>] * m2[<span class="number">0</span>][<span class="number">1</span>] + m1[<span class="number">0</span>][<span class="number">1</span>] * m2[<span class="number">1</span>][<span class="number">1</span>];</span><br><span class="line">        result[<span class="number">1</span>][<span class="number">0</span>] = m1[<span class="number">1</span>][<span class="number">0</span>] * m2[<span class="number">0</span>][<span class="number">0</span>] + m1[<span class="number">1</span>][<span class="number">1</span>] * m2[<span class="number">1</span>][<span class="number">0</span>];</span><br><span class="line">        result[<span class="number">1</span>][<span class="number">1</span>] = m1[<span class="number">1</span>][<span class="number">0</span>] * m2[<span class="number">0</span>][<span class="number">1</span>] + m1[<span class="number">1</span>][<span class="number">1</span>] * m2[<span class="number">1</span>][<span class="number">1</span>];</span><br><span class="line">    &#125;   </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="结果分析-3"><a href="#结果分析-3" class="headerlink" title="结果分析"></a>结果分析</h4><ul><li>结果：<code>C++</code> 最快可以以 <code>10ms</code> 通过 <a href="http://www.lintcode.com" rel="external nofollow noopener noreferrer" target="_blank">LintCode</a> 的评测。 <code>Java</code> 最快可以以 <code>1200ms</code> 通过 <a href="http://www.lintcode.com" rel="external nofollow noopener noreferrer" target="_blank">LintCode</a> 的评测。</li><li>分析：可能是由于 <a href="http://www.lintcode.com" rel="external nofollow noopener noreferrer" target="_blank">LintCode</a> 测试数据不够大的原因，矩阵快速幂并没有体现出时间复杂度为 $o(log_2 n)$ 应有的优势，不过根据其单步计算量提升，时间却与 <code>非递归</code> <code>递归优化</code> 达到同一水平，可以判断出其效果还是有的。</li></ul><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>理论上讲的通的道理只是理论上，小问题到了手上解决掉才能明白。简单的问题弄透也不容易，我记录一下这个思路省得忘了，能够有人用得上自然更好。<strong>当然谁要是能给我个更好的答案才是极好的</strong>。</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;http://www.lintcode.com&quot; rel=&quot;external nofollow noopener noreferrer&quot; target=&quot;_blank&quot;&gt;LintCode&lt;/a&gt; 是专注代码面试的在线评测系统，有很多代码题，可以用 &lt;code&gt;Java&lt;/code&gt;、&lt;code&gt;C++&lt;/code&gt;、&lt;code&gt;Python&lt;/code&gt; 在线答题，我觉得还不错，就决定把做一做这些题，然后把题目的实现、优化思路写下来，一来是为了有更深的理解，二来是讨论一下还有没有更好的方法。&lt;/p&gt;
&lt;h2 id=&quot;题目&quot;&gt;&lt;a href=&quot;#题目&quot; class=&quot;headerlink&quot; title=&quot;题目&quot;&gt;&lt;/a&gt;题目&lt;/h2&gt;&lt;p&gt;LintCode：&lt;a href=&quot;http://www.lintcode.com/zh-cn/problem/fibonacci/&quot; rel=&quot;external nofollow noopener noreferrer&quot; target=&quot;_blank&quot;&gt;斐波纳契数列&lt;/a&gt;&lt;br&gt;
    
    </summary>
    
      <category term="LintCode" scheme="http://hoofoo-whu.github.io/categories/LintCode/"/>
    
    
      <category term="算法" scheme="http://hoofoo-whu.github.io/tags/%E7%AE%97%E6%B3%95/"/>
    
      <category term="C++" scheme="http://hoofoo-whu.github.io/tags/C/"/>
    
      <category term="数学" scheme="http://hoofoo-whu.github.io/tags/%E6%95%B0%E5%AD%A6/"/>
    
      <category term="Java" scheme="http://hoofoo-whu.github.io/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>世界，您好！</title>
    <link href="http://hoofoo-whu.github.io/article/2016-10-07/%E4%B8%96%E7%95%8C%EF%BC%8C%E6%82%A8%E5%A5%BD%EF%BC%81.html"/>
    <id>http://hoofoo-whu.github.io/article/2016-10-07/世界，您好！.html</id>
    <published>2016-10-07T14:39:18.000Z</published>
    <updated>2020-11-29T10:16:15.242Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>華方，也称畢方，它是火神、也是木神，居住在树木中。華方的外形象丹顶鹤，但是只有一条腿（一说为只有一只翅膀），身体为蓝色、有红色的斑点，喙为白色。華方不吃谷物、吞吃火焰，据说華方的出现预示着大火。</p></blockquote><p>　　与其说是历经数日的搭建、修改、完善，不如说是数日的拖延，本人的博客终于是成功上线了。我觉得上述这只鸟很有趣，便将此鸟之名用作了博客之名，英文便音译为hoofoo。<br>　　此博客主要用来更新技术相关的文章，当然也可能会拓展开更多的分支，可能会包括但不限于数码、科技甚至手工手艺等方面。如果有什么问题欢迎评论、撕逼，当然也欢迎大家一起探讨、学习。<br>　　下面是我搭建博客相关的事情，我简单的总结了一下，请大家指正。<br><a id="more"></a></p><h2 id="起因"><a href="#起因" class="headerlink" title="起因"></a>起因</h2><p>　　说起打算搭个人博客的念想，那是两年前的事情。那时正是我打算入门<code>node.js</code>和<code>mongodb</code>的时候，作为一个强迫症和装逼患者来看，搭一个博客似乎就顺理成章的成为了一个绝佳的练手办法，然而作为一个菜鸟，很快就被核心问题卡住了，找不到一个称心的富文本编辑方案。当时因为一味地追求个人独立完成和绝对的自由定制化，自己却又没有能力实现，所以就搁置了很长时间，长的后来我甚至都不记得有这件事情了。</p><h2 id="转机"><a href="#转机" class="headerlink" title="转机"></a>转机</h2><p>　　至于后来如何拾起这个旧坑，就要从前些天发现<code>简书</code>这个网站说起了，甚至这个博客的整体的搭建都与其有极大的关系。当时在网上总是可以搜到<code>简书</code>上面的资料，而且质量都不错。尤其是其排版非常好，然后就通过互联网发现了其使用的<code>markdown</code>轻量级标记语言，也正是本博客使用的文字排版语言。<br>　　<code>markdown</code>语言可以通过编译成为无样式的<code>html</code>实现排版，所以便可以通过多种多样的<code>css</code>样式来实现定制，轻量化的同时又不失自由度。<code>markdown</code>的发现让我瞬间想起了曾经搭个人博客的念想。</p><h2 id="蔓延"><a href="#蔓延" class="headerlink" title="蔓延"></a>蔓延</h2><p>　　<code>markdown</code>的发现成为了此事的根基，几天的时间枝叶便蔓延开来。我先后通过其发现了支持<code>markdown</code>的静态博客框架<code>hexo</code>、基于<code>hexo</code>的定制主题<code>next</code>以及相关插件。不知不觉便具备了此事的全部条件。<br>　　这个博客的搭建平台我选择了<code>coding</code>，起先是由于其提供的<code>WebIDE</code>可以免去本地环境搭建、方便任意平台发文。由于对效率以及稳定性的考虑，<code>WebIDE</code>现在作为一个备用方式来使用。虽然没有使用<code>coding</code>的<code>WebIDE</code>，但是还是使用了其<code>git</code>服务，至于没选择<code>GitHub</code>的原因便是推送效率过低，且其<code>GitHub Pages</code>的域名绑定等也远没有<code>Coding Pages</code>来的方便。<br>　　博客起先打算借助<code>coding</code>的服务作为图床，不过综合测试后还是打消了这个念头，无论是速度还是功能都不能达到要求，最终在<code>cloudApp</code>和<code>七牛</code>中选择了后者，其免费空间也足够个人博客的使用。<br>　　借助上述工具，很快便完成了博客的搭建，但是作为强迫症又研究了一遍<code>next</code>主题所涉及到的<code>swig</code>模板引擎以及<code>stylus</code>样式预处理器，从头到尾的仔细修改了大多我不满意的细节，虽然这又让我想起了被前端支配的恐惧，不过由于过去对前端的一些研究对修改了的细节还是比较满意，所以选择了上线。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>　　目前来看，虽然此博客已经基本可以稳定使用，但还是有许许多多的细节不够完善，比如第三方插件的许多细节、对于移动端的支持不全面等等。我日后会一点点完善，或者抛弃掉框架自己实现一些东西，相关的状况我都会以博文的形式分享出来。<br>　　这篇作为我博客的第一篇博文，介绍了一下这个博客的搭建相关的东西，如果是软件方面的朋友也想搭个类似的博客的话，通过提及的这些东西自己完成一个博客应该很简单，顺带一提<code>hexo</code>和<code>next</code>都有详细的中文文档，喜欢造的朋友可以去瞧一瞧，一同进步。<br>　　如果是电脑打开的话，右边“站点概要”中有我的<code>简书</code>和<code>GitHub</code>链接，其中有我搭建过程中收藏的相关资料以及此博客的完整项目，本站也开通了<code>RSS</code>订阅，点击“站点概要”中的<code>RSS</code>即可订阅。后续我也会对上述提及的写详细的博文来说明，如果有什么问题可以在下方评论，我会认真的回复每一条评论。</p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;華方，也称畢方，它是火神、也是木神，居住在树木中。華方的外形象丹顶鹤，但是只有一条腿（一说为只有一只翅膀），身体为蓝色、有红色的斑点，喙为白色。華方不吃谷物、吞吃火焰，据说華方的出现预示着大火。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;　　与其说是历经数日的搭建、修改、完善，不如说是数日的拖延，本人的博客终于是成功上线了。我觉得上述这只鸟很有趣，便将此鸟之名用作了博客之名，英文便音译为hoofoo。&lt;br&gt;　　此博客主要用来更新技术相关的文章，当然也可能会拓展开更多的分支，可能会包括但不限于数码、科技甚至手工手艺等方面。如果有什么问题欢迎评论、撕逼，当然也欢迎大家一起探讨、学习。&lt;br&gt;　　下面是我搭建博客相关的事情，我简单的总结了一下，请大家指正。&lt;br&gt;
    
    </summary>
    
      <category term="大新闻" scheme="http://hoofoo-whu.github.io/categories/%E5%A4%A7%E6%96%B0%E9%97%BB/"/>
    
    
      <category term="人生经验" scheme="http://hoofoo-whu.github.io/tags/%E4%BA%BA%E7%94%9F%E7%BB%8F%E9%AA%8C/"/>
    
  </entry>
  
</feed>
